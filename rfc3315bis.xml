<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2136 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2136.xml">
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2460 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC2464 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2464.xml">
<!ENTITY RFC2373 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2373.xml">
<!ENTITY RFC3118 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3118.xml">
<!ENTITY RFC2401 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2401.xml">
<!ENTITY RFC1305 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1305.xml">
<!ENTITY RFC2104 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY RFC2434 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2434.xml">
<!ENTITY RFC1035 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2461 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2461.xml">
<!ENTITY RFC3041 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3041.xml">
<!ENTITY RFC0768 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0826 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0826.xml">
<!ENTITY RFC2462 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2462.xml">
<!ENTITY RFC1321 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml">
<!ENTITY RFC2131 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2131.xml">
<!ENTITY RFC2132 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2132.xml">
<!ENTITY RFC3646 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3646.xml">
<!ENTITY RFC4075 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4075.xml">
<!ENTITY RFC6355 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6355.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-dhcwg-dhc-rfc3315bis-01" ipr="pre5378Trust200902"
     obsoletes="3315,3633">
  <front>
    <title abbrev="RFC 3315 bis">Dynamic Host Configuration Protocol for IPv6 (DHCPv6) bis</title>

    <author fullname="Tomek Mrugalski" initials="T." role="editor" surname="Mrugalski">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <email>tomasz.mrugalski@gmail.com</email>
      </address>
    </author>
    
    <author fullname="Marcin Siodelski" initials="M" surname="Siodelski">
      <organization abbrev="ISC">Internet Systems Consortium, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter St.</street>
          <city>Redwood City</city>
	  <region>CA</region>
          <code>94063</code>
          <country>USA</country>
        </postal>
        <email>msiodelski@gmail.com</email>
      </address>
    </author>    
    
    <author fullname="Bernie Volz" initials="B" surname="Volz">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>1414 Massachusetts Ave</street>
          <city>Boxborough, MA  01719</city>
          <region></region>
          <code></code>
          <country>USA</country>
        </postal>
        <email>volz@cisco.com</email>
      </address>
    </author>
    
    <author fullname="Andrew Yourtchenko" initials="A" surname="Yourtchenko">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
	  <street>De Kleetlaan, 7</street>
          <city>Diegem</city>
          <code>B-1831</code>
          <country>Belgium</country>
        </postal>
        <email>ayourtch@cisco.com</email>
      </address>
    </author>

    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization abbrev="SSW">Sandelman Software Works</organization>
      <address>
        <postal>
          <street>470 Dawson Avenue</street>
          <city>Ottawa</city>
          <region>ON</region>
          <code>K1Z 5V7</code>
          <country>CA</country>
        </postal>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <author fullname="Sheng Jiang" initials="S." surname="Jiang">
      <organization abbrev="Huawei">Huawei Technologies Co., Ltd</organization>
      <address>
        <postal>
          <street>Q14, Huawei Campus, No.156 Beiqing Road</street>
          <city>Hai-Dian District, Beijing, 100095</city>
          <country>P.R. China</country>
        </postal>
        <email>jiangsheng@huawei.com</email>
      </address>
    </author>

    <author fullname="Ted Lemon" initials="T" surname="Lemon">
      <organization abbrev="Nominum">Nominum, Inc.</organization>
      <address>
        <postal>
          <street>950 Charter St.</street>
          <city>Redwood City</city>
	  <region>CA</region>
          <code>94043</code>
          <country>USA</country>
        </postal>
        <email>Ted.Lemon@nominum.com</email>
      </address>
    </author>

    <date year="2014"/>

    <!--  SECTION 0:  Abstract                      -->

    <abstract>

      <t>
      The Dynamic Host Configuration Protocol for IPv6 (DHCP) enables DHCP
      servers to pass configuration parameters such as IPv6 network
      addresses to IPv6 nodes.  It offers the capability of automatic
      allocation of reusable network addresses and additional configuration
      flexibility.  This protocol is a stateful counterpart to "IPv6
      Stateless Address Autoconfiguration" (RFC 2462), and can be used
      separately or concurrently with the latter to obtain configuration
      parameters.
      </t>

    </abstract>

  </front>

  <middle>
    <section title="Introduction and Overview">
      <!-- 1, line 230-->

      <t>This document describes DHCP for IPv6 (DHCP), a client/server
      protocol that provides managed configuration of devices.</t>

      <t>DHCP can provide a device with addresses assigned by a DHCP server
      and other configuration information, which are carried in options. DHCP
      can be extended through the definition of new options to carry
      configuration information not specified in this document.</t>

      <t>DHCP is the "stateful address autoconfiguration protocol" and the
      "stateful autoconfiguration protocol" referred to in "IPv6 Stateless
      Address Autoconfiguration" <xref target="RFC2462"/>.</t>

      <t>The operational models and relevant configuration information for
      DHCPv4 <xref target="RFC2132"/><xref target="RFC2131"/> and DHCPv6 are
      sufficiently different that integration between the two services is not
      included in this document. If there is sufficient interest and demand,
      integration can be specified in a document that extends DHCPv6 to carry
      IPv4 addresses and configuration information.</t>

      <t>The remainder of this introduction summarizes DHCP, explaining the
      message exchange mechanisms and example message flows. The message flows
      in <xref target='RFC3315-1.2'/> and <xref target='RFC3315-1.3'/> are intended
      as illustrations of DHCP operation
      rather than an exhaustive list of all possible client-server
      interactions. <xref target='RFC3315-17'/>, <xref target='RFC3315-18'/>, and
      <xref target='RFC3315-19'/> explain client and server
      operation in detail.</t>

      <section title="Protocols and Addressing">
        <!-- 1.1, line 260-->

        <t>Clients and servers exchange DHCP messages using UDP <xref
        target="RFC0768"/>. The client uses a link-local address or addresses
        determined through other mechanisms for transmitting and receiving
        DHCP messages.</t>

        <t>DHCP servers receive messages from clients using a reserved,
        link-scoped multicast address. A DHCP client transmits most messages
        to this reserved multicast address, so that the client need not be
        configured with the address or addresses of DHCP servers.</t>

        <t>To allow a DHCP client to send a message to a DHCP server that is
        not attached to the same link, a DHCP relay agent on the client's link
        will relay messages between the client and server. The operation of
        the relay agent is transparent to the client and the discussion of
        message exchanges in the remainder of this section will omit the
        description of message relaying by relay agents.</t>

        <t>Once the client has determined the address of a server, it may
        under some circumstances send messages directly to the server using
        unicast.</t>
      </section>

      <!-- ends: "1.1 from line 260-->

      <section anchor='RFC3315-1.2' title="Client-server Exchanges Involving Two Messages">
        <!-- 1.2, line 284-->

        <t>When a DHCP client does not need to have a DHCP server assign it IP
        addresses, the client can obtain configuration information such as a
        list of available DNS servers <xref target="RFC3646"/> or NTP
        servers <xref target="RFC4075"/> through a single message and reply
        exchanged with a DHCP server. To obtain configuration information the
        client first sends an Information-Request message to the
        All_DHCP_Relay_Agents_and_Servers multicast address. Servers respond
        with a Reply message containing the configuration information for the
        client.</t>

        <t>This message exchange assumes that the client requires only
        configuration information and does not require the assignment of any
        IPv6 addresses.</t>

        <t>When a server has IPv6 addresses and other configuration
        information committed to a client, the client and server may be able
        to complete the exchange using only two messages, instead of four
        messages as described in the next section. In this case, the client
        sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers
        requesting the assignment of addresses and other configuration
        information. This message includes an indication that the client is
        willing to accept an immediate Reply message from the server. The
        server that is willing to commit the assignment of addresses to the
        client immediately responds with a Reply message. The configuration
        information and the addresses in the Reply message are then
        immediately available for use by the client.</t>

        <t>Each address assigned to the client has associated preferred and
        valid lifetimes specified by the server. To request an extension of
        the lifetimes assigned to an address, the client sends a Renew message
        to the server. The server sends a Reply message to the client with the
        new lifetimes, allowing the client to continue to use the address
        without interruption.</t>
      </section>

      <!-- ends: "1.2 from line 284-->

      <section anchor='RFC3315-1.3' title="Client-server Exchanges Involving Four Messages">
        <!-- 1.3, line 323-->

        <t>To request the assignment of one or more IPv6 addresses, a client
        first locates a DHCP server and then requests the assignment of
        addresses and other configuration information from the server. The
        client sends a Solicit message to the
        All_DHCP_Relay_Agents_and_Servers address to find available DHCP
        servers. Any server that can meet the client's requirements responds
        with an Advertise message. The client then chooses one of the servers
        and sends a Request message to the server asking for confirmed
        assignment of addresses and other configuration information. The
        server responds with a Reply message that contains the confirmed
        addresses and configuration.</t>

        <t>As described in the previous section, the client sends a Renew
        message to the server to extend the lifetimes associated with its
        addresses, allowing the client to continue to use those addresses
        without interruption.</t>
      </section>

      <!-- ends: "1.3 from line 323-->
    </section>

    <!-- ends: "1 from line 230-->

    <section title="Requirements">
      <!-- 2, line 343-->

      <t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
      SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
      document, are to be interpreted as described in <xref
      target="RFC2119"/>.</t>

      <t>This document also makes use of internal conceptual variables to
      describe protocol behavior and external variables that an implementation
      must allow system administrators to change. The specific variable names,
      how their values change, and how their settings influence protocol
      behavior are provided to demonstrate protocol behavior. An
      implementation is not required to have them in the exact form described
      here, so long as its external behavior is consistent with that described
      in this document.</t>
    </section>

    <!-- ends: "2 from line 343-->

    <section title="Background">
      <!-- 3, line 360-->

      <t>The IPv6 Specification provides the base architecture and design of
      IPv6. Related work in IPv6 that would best serve an implementor to study
      includes the IPv6 Specification <xref target="RFC2460"/>, the IPv6
      Addressing Architecture <xref target="RFC2373"/>, IPv6 Stateless Address
      Autoconfiguration <xref target="RFC2462"/>, IPv6 Neighbor Discovery
      Processing <xref target="RFC2461"/>, and Dynamic Updates to DNS <xref
      target="RFC2136"/>. These specifications enable DHCP to build upon the
      IPv6 work to provide both robust stateful autoconfiguration and
      autoregistration of DNS Host Names.</t>

      <t>The IPv6 Addressing Architecture specification <xref
      target="RFC2373"/> defines the address scope that can be used in an IPv6
      implementation, and the various configuration architecture guidelines
      for network designers of the IPv6 address space. Two advantages of IPv6
      are that support for multicast is required and nodes can create
      link-local addresses during initialization. The availability of these
      features means that a client can use its link-local address and a
      well-known multicast address to discover and communicate with DHCP
      servers or relay agents on its link.</t>

      <t>IPv6 Stateless Address Autoconfiguration <xref target="RFC2462"/>
      specifies procedures by which a node may autoconfigure addresses based
      on router advertisements <xref target="RFC2461"/>, and the use of a
      valid lifetime to support renumbering of addresses on the Internet. In
      addition, the protocol interaction by which a node begins stateless or
      stateful autoconfiguration is specified. DHCP is one vehicle to perform
      stateful autoconfiguration. Compatibility with stateless address
      autoconfiguration is a design requirement of DHCP.</t>

      <t>IPv6 Neighbor Discovery <xref target="RFC2461"/> is the node
      discovery protocol in IPv6 which replaces and enhances functions of ARP
      <xref target="RFC0826"/>. To understand IPv6 and stateless address
      autoconfiguration, it is strongly recommended that implementors
      understand IPv6 Neighbor Discovery.</t>

      <t>Dynamic Updates to DNS <xref target="RFC2136"/> is a specification
      that supports the dynamic update of DNS records for both IPv4 and IPv6.
      DHCP can use the dynamic updates to DNS to integrate addresses and name
      space to not only support autoconfiguration, but also autoregistration
      in IPv6.</t>
    </section>

    <!-- ends: "3 from line 360-->

    <section title="Terminology">
      <!-- 4, line 402-->

      <t>This section defines terminology specific to IPv6 and DHCP used in
      this document.</t>

      <section title="IPv6 Terminology">
        <!-- 4.1, line 408-->

        <t>IPv6 terminology relevant to this specification from the IPv6
        Protocol <xref target="RFC2460"/>, IPv6 Addressing Architecture <xref
        target="RFC2373"/>, and IPv6 Stateless Address Autoconfiguration <xref
        target="RFC2462"/> is included below.</t>

        <t>
        <list hangIndent="26" style="hanging">
          <t hangText="address">An IP layer identifier for an interface or a set of
          interfaces.</t>

          <t hangText="host">Any node that is not a router.</t>

          <t hangText="IP"> Internet Protocol Version 6 (IPv6). The terms IPv4 and IPv6 are
          used only in contexts where it is necessary to avoid ambiguity.</t>

          <t hangText="interface"> A node's attachment to a link.</t>

          <t hangText="link"> A communication facility or medium over which nodes can
          communicate at the link layer, i.e., the layer immediately below IP.
          Examples are Ethernet (simple or bridged); Token Ring; PPP links,
          X.25, Frame Relay, or ATM networks; and Internet (or higher) layer
          "tunnels", such as tunnels over IPv4 or IPv6 itself.</t>

          <t hangText="link-layer identifier"> A link-layer identifier for an interface.
          Examples include IEEE 802 addresses for Ethernet or Token Ring network
          interfaces, and E.164 addresses for ISDN links.</t>

          <t hangText="link-local address"> An IPv6 address having a link-only scope,
          indicated by having the prefix (FE80::/10), that can be used to reach
          neighboring nodes attached to the same link. Every interface has a
          link-local address.</t>

          <t hangText="multicast address"> An identifier for a set of interfaces (typically
          belonging to different nodes). A packet sent to a multicast address is
          delivered to all interfaces identified by that address.</t>

          <t hangText="neighbor"> A node attached to the same link.</t>

          <t hangText="node"> A device that implements IP.</t>

          <t hangText="packet"> An IP header plus payload.</t>

          <t hangText="prefix"> The initial bits of an address, or a set of IP addresses
          that share the same initial bits.</t>

          <t hangText="prefix length"> The number of bits in a prefix.</t>

          <t hangText="router"> A node that forwards IP packets not explicitly addressed to
          itself.</t>

          <t hangText="unicast address"> An identifier for a single interface. A packet sent
          to a unicast address is delivered to the interface identified by that
          address.</t>
        </list>
        </t>
      </section>

      <!-- ends: "4.1 from line 408-->

      <section title="DHCP Terminology">
        <!-- 4.2, line 478-->

        <t>Terminology specific to DHCP can be found below.</t>

        <t>
          <list hangIndent="26" style="hanging">
            <t hangText="appropriate to the link"> An address is "appropriate to the link"
            when the address is consistent with the DHCP server's knowledge of the
            network topology, prefix assignment and address assignment
            policies.</t>

            <t hangText="binding"> A binding (or, client binding) is a group of server data
            records containing the information the server has about the addresses
            in an IA or configuration information explicitly assigned to the
            client. Configuration information that has been returned to a client
            through a policy - for example, the information returned to all
            clients on the same link - does not require a binding. A binding
            containing information about an IA is indexed by the tuple &lt;DUID,
            IA-type, IAID&gt; (where IA-type is the type of address in the IA; for
            example, temporary). A binding containing configuration information
            for a client is indexed by &lt;DUID&gt;. </t>

            <t hangText="configuration parameter"> An
            element of the configuration information set on the server and
            delivered to the client using DHCP. Such parameters may be used to
            carry information to be used by a node to configure its network
            subsystem and enable communication on a link or internetwork, for
            example.</t>

            <t hangText="DHCP">Dynamic Host Configuration Protocol for IPv6. The terms DHCPv4
            and DHCPv6 are used only in contexts where it is necessary to avoid
            ambiguity.</t>

            <t hangText="DHCP client (or client)"> A node that initiates requests on a link to
            obtain configuration parameters from one or more DHCP servers.</t>

            <t hangText="DHCP domain"> A set of links managed by DHCP and operated by a single
            administrative entity.</t>

            <t hangText="DHCP realm"> A name used to identify the DHCP administrative domain
            from which a DHCP authentication key was selected.</t>

            <t hangText="DHCP relay agent (or relay agent)"> A node that acts as an
            intermediary to deliver DHCP messages between clients and servers. In certain
            configurations there may be more than one relay agent between clients and servers,
            so  a relay agent may send DHCP messages to another relay agent.</t>

            <t hangText="DHCP server (or server)"> A node that responds to requests from
            clients, and may or may not be on the same link as the client(s).</t>

            <t hangText="DUID"> A DHCP Unique IDentifier for a DHCP participant; each DHCP
            client and server has exactly one DUID. See <xref target='RFC3315-9'/> for details of
            the ways in which a DUID may be constructed.</t>

            <t hangText="Identity association (IA)"> A collection of addresses assigned to a
            client. Each IA has an associated IAID. A client may have more than
            one IA assigned to it; for example, one for each of its interfaces.
            Each IA holds one type of address; for example, an identity
            association for temporary addresses (IA_TA) holds temporary addresses
            (see "identity association for temporary addresses"). Throughout this
            document, "IA" is used to refer to an identity association without
            identifying the type of addresses in the IA.</t>

            <t hangText="Identity association identifier (IAID)"> An identifier for an IA,
            chosen by the client. Each IA has an IAID, which is chosen to be
            unique among all IAIDs for IAs belonging to that client.</t>

            <t hangText="Identity association for non-temporary addresses (IA_NA)"> An IA that
            carries assigned addresses that are not temporary addresses (see
            "identity association for temporary addresses")</t>

            <t hangText="Identity association for temporary addresses (IA_TA)"> An IA that
            carries temporary addresses (see RFC <xref target="RFC3041"/>).</t>

            <t hangText="message"> A unit of data carried as the payload of a UDP datagram,
            exchanged among DHCP servers, relay agents and clients.</t>

            <t hangText="Reconfigure key"> A key supplied to a client by a server used to
            provide security for Reconfigure messages.</t>

            <t hangText="relaying"> A DHCP relay agent relays DHCP messages between DHCP
            participants.</t>

            <t hangText="transaction ID"> An opaque value used to match responses with replies
            initiated either by a client or server.</t>
          </list>
        </t>
      </section>

      <!-- ends: "4.2 from line 478-->
    </section>

    <!-- ends: "4 from line 402-->

    <section title="DHCP Constants">
      <!-- 5, line 597-->

      <t>This section describes various program and networking constants used
      by DHCP.</t>

      <section title="Multicast Addresses">
        <!-- 5.1, line 603-->

        <t>DHCP makes use of the following multicast addresses:</t>

        <t>
          <list hangIndent="16" style="hanging">
            <t hangText="All_DHCP_Relay_Agents_and_Servers (FF02::1:2)"> A link-scoped
            multicast address used by a client to communicate with neighboring
            (i.e., on-link) relay agents and servers. All servers and relay agents
            are members of this multicast group.</t>

            <t hangText="All_DHCP_Servers (FF05::1:3)"> A site-scoped multicast address used
            by a relay agent to communicate with servers, either because the relay
            agent wants to send messages to all servers or because it does not
            know the unicast addresses of the servers. Note that in order for a
            relay agent to use this address, it must have an address of sufficient
            scope to be reachable by the servers. All servers within the site are
            members of this multicast group.</t>
          </list>
        </t>
      </section>

      <!-- ends: "5.1 from line 603-->

      <section title="UDP Ports">
        <!-- 5.2, line 628-->

        <t>Clients listen for DHCP messages on UDP port 546. Servers and relay
        agents listen for DHCP messages on UDP port 547.</t>
      </section>

      <!-- ends: "5.2 from line 628-->

      <section anchor='RFC3315-5.3' title="DHCP Message Types">
        <!-- 5.3, line 634-->

        <t>DHCP defines the following message types. More detail on these
        message types can be found in <xref target='RFC3315-6'/> and <xref target='RFC3315-7'/>. Message types not
        listed here are reserved for future use. The numeric encoding for each
        message type is shown in parentheses.</t>

        <t>
          <list hangIndent="16" style="hanging">
            <t hangText="SOLICIT (1)"> A client sends a Solicit message to locate servers.</t>
            <t hangText="ADVERTISE (2)"> A server sends an Advertise message to indicate that
            it is available for DHCP service, in response to a Solicit message
            received from a client.</t>

            <t hangText="REQUEST (3)"> A client sends a Request message to request
            configuration parameters, including IP addresses, from a specific
            server.</t>

            <t hangText="CONFIRM (4)"> A client sends a Confirm message to any available
            server to determine whether the addresses it was assigned are still
            appropriate to the link to which the client is connected.</t>

            <t hangText="RENEW (5)"> A client sends a Renew message to the server that
            originally provided the client's addresses and configuration
            parameters to extend the lifetimes on the addresses assigned to the
            client and to update other configuration parameters.</t>

            <t hangText="REBIND (6)"> A client sends a Rebind message to any available server
            to extend the lifetimes on the addresses assigned to the client and to
            update other configuration parameters; this message is sent after a
            client receives no response to a Renew message.</t>

            <t hangText="REPLY (7)"> A server sends a Reply message containing assigned
            addresses and configuration parameters in response to a Solicit,
            Request, Renew, Rebind message received from a client. A server sends
            a Reply message containing configuration parameters in response to an
            Information-request message. A server sends a Reply message in
            response to a Confirm message confirming or denying that the addresses
            assigned to the client are appropriate to the link to which the client
            is connected. A server sends a Reply message to acknowledge receipt of
            a Release or Decline message.</t>

            <t hangText="RELEASE (8)"> A client sends a Release message to the server that
            assigned addresses to the client to indicate that the client will no
            longer use one or more of the assigned addresses.</t>

            <t hangText="DECLINE (9)"> A client sends a Decline message to a server to
            indicate that the client has determined that one or more addresses
            assigned by the server are already in use on the link to which the
            client is connected.</t>

            <t hangText="RECONFIGURE (10)"> A server sends a Reconfigure message to a client
            to inform the client that the server has new or updated configuration
            parameters, and that the client is to initiate a Renew/Reply or
            Information-request/Reply transaction with the server in order to
            receive the updated information. </t>

            <t hangText="INFORMATION-REQUEST (11)"> A client
            sends an Information-request message to a server to request
            configuration parameters without the assignment of any IP addresses to
            the client.</t>

            <t hangText="RELAY-FORW (12)"> A relay agent sends a Relay-forward message to
            relay messages to servers, either directly or through another relay
            agent. The received message, either a client message or a
            Relay-forward message from another relay agent, is encapsulated in an
            option in the Relay-forward message.</t>

            <t hangText="RELAY-REPL (13)"> A server sends a Relay-reply message to a relay
            agent containing a message that the relay agent delivers to a client.
            The Relay-reply message may be relayed by other relay agents for
            delivery to the destination relay agent.</t>

            <t>The server encapsulates the client message as an option in the
            Relay-reply message, which the relay agent extracts and relays to the
            client.</t>
          </list>
        </t>
      </section>

      <!-- ends: "5.3 from line 634-->

      <section title="Status Codes">
        <!-- 5.4, line 733-->

        <t>DHCPv6 uses status codes to communicate the success or failure of
        operations requested in messages from clients and servers, and to
        provide additional information about the specific cause of the failure
        of a message. The specific status codes are defined in
        <xref target='RFC3315-24.4'/>.</t>

	<t>If the Status Code option does not appear in a message in which
	the option could appear, the status of the message is assumed to be Success.</t>
      </section>

      <!-- ends: "5.4 from line 733-->

      <section anchor='RFC3315-5.5' title="Transmission and Retransmission Parameters">
        <!-- 5.5, line 743-->

        <t>This section presents a table of values used to describe the
        message transmission behavior of clients and servers.</t>

	<texttable>

	  <ttcol>Parameter</ttcol>
	  <ttcol>Default</ttcol>
	  <ttcol>Description</ttcol>

          <c>SOL_MAX_DELAY</c>
	  <c>1 sec</c>
	  <c>Max delay of first Solicit</c>

	  <c>SOL_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Solicit timeout</c>

	  <c>SOL_MAX_RT</c>
	  <c>3600 secs</c>
	  <c>Max Solicit timeout value</c>

	  <c>REQ_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Request timeout</c>

	  <c>REQ_MAX_RT</c>
	  <c>30 secs</c>
	  <c>Max Request timeout value</c>

	  <c>REQ_MAX_RC</c>
	  <c>10</c>
	  <c>Max Request retry attempts</c>

	  <c>CNF_MAX_DELAY</c>
	  <c>1 sec</c>
	  <c>Max delay of first Confirm</c>

	  <c>CNF_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Confirm timeout</c>

	  <c>CNF_MAX_RT</c>
	  <c>4 secs</c>
	  <c>Max Confirm timeout</c>

	  <c>CNF_MAX_RD</c>
	  <c>10 secs</c>
	  <c>Max Confirm duration</c>

	  <c>REN_TIMEOUT</c>
	  <c>10 secs</c>
	  <c>Initial Renew timeout</c>

	  <c>REN_MAX_RT</c>
	  <c>600 secs</c>
	  <c>Max Renew timeout value</c>

	  <c>REB_TIMEOUT</c>
	  <c>10 secs</c>
	  <c>Initial Rebind timeout</c>

	  <c>REB_MAX_RT</c>
	  <c>600 secs</c>
	  <c>Max Rebind timeout value</c>

	  <c>INF_MAX_DELAY</c>
	  <c>1 sec</c>
	  <c>Max delay of first Information-request</c>

	  <c>INF_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Information-request timeout</c>

	  <c>INF_MAX_RT</c>
	  <c>3600 secs</c>
	  <c>Max Information-request timeout value</c>

	  <c>REL_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Release timeout</c>

	  <c>REL_MAX_RC</c>
	  <c>5</c>
	  <c>MAX Release attempts</c>

	  <c>DEC_TIMEOUT</c>
	  <c>1 sec</c>
	  <c>Initial Decline timeout</c>

	  <c>DEC_MAX_RC</c>
	  <c>5</c>
	  <c>Max Decline attempts</c>

	  <c>REC_TIMEOUT</c>
	  <c>2 secs</c>
	  <c>Initial Reconfigure timeout</c>

	  <c>REC_MAX_RC</c>
	  <c>8</c>
	  <c>Max Reconfigure attempts</c>

	  <c>HOP_COUNT_LIMIT</c>
	  <c>32</c>
	  <c>Max hop count in a Relay-forward message</c>

	</texttable>

      </section>

      <!-- ends: "5.5 from line 743-->

      <section title='Representation of time values and "Infinity" as a time value'>

        <t>All time values for lifetimes, T1 and T2 are unsigned integers. The
        value 0xffffffff is taken to mean "infinity" when used as a lifetime
        (as in <xref target="RFC2461"/>) or a value for T1 or T2.</t>

      </section>

      <!-- ends: "5.6 -->

    </section>

    <!-- ends: "5 from line 597-->

    <section anchor='RFC3315-6' title="Client/Server Message Formats">
      <!-- 6, line 786-->

      <t>All DHCP messages sent between clients and servers share an identical
      fixed format header and a variable format area for options.</t>

      <t>All values in the message header and in options are in network byte
      order.</t>

      <t>Options are stored serially in the options field, with no padding
      between the options. Options are byte-aligned but are not aligned in any
      other way such as on 2 or 4 byte boundaries.</t>

      <t>The following diagram illustrates the format of DHCP messages sent
      between clients and servers:</t>

      <figure align="center" anchor="FigClientServerMsg"
              title="Client/Server message format">
        <preamble/>

        <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |               transaction-id                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                            options                            .
   .                           (variable)                          .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
        </artwork>

        <postamble/>
      </figure>
      <t>
        <list hangIndent="24" style="hanging">
          <t hangText="   msg-type">Identifies the DHCP message type; the
            available message types are listed in <xref target='RFC3315-5.3'/>.
          </t>
          <t hangText="   transaction-id">The transaction ID for this message exchange.</t>
          <t hangText="   options">Options carried in this message; options are
            described in <xref target='RFC3315-22'/>.
          </t>
        </list>
      </t>
    </section>

    <!-- ends: "6 from line 786-->

    <section anchor='RFC3315-7' title="Relay Agent/Server Message Formats">
      <!-- 7, line 825-->

      <t>Relay agents exchange messages with servers to relay messages between
      clients and servers that are not connected to the same link.</t>

      <t>All values in the message header and in options are in network byte
      order.</t>

      <t>Options are stored serially in the options field, with no padding
      between the options. Options are byte-aligned but are not aligned in any
      other way such as on 2 or 4 byte boundaries.</t>

      <t>There are two relay agent messages, which share the following
      format:</t>

      <figure align="center" anchor="FigRelayServerMsg"
              title="Relay Agent/Server message format">
        <preamble/>

        <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |   hop-count   |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   |                         link-address                          |
   |                                                               |
   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
   |                               |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   |                         peer-address                          |
   |                                                               |
   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
   |                               |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                                                               .
   .            options (variable number and length)   ....        .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
        </artwork>

        <postamble/>
      </figure>

      <t>The following sections describe the use of the Relay Agent message
      header.</t>

      <section title="Relay-forward Message">
        <!-- 7.1, line 868-->

        <t>The following table defines the use of message fields in a
        Relay-forward message.</t>

        <t>
          <list hangIndent="24" style="hanging">
            <t hangText="   msg-type">RELAY-FORW</t>

            <t hangText="   hop-count">Number of relay agents that have relayed this
            message.</t>

            <t hangText="   link-address">A global or site-local address that will be used by
            the server to identify the link on which the client is located.</t>

            <t hangText="   peer-address">The address of the client or relay agent from which
            the message to be relayed was received.</t>

            <t hangText="   options">MUST include a "Relay Message option" (see <xref target='RFC3315-22.10'/>);
            MAY include other options added by the relay agent.</t>
         </list>
         </t>
      </section>

      <!-- ends: "7.1 from line 868-->

      <section title="Relay-reply Message">
        <!-- 7.2, line 892-->

        <t>The following table defines the use of message fields in a
        Relay-reply message.</t>

        <t>
          <list hangIndent="24" style="hanging">
            <t hangText="   msg-type">RELAY-REPL</t>

            <t hangText="   hop-count">Copied from the Relay-forward message</t>

            <t hangText="   link-address">Copied from the Relay-forward message</t>

            <t hangText="   peer-address">Copied from the Relay-forward message</t>

            <t hangText="   options">MUST include a "Relay Message option"; see <xref target='RFC3315-22.10'/>;
            MAY include other options</t>
          </list>
        </t>
      </section>

      <!-- ends: "7.2 from line 892-->
    </section>

    <!-- ends: "7 from line 825-->

    <section anchor='RFC3315-8' title="Representation and Use of Domain Names">
      <!-- 8, line 912-->

      <t>So that domain names may be encoded uniformly, a domain name or a
      list of domain names is encoded using the technique described in section
      3.1 of <xref target="RFC1035"/>. A domain name, or list of
      domain names, in DHCP MUST NOT be stored in compressed form, as
      described in section 4.1.4 of RFC 1035.</t>
    </section>

    <!-- ends: "8 from line 912-->

    <section anchor='RFC3315-9' title="DHCP Unique Identifier (DUID)">
      <!-- 9, line 921-->

      <t>Each DHCP client and server has a DUID. DHCP servers use DUIDs to
      identify clients for the selection of configuration parameters and in
      the association of IAs with clients. DHCP clients use DUIDs to identify
      a server in messages where a server needs to be identified. See
      <xref target='RFC3315-22.2'/> and <xref target='RFC3315-22.3'/> for
      the representation of a DUID in a DHCP message.</t>

      <t>Clients and servers MUST treat DUIDs as opaque values and MUST only
      compare DUIDs for equality. Clients and servers MUST NOT in any other
      way interpret DUIDs. Clients and servers MUST NOT restrict DUIDs to the
      types defined in this document, as additional DUID types may be defined
      in the future.</t>

      <t>The DUID is carried in an option because it may be variable length
      and because it is not required in all DHCP messages. The DUID is
      designed to be unique across all DHCP clients and servers, and stable
      for any specific client or server - that is, the DUID used by a client
      or server SHOULD NOT change over time if at all possible; for example, a
      device's DUID should not change as a result of a change in the device's
      network hardware.</t>

      <t>The motivation for having more than one type of DUID is that the DUID
      must be globally unique, and must also be easy to generate. The sort of
      globally-unique identifier that is easy to generate for any given device
      can differ quite widely. Also, some devices may not contain any
      persistent storage. Retaining a generated DUID in such a device is not
      possible, so the DUID scheme must accommodate such devices.</t>

      <section anchor='RFC3315-9.1' title="DUID Contents">
        <!-- 9.1, line 953-->

        <t>A DUID consists of a two-octet type code represented in network
        byte order, followed by a variable number of octets that make up the
        actual identifier. The length of the DUID (not including the type code)
        is at least 1 octet and at most 128 octets. The following types are
        currently defined:</t>

	<texttable>
	  <ttcol>Type</ttcol><ttcol>Description</ttcol>
          <c>1</c><c>Link-layer address plus time</c>
          <c>2</c><c>Vendor-assigned unique ID based on Enterprise Number</c>
          <c>3</c><c>Link-layer address</c>
          <c>4</c><c>Universally Unique IDentifier (UUID) - see <xref target="RFC6355"/></c>
	</texttable>

<!-- Alternative, but multiple spaces are ignored
        <t>
        1    Link-layer address plus time<vspace blankLines='0'/>
        2    Vendor-assigned unique ID based on Enterprise Number<vspace blankLines='0'/>
        3    Link-layer address
        </t>
-->

<!-- Altnerative, but results in blank lines between entries
        <t>
          <list hangIndent="12" style="hanging">
            <t hangText="1">Link-layer address plus time</t>
            <t hangText="2">Vendor-assigned unique ID based on Enterprise Number</t>
            <t hangText="3">Link-layer address</t>
          </list>
        </t>
-->

        <t>Formats for the variable field of the DUID for the first 3 of the
        above types are shown below. For the fourth type, refer to
        <xref target="RFC6355"/>.</t>
      </section>

      <!-- ends: "9.1 from line 953-->

      <section title="DUID Based on Link-layer Address Plus Time [DUID-LLT]">
        <!-- 9.2, line 972-->

        <t>This type of DUID consists of a two octet type field containing the
        value 1, a two octet hardware type code, four octets containing a time
        value, followed by link-layer address of any one network interface
        that is connected to the DHCP device at the time that the DUID is
        generated. The time value is the time that the DUID is generated
        represented in seconds since midnight (UTC), January 1, 2000, modulo
        2^32. The hardware type MUST be a valid hardware type assigned by the
        IANA as described in <xref target="RFC0826"/>. Both the time
        and the hardware type are stored in network byte order. The link-layer
        address is stored in canonical form, as described in <xref
        target="RFC2464"/>.</t>

        <t>The following diagram illustrates the format of a DUID-LLT:</t>

        <figure align="center" anchor="FigDUIDLLT"
              title="DUID-LLT format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               1               |    hardware type (16 bits)    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        time (32 bits)                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .             link-layer address (variable length)              .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>The choice of network interface can be completely arbitrary, as
        long as that interface provides a globally unique link-layer address
        for the link type, and the same DUID-LLT SHOULD be used in configuring
        all network interfaces connected to the device, regardless of which
        interface's link-layer address was used to generate the DUID-LLT.</t>

        <t>Clients and servers using this type of DUID MUST store the DUID-LLT
        in stable storage, and MUST continue to use this DUID-LLT even if the
        network interface used to generate the DUID-LLT is removed. Clients
        and servers that do not have any stable storage MUST NOT use this type
        of DUID.</t>

        <t>Clients and servers that use this DUID SHOULD attempt to configure
        the time prior to generating the DUID, if that is possible, and MUST
        use some sort of time source (for example, a real-time clock) in
        generating the DUID, even if that time source could not be configured
        prior to generating the DUID. The use of a time source makes it
        unlikely that two identical DUID-LLTs will be generated if the network
        interface is removed from the client and another client then uses the
        same network interface to generate a DUID-LLT. A collision between two
        DUID-LLTs is very unlikely even if the clocks have not been configured
        prior to generating the DUID.</t>

        <t>This method of DUID generation is recommended for all general
        purpose computing devices such as desktop computers and laptop
        computers, and also for devices such as printers, routers, and so on,
        that contain some form of writable non-volatile storage.</t>

        <t>Despite our best efforts, it is possible that this algorithm for
        generating a DUID could result in a client identifier collision. A
        DHCP client that generates a DUID-LLT using this mechanism MUST
        provide an administrative interface that replaces the existing DUID
        with a newly-generated DUID-LLT.</t>
      </section>

      <!-- ends: "9.2 from line 972-->

      <section title="DUID Assigned by Vendor Based on Enterprise Number [DUID-EN]">
        <!-- 9.3, line 1038-->

        <t>This form of DUID is assigned by the vendor to the device. It
        consists of the vendor's registered Private Enterprise Number as
        maintained by IANA <xref target="IANA-PEN"/> followed by a unique
        identifier assigned by the vendor. The following diagram summarizes
        the structure of a DUID-EN:</t>

        <figure align="center" anchor="FigDUIDEN"
              title="DUID-EN format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               2               |       enterprise-number       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   enterprise-number (contd)   |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                           identifier                          .
   .                       (variable length)                       .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>The source of the identifier is left up to the vendor defining it,
        but each identifier part of each DUID-EN MUST be unique to the device
        that is using it, and MUST be assigned to the device at the time it is
        manufactured and stored in some form of non-volatile storage. The
        generated DUID SHOULD be recorded in non-erasable storage. The
        enterprise-number is the vendor's registered Private Enterprise Number
        as maintained by IANA <xref target="IANA-PEN"/>. The enterprise-number
        is stored as an unsigned 32 bit number.</t>

        <t>An example DUID of this type might look like this:</t>

        <figure align="center" anchor="FigDUIDENExample"
              title="DUID-EN example">
          <preamble/>

          <artwork align="left">
          <![CDATA[
   +---+---+---+---+---+---+---+---+
   | 0 | 2 | 0 | 0 | 0 |  9| 12|192|
   +---+---+---+---+---+---+---+---+
   |132|211| 3 | 0 | 9 | 18|
   +---+---+---+---+---+---+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>This example includes the two-octet type of 2, the Enterprise
        Number (9), followed by eight octets of identifier data
        (0x0CC084D303000912).</t>
      </section>

      <!-- ends: "9.3 from line 1038-->

      <section title="DUID Based on Link-layer Address [DUID-LL]">
        <!-- 9.4, line 1084-->

        <t>This type of DUID consists of two octets containing the DUID type
        3, a two octet network hardware type code, followed by the link-layer
        address of any one network interface that is permanently connected to
        the client or server device. For example, a host that has a network
        interface implemented in a chip that is unlikely to be removed and
        used elsewhere could use a DUID-LL. The hardware type MUST be a valid
        hardware type assigned by the IANA, as described in <xref
        target="RFC0826"/>. The hardware type is stored in network byte order.
        The link-layer address is stored in canonical form, as described in
        <xref target="RFC2464"/>. The following diagram illustrates
        the format of a DUID-LL:</t>

        <figure align="center" anchor="FigDUIDLL"
              title="DUID-LL format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               3               |    hardware type (16 bits)    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .             link-layer address (variable length)              .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>The choice of network interface can be completely arbitrary, as
        long as that interface provides a unique link-layer address and is
        permanently attached to the device on which the DUID-LL is being
        generated. The same DUID-LL SHOULD be used in configuring all network
        interfaces connected to the device, regardless of which interface's
        link-layer address was used to generate the DUID.</t>

        <t>DUID-LL is recommended for devices that have a
        permanently-connected network interface with a link-layer address, and
        do not have nonvolatile, writable stable storage. DUID-LL MUST NOT be
        used by DHCP clients or servers that cannot tell whether or not a
        network interface is permanently attached to the device on which the
        DHCP client is running.</t>
      </section>

      <!-- ends: "9.4 from line 1084-->
    </section>

    <!-- ends: "9 from line 921-->

    <section anchor='RFC3315-10' title="Identity Association">
      <!-- 10, line 1125-->

      <t>An "identity-association" (IA) is a construct through which a server
      and a client can identify, group, and manage a set of related IPv6
      addresses. Each IA consists of an IAID and associated configuration
      information.</t>

      <t>A client must associate at least one distinct IA with each of its
      network interfaces for which it is to request the assignment of IPv6
      addresses from a DHCP server. The client uses the IAs assigned to an
      interface to obtain configuration information from a server for that
      interface. Each IA must be associated with exactly one interface.</t>

      <t>The IAID uniquely identifies the IA and must be chosen to be unique
      among the IAIDs on the client. The IAID is chosen by the client. For any
      given use of an IA by the client, the IAID for that IA MUST be
      consistent across restarts of the DHCP client. The client may maintain
      consistency either by storing the IAID in non-volatile storage or by
      using an algorithm that will consistently produce the same IAID as long
      as the configuration of the client has not changed. There may be no way
      for a client to maintain consistency of the IAIDs if it does not have
      non-volatile storage and the client's hardware configuration
      changes.</t>

      <t>The configuration information in an IA consists of one or more IPv6
      addresses along with the times T1 and T2 for the IA. See <xref target='RFC3315-22.4'/>
      for the representation of an IA in a DHCP message.</t>

      <t>Each address in an IA has a preferred lifetime and a valid lifetime,
      as defined in <xref target="RFC2462"/>. The lifetimes are
      transmitted from the DHCP server to the client in the IA option. The
      lifetimes apply to the use of IPv6 addresses, as described in section
      5.5.4 of RFC 2462.</t>
    </section>

    <!-- ends: "10 from line 1125-->

    <section anchor='RFC3315-11' title="Selecting Addresses for Assignment to an IA">
      <!-- 11, line 1159-->

      <t>A server selects addresses to be assigned to an IA according to the
      address assignment policies determined by the server administrator and
      the specific information the server determines about the client from
      some combination of the following sources:

      <list hangIndent="3" style="hanging">

      <t hangText="-"> The link to which the client is attached. The server determines the
      link as follows:

      <list hangIndent="3" style="hanging">

      <t hangText="*"> If the server receives the message directly from the client and the
      source address in the IP datagram in which the message was received is a
      link-local address, then the client is on the same link to which the
      interface over which the message was received is attached.</t>

      <t hangText="*"> If the server receives the message from a forwarding relay agent,
      then the client is on the same link as the one to which the interface,
      identified by the link-address field in the message from the relay
      agent, is attached.</t>

      <t hangText="*"> If the server receives the message directly from the client and the
      source address in the IP datagram in which the message was received is
      not a link-local address, then the client is on the link identified by
      the source address in the IP datagram (note that this situation can
      occur only if the server has enabled the use of unicast message delivery
      by the client and the client has sent a message for which unicast
      delivery is allowed).</t>

      </list></t>

      <t hangText="-"> The DUID supplied by the client.</t>

      <t hangText="-"> Other information in options supplied by the client.</t>

      <t hangText="-"> Other information in options supplied by the relay agent.</t>

      </list></t>

      <t>Any address assigned by a server that is based on an EUI-64
      identifier MUST include an interface identifier with the "u"
      (universal/local) and "g" (individual/group) bits of the interface
      identifier set appropriately, as indicated in section 2.5.1 of
      <xref target="RFC2373"/>.</t>

      <t>A server MUST NOT assign an address that is otherwise reserved for
      some other purpose. For example, a server MUST NOT assign reserved
      anycast addresses, as defined in RFC 2526, from any subnet.</t>
    </section>

    <!-- ends: "11 from line 1159-->

    <section title="Management of Temporary Addresses">
      <!-- 12, line 1217-->

      <t>A client may request the assignment of temporary addresses (see RFC
      3041 <xref target="RFC3041"/> for the definition of temporary
      addresses). DHCPv6 handling of address assignment is no different for
      temporary addresses. DHCPv6 says nothing about details of temporary
      addresses like lifetimes, how clients use temporary addresses, rules for
      generating successive temporary addresses, etc.</t>

      <t>Clients ask for temporary addresses and servers assign them.
      Temporary addresses are carried in the Identity Association for
      Temporary Addresses (IA_TA) option (see <xref target='RFC3315-22.5'/>). Each IA_TA option
      contains at most one temporary address for each of the prefixes on the
      link to which the client is attached.</t>

      <t>The IAID number space for the IA_TA option IAID number space is
      separate from the IA_NA option IAID number space.</t>

      <t>The server MAY update the DNS for a temporary address, as described
      in section 4 of RFC 3041.</t>
    </section>

    <!-- ends: "12 from line 1217-->

    <section title="Transmission of Messages by a Client">
      <!-- 13, line 1239-->

      <t>Unless otherwise specified in this document, or in a document that
      describes how IPv6 is carried over a specific type of link (for link
      types that do not support multicast), a client sends DHCP messages to
      the All_DHCP_Relay_Agents_and_Servers.</t>

      <t>A client uses multicast to reach all servers or an individual server.
      An individual server is indicated by specifying that server's DUID in a
      Server Identifier option (see <xref target='RFC3315-22.3'/>) in the client's message (all
      servers will receive this message but only the indicated server will
      respond). All servers are indicated by not supplying this option.</t>

      <t>A client may send some messages directly to a server using unicast,
      as described in <xref target='RFC3315-22.12'/>.</t>
    </section>

    <!-- ends: "13 from line 1239-->

    <section anchor='RFC3315-14' title="Reliability of Client Initiated Message Exchanges">
      <!-- 14, line 1258-->

      <t>DHCP clients are responsible for reliable delivery of messages in the
      client-initiated message exchanges described in
      <xref target='RFC3315-17'/> and <xref target='RFC3315-18'/>. If a
      DHCP client fails to receive an expected response from a server, the
      client must retransmit its message. This section describes the
      retransmission strategy to be used by clients in client-initiated
      message exchanges.</t>

      <t>Note that the procedure described in this section is slightly
      modified when used with the Solicit message. The modified procedure is
      described in <xref target='RFC3315-17.1.2'/>.</t>

      <t>The client begins the message exchange by transmitting a message to
      the server. The message exchange terminates when either the client
      successfully receives the appropriate response or responses from a
      server or servers, or when the message exchange is considered to have
      failed according to the retransmission mechanism described below.</t>

      <t>The client retransmission behavior is controlled and described by the
      following variables:

      <list hangIndent="11" style="hanging">

      <t hangText="   RT"> Retransmission timeout</t>

      <t hangText="   IRT"> Initial retransmission time</t>

      <t hangText="   MRC"> Maximum retransmission count</t>

      <t hangText="   MRT"> Maximum retransmission time</t>

      <t hangText="   MRD"> Maximum retransmission duration</t>

      <t hangText="   RAND"> Randomization factor</t>

      </list></t>

      <t>With each message transmission or retransmission, the client sets RT
      according to the rules given below. If RT expires before the message
      exchange terminates, the client recomputes RT and retransmits the
      message.</t>

      <t>Each of the computations of a new RT include a randomization factor
      (RAND), which is a random number chosen with a uniform distribution
      between -0.1 and +0.1. The randomization factor is included to minimize
      synchronization of messages transmitted by DHCP clients.</t>

      <t>The algorithm for choosing a random number does not need to be
      cryptographically sound. The algorithm SHOULD produce a different
      sequence of random numbers from each invocation of the DHCP client.</t>

      <t>RT for the first message transmission is based on IRT:</t>

      <figure>
      <artwork>
   RT = IRT + RAND*IRT
      </artwork>
      </figure>

      <t>RT for each subsequent message transmission is based on the previous
      value of RT:</t>

      <figure>
      <artwork>
   RT = 2*RTprev + RAND*RTprev
      </artwork>
      </figure>

      <t>MRT specifies an upper bound on the value of RT (disregarding the
      randomization added by the use of RAND). If MRT has a value of 0, there
      is no upper limit on the value of RT. Otherwise:</t>

      <figure>
      <artwork>
   if (RT &gt; MRT)
      RT = MRT + RAND*MRT
      </artwork>
      </figure>

      <t>MRC specifies an upper bound on the number of times a client may
      retransmit a message. Unless MRC is zero, the message exchange fails
      once the client has transmitted the message MRC times.</t>

      <t>MRD specifies an upper bound on the length of time a client may
      retransmit a message. Unless MRD is zero, the message exchange fails
      once MRD seconds have elapsed since the client first transmitted the
      message.</t>

      <t>If both MRC and MRD are non-zero, the message exchange fails whenever
      either of the conditions specified in the previous two paragraphs are
      met.</t>

      <t>If both MRC and MRD are zero, the client continues to transmit the
      message until it receives a response.</t>

      <!-- New text from section 6 of RFC7083 -->
      <t>A client is not expected to listen for a response during the entire
      period between transmission of Solicit or Information-request
      messages.</t>
    </section>

    <!-- ends: "14 from line 1258-->

    <section title="Message Validation">
      <!-- 15, line 1345-->

      <t>Clients and servers SHOULD discard any messages that contain options
      that are not allowed to appear in the received message. For example, an
      IA option is not allowed to appear in an Information-request message.
      Clients and servers MAY choose to extract information from such a
      message if the information is of use to the recipient.</t>

      <t>A server MUST discard any Solicit, Confirm, Rebind or
      Information-request messages it receives with a unicast destination
      address.</t>

      <t>Message validation based on DHCP authentication is discussed in
      <xref target='RFC3315-21.4.2'/>.</t>

      <t>If a server receives a message that contains options it should not
      contain (such as an Information-request message with an IA option), is
      missing options that it should contain, or is otherwise not valid, it
      MAY send a Reply (or Advertise as appropriate) with a Server Identifier
      option, a Client Identifier option if one was included in the message
      and a Status Code option with status UnSpecFail.</t>

      <section title="Use of Transaction IDs">
        <!-- 15.1, line 1370-->

        <t>The "transaction-id" field holds a value used by clients and
        servers to synchronize server responses to client messages. A client
        SHOULD generate a random number that cannot easily be guessed or
        predicted to use as the transaction ID for each new message it sends.
        Note that if a client generates easily predictable transaction
        identifiers, it may become more vulnerable to certain kinds of attacks
        from off-path intruders. A client MUST leave the transaction ID
        unchanged in retransmissions of a message.</t>
      </section>

      <!-- ends: "15.1 from line 1370-->

      <section title="Solicit Message">
        <!-- 15.2, line 1382-->

        <t>Clients MUST discard any received Solicit messages.</t>

        <t>Servers MUST discard any Solicit messages that do not include a
        Client Identifier option or that do include a Server Identifier
        option.</t>
      </section>

      <!-- ends: "15.2 from line 1382-->

      <section title="Advertise Message">
        <!-- 15.3, line 1391-->

        <t>Clients MUST discard any received Advertise messages that meet any
        of the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the message does not include a Client Identifier option.</t>

        <t hangText="-"> the contents of the Client Identifier option does not match the
        client's DUID.</t>

        <t hangText="-"> the "transaction-id" field value does not match the value the
        client used in its Solicit message.</t>

	</list></t>

        <t>Servers and relay agents MUST discard any received Advertise
        messages.</t>
      </section>

      <!-- ends: "15.3 from line 1391-->

      <section title="Request Message">
        <!-- 15.4, line 1416-->

        <t>Clients MUST discard any received Request messages.</t>

        <t>Servers MUST discard any received Request message that meet any of
        the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the contents of the Server Identifier option do not match the
        server's DUID.</t>

        <t hangText="-"> the message does not include a Client Identifier option.</t>

	</list></t>
      </section>

      <!-- ends: "15.4 from line 1416-->

      <section title="Confirm Message">
        <!-- 15.5, line 1436-->

        <t>Clients MUST discard any received Confirm messages.</t>

        <t>Servers MUST discard any received Confirm messages that do not
        include a Client Identifier option or that do include a Server
        Identifier option.</t>
      </section>

      <!-- ends: "15.5 from line 1436-->

      <section title="Renew Message">
        <!-- 15.6, line 1445-->

        <t>Clients MUST discard any received Renew messages.</t>

        <t>Servers MUST discard any received Renew message that meets any of
        the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the contents of the Server Identifier option does not match the
        server's identifier.</t>

        <t hangText="-"> the message does not include a Client Identifier option.</t>

	</list></t>
      </section>

      <!-- ends: "15.6 from line 1445-->

      <section title="Rebind Message">
        <!-- 15.7, line 1465-->

        <t>Clients MUST discard any received Rebind messages.</t>

        <t>Servers MUST discard any received Rebind messages that do not
        include a Client Identifier option or that do include a Server
        Identifier option.</t>
      </section>

      <!-- ends: "15.7 from line 1465-->

      <section title="Decline Messages">
        <!-- 15.8, line 1474-->

        <t>Clients MUST discard any received Decline messages.</t>

        <t>Servers MUST discard any received Decline message that meets any of
        the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the contents of the Server Identifier option does not match the
        server's identifier.</t>

        <t hangText="-"> the message does not include a Client Identifier option.</t>

	</list></t>
      </section>

      <!-- ends: "15.8 from line 1474-->

      <section title="Release Message">
        <!-- 15.9, line 1494-->

        <t>Clients MUST discard any received Release messages.</t>

        <t>Servers MUST discard any received Release message that meets any of
        the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the contents of the Server Identifier option does not match the
        server's identifier.</t>

        <t hangText="-"> the message does not include a Client Identifier option.</t>

	</list></t>
      </section>

      <!-- ends: "15.9 from line 1494-->

      <section title="Reply Message">
        <!-- 15.10, line 1514-->

        <t>Clients MUST discard any received Reply message that meets any of
        the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the "transaction-id" field in the message does not match the
        value used in the original message.</t>

	</list></t>

        <t>If the client included a Client Identifier option in the original
        message, the Reply message MUST include a Client Identifier option and
        the contents of the Client Identifier option MUST match the DUID of
        the client; OR, if the client did not include a Client Identifier
        option in the original message, the Reply message MUST NOT include a
        Client Identifier option.</t>

        <t>Servers and relay agents MUST discard any received Reply
        messages.</t>
      </section>

      <!-- ends: "15.10 from line 1514-->

      <section title="Reconfigure Message">
        <!-- 15.11, line 1538-->

        <t>Servers and relay agents MUST discard any received Reconfigure
        messages.</t>

        <t>Clients MUST discard any Reconfigure messages that meets any of the
        following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> the message was not unicast to the client.</t>

        <t hangText="-"> the message does not include a Server Identifier option.</t>

        <t hangText="-"> the message does not include a Client Identifier option that
        contains the client's DUID.</t>

        <t hangText="-"> the message does not contain a Reconfigure Message option and the
        msg-type must be a valid value.</t>

        <t hangText="-"> the message includes any IA options and the msg-type in the
        Reconfigure Message option is INFORMATION-REQUEST.</t>

        <t hangText="-"> the message does not include DHCP authentication:

          <list hangIndent="3" style="hanging">

          <t hangText="*"> the message does not contain an authentication option.</t>

          <t hangText="*"> the message does not pass the authentication validation performed
          by the client.</t>

	</list></t>
	</list></t>
      </section>

      <!-- ends: "15.11 from line 1538-->

      <section title="Information-request Message">
        <!-- 15.12, line 1578-->

        <t>Clients MUST discard any received Information-request messages.</t>

        <t>Servers MUST discard any received Information-request message that
        meets any of the following conditions:

        <list hangIndent="3" style="hanging">

        <t hangText="-"> The message includes a Server Identifier option and the DUID in
        the option does not match the server's DUID.</t>

        <t hangText="-"> The message includes an IA option.</t>

        </list></t>
      </section>

      <!-- ends: "15.12 from line 1578-->

      <section title="Relay-forward Message">
        <!-- 15.13, line 1595-->

        <t>Clients MUST discard any received Relay-forward messages.</t>
      </section>

      <!-- ends: "15.13 from line 1595-->

      <section title="Relay-reply Message">
        <!-- 15.14, line 1600-->

        <t>Clients and servers MUST discard any received Relay-reply
        messages.</t>
      </section>

      <!-- ends: "15.14 from line 1600-->
    </section>

    <!-- ends: "15 from line 1345-->

    <section title="Client Source Address and Interface Selection">
      <!-- 16, line 1605-->

      <t>When a client sends a DHCP message to the
      All_DHCP_Relay_Agents_and_Servers address, it SHOULD send the message
      through the interface for which configuration information is being
      requested. However, the client MAY send the message through another
      interface attached to the same link, if and only if the client is
      certain the two interfaces are attached to the same link. The client
      MUST use a link-local address assigned to the interface for which it is
      requesting configuration information as the source address in the header
      of the IP datagram.</t>

      <t>When a client sends a DHCP message directly to a server using unicast
      (after receiving the Server Unicast option from that server), the source
      address in the header of the IP datagram MUST be an address assigned to
      the interface for which the client is interested in obtaining
      configuration and which is suitable for use by the server in responding
      to the client.</t>
    </section>

    <!-- ends: "16 from line 1605-->

    <section anchor='RFC3315-17' title="DHCP Server Solicitation">
      <!-- 17, line 1625-->

      <t>This section describes how a client locates servers that will assign
      addresses to IAs belonging to the client.</t>

      <t>The client is responsible for creating IAs and requesting that a
      server assign IPv6 addresses to the IA. The client first creates an IA
      and assigns it an IAID. The client then transmits a Solicit message
      containing an IA option describing the IA. Servers that can assign
      addresses to the IA respond to the client with an Advertise message. The
      client then initiates a configuration exchange as described in
      <xref target='RFC3315-18'/>.</t>

      <t>If the client will accept a Reply message with committed address
      assignments and other resources in response to the Solicit message, the
      client includes a Rapid Commit option (see <xref target='RFC3315-22.14'/>) in the Solicit
      message.</t>

      <section title="Client Behavior">
        <!-- 17.1, line 1644-->

        <t>A client uses the Solicit message to discover DHCP servers
        configured to assign addresses or return other configuration
        parameters on the link to which the client is attached.</t>

        <section anchor='RFC3315-17.1.1' title="Creation of Solicit Messages">
          <!-- 17.1.1, line 1651-->

          <t>The client sets the "msg-type" field to SOLICIT. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client includes IA options for any IAs to
          which it wants the server to assign addresses. The client MAY
          include addresses in the IAs as a hint to the server about addresses
          for which the client has a preference. The client MUST NOT include
          any other options in the Solicit message, except as specifically
          allowed in the definition of individual options.</t>

          <t>The client uses IA_NA options to request the assignment of
          non-temporary addresses and uses IA_TA options to request the
          assignment of temporary addresses. Either IA_NA or IA_TA options, or
          a combination of both, can be included in DHCP messages.</t>

          <t>The client SHOULD include an Option Request option (see
          <xref target='RFC3315-22.7'/>) to indicate the options the
          client is interested in receiving.
          The client MAY additionally include instances of those options that
          are identified in the Option Request option, with data values as
          hints to the server about parameter values the client would like to
          have returned.</t>

          <t>The client includes a Reconfigure Accept option (see
          <xref target='RFC3315-22.20'/>) if the client is willing to accept
          Reconfigure messages from the server.</t>
        </section>

        <!-- ends: "17.1.1 from line 1651-->

        <section anchor='RFC3315-17.1.2' title="Transmission of Solicit Messages">
          <!-- 17.1.2, line 1682-->

          <t>The first Solicit message from the client on the interface MUST
          be delayed by a random amount of time between 0 and SOL_MAX_DELAY.
          In the case of a Solicit message transmitted when DHCP is initiated
          by IPv6 Neighbor Discovery, the delay gives the amount of time to
          wait after IPv6 Neighbor Discovery causes the client to invoke the
          stateful address autoconfiguration protocol (see section 5.5.3 of
          RFC 2462). This random delay desynchronizes clients which start at
          the same time (for example, after a power outage).</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> SOL_TIMEOUT</t>

          <t hangText="   MRT"> SOL_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> 0</t>

          </list></t>

          <t>If the client has included a Rapid Commit option in its Solicit
          message, the client terminates the waiting process as soon as a
          Reply message with a Rapid Commit option is received.</t>

          <t>If the client is waiting for an Advertise message, the mechanism
          in <xref target='RFC3315-14'/> is modified as follows for use in the transmission of
          Solicit messages. The message exchange is not terminated by the
          receipt of an Advertise before the first RT has elapsed. Rather, the
          client collects Advertise messages until the first RT has elapsed.
          Also, the first RT MUST be selected to be strictly greater than IRT
          by choosing RAND to be strictly greater than 0.</t>

          <t>A client MUST collect Advertise messages for the first RT
          seconds, unless it receives an Advertise message with a preference
          value of 255. The preference value is carried in the Preference
          option (<xref target='RFC3315-22.8'/>). Any Advertise that does not include a
          Preference option is considered to have a preference value of 0. If
          the client receives an Advertise message that includes a Preference
          option with a preference value of 255, the client immediately begins
          a client-initiated message exchange (as described in <xref target='RFC3315-18'/>) by
          sending a Request message to the server from which the Advertise
          message was received. If the client receives an Advertise message
          that does not include a Preference option with a preference value of
          255, the client continues to wait until the first RT elapses. If the
          first RT elapses and the client has received an Advertise message,
          the client SHOULD continue with a client-initiated message exchange
          by sending a Request message.</t>

          <t>If the client does not receive any Advertise messages before the
          first RT has elapsed, it begins the retransmission mechanism
          described in <xref target='RFC3315-14'/>. The client terminates the retransmission
          process as soon as it receives any Advertise message, and the client
          acts on the received Advertise message without waiting for any
          additional Advertise messages.</t>

          <t>A DHCP client SHOULD choose MRC and MRD to be 0. If the DHCP
          client is configured with either MRC or MRD set to a value other
          than 0, it MUST stop trying to configure the interface if the
          message exchange fails. After the DHCP client stops trying to
          configure the interface, it SHOULD restart the reconfiguration
          process after some external event, such as user input, system
          restart, or when the client is attached to a new link.</t>
        </section>

        <!-- ends: "17.1.2 from line 1682-->

        <section  anchor='RFC3315-17.1.3' title="Receipt of Advertise Messages">
          <!-- 17.1.3, line 1750-->

          <!-- The new paragraph to introduce the requirement stated in first
               paragraph of section 6. of RFC7083. -->
          <t>The client MUST process SOL_MAX_RT and INF_MAX_RT options in an
          Advertise message, even if the message contains a Status Code
          option indicating a failure, and the Advertise message will be
          discarded by the client.</t>

          <!-- todo: Update this paragraph with NoPrefixAvail status code when
               RFC3633 is merged -->
          <t>The client MUST ignore any IAs in an Advertise message that include
          a Status Code option containing the value NoAddrsAvail, with the
          exception that the client MAY display the associated status message to the
          user.</t>

          <t>Upon receipt of one or more valid Advertise messages, the client
          selects one or more Advertise messages based upon the following
          criteria.

          <list hangIndent="3" style="hanging">

          <t hangText="-"> Those Advertise messages with the highest server preference
          value are preferred over all other Advertise messages.</t>

          <t hangText="-"> Within a group of Advertise messages with the same server
          preference value, a client MAY select those servers whose Advertise
          messages advertise information of interest to the client. For
          example, the client may choose a server that returned an
          advertisement with configuration options of interest to the
          client.</t>

          <t hangText="-"> The client MAY choose a less-preferred server if that server
          has a better set of advertised parameters, such as the available
          addresses advertised in IAs.</t>

          </list></t>

          <t>Once a client has selected Advertise message(s), the client will
          typically store information about each server, such as server
          preference value, addresses advertised, when the advertisement was
          received, and so on.</t>

          <t>In practice, this means that the client will maintain
          independent per-IA state machines per each selected server.</t>

          <t>If the client needs to select an alternate server in the case
          that a chosen server does not respond, the client chooses the next
          server according to the criteria given above.</t>
        </section>

        <!-- ends: "17.1.3 from line 1750-->

        <section title="Receipt of Reply Message">
          <!-- 17.1.4, line 1790-->

          <t>If the client includes a Rapid Commit option in the Solicit
          message, it will expect a Reply message that includes a Rapid Commit
          option in response. The client discards any Reply messages it
          receives that do not include a Rapid Commit option. If the client
          receives a valid Reply message that includes a Rapid Commit option,
          it processes the message as described in <xref target='RFC3315-18.1.8'/>. If it does
          not receive such a Reply message and does receive a valid Advertise
          message, the client processes the Advertise message as described in
          <xref target='RFC3315-17.1.3'/>.</t>

          <t>If the client subsequently receives a valid Reply
          message that includes a Rapid Commit option, it either:</t>

          <t><list style="empty">
            <t>processes the Reply message as described in <xref target='RFC3315-18.1.8'/>, and
            discards any Reply messages received in response to the Request
            message, or</t>

            <t>processes any Reply messages received in response to the Request
            message and discards the Reply message that includes the Rapid
            Commit option.</t>
          </list></t>

        </section>

        <!-- ends: "17.1.4 from line 1790-->
      </section>

      <!-- ends: "17.1 from line 1644-->

      <section title="Server Behavior">
        <!-- 17.2, line 1816-->

        <t>A server sends an Advertise message in response to valid Solicit
        messages it receives to announce the availability of the server to the
        client.</t>

        <section title="Receipt of Solicit Messages">
          <!-- 17.2.1, line 1823-->

          <t>The server determines the information about the client and its
          location as described in <xref target='RFC3315-11'/> and checks its administrative
          policy about responding to the client. If the server is not
          permitted to respond to the client, the server discards the Solicit
          message. For example, if the administrative policy for the server is
          that it may only respond to a client that is willing to accept a
          Reconfigure message, if the client does not include a Reconfigure
          Accept option (see section <xref target='RFC3315-22.20'/>) in the
          Solicit message, the servers discard the Solicit message.</t>

          <t>If the client has included a Rapid Commit option in the Solicit
          message and the server has been configured to respond with committed
          address assignments and other resources, the server responds to the
          Solicit with a Reply message as described in <xref target='RFC3315-17.2.3'/>.
          Otherwise, the server ignores the Rapid Commit option and
          processes the remainder of the message as if no Rapid Commit
          option were present.</t>

        </section>

        <!-- ends: "17.2.1 from line 1823-->

        <section title="Creation and Transmission of Advertise Messages">
          <!-- 17.2.2, line 1844-->

          <t>The server sets the "msg-type" field to ADVERTISE and copies the
          contents of the transaction-id field from the Solicit message
          received from the client to the Advertise message. The server
          includes its server identifier in a Server Identifier option and
          copies the Client Identifier from the Solicit message into the
          Advertise message.</t>

          <t>The server MAY add a Preference option to carry
          the preference value for the Advertise message. The server
          implementation SHOULD allow the setting of a server preference value
          by the administrator. The server preference value MUST default to
          zero unless otherwise configured by the server administrator.</t>

          <t>The server includes a Reconfigure Accept option if the server
          wants to require that the client accept Reconfigure messages.</t>

          <t>The server includes options the server will return to the client
          in a subsequent Reply message. The information in these options may
          be used by the client in the selection of a server if the client
          receives more than one Advertise message. If the client has included
          an Option Request option in the Solicit message, the server includes
          options in the Advertise message containing configuration parameters
          for all of the options identified in the Option Request option that
          the server has been configured to return to the client. The server
          MAY return additional options to the client if it has been
          configured to do so. The server must be aware of the recommendations
          on packet sizes and the use of fragmentation in section 5 of RFC
          2460.</t>

          <t>If the Solicit message from the client included one or more IA
          options, the server MUST include IA options in the Advertise message
          containing any addresses that would be assigned to IAs contained in
          the Solicit message from the client. If the client has included
          addresses in the IAs in the Solicit message, the server uses those
          addresses as hints about the addresses the client would like to
          receive.</t>

          <!-- This paragraph has been updated with the changes from section
               6 of RFC7083 -->
          <!-- Also, partially applied RFC3315 errata 2472, to include other IA
               options if NoAddrsAvail status code is sent. Do not apply the part
               of errata that mandates sending NoAddrsAvail encapsulated in IA -->
          <t>If the server will not assign any addresses to any IAs in a
          subsequent Request from the client, the server MUST send an
          Advertise message to the client that includes only a Status Code option
          with code NoAddrsAvail and a status message for the user, a Server
          Identifier option with the server's DUID, a Client Identifier option
          with the client's DUID, and (optionally) SOL_MAX_RT and/or INF_MAX_RT
          options. The server SHOULD include other stateful IA options
          (like IA_PD) and other configuration options in the Advertise
          message.</t>

          <t>If the Solicit message was received directly by the server, the
          server unicasts the Advertise message directly to the client using
          the address in the source address field from the IP datagram in
          which the Solicit message was received. The Advertise message MUST
          be unicast on the link from which the Solicit message was
          received.</t>

          <t>If the Solicit message was received in a Relay-forward message,
          the server constructs a Relay-reply message with the Advertise
          message in the payload of a "relay-message" option. If the
          Relay-forward messages included an Interface-id option, the server
          copies that option to the Relay-reply message. The server unicasts
          the Relay-reply message directly to the relay agent using the
          address in the source address field from the IP datagram in which
          the Relay-forward message was received.</t>
        </section>

        <!-- ends: "17.2.2 from line 1844-->

        <section anchor='RFC3315-17.2.3' title="Creation and Transmission of Reply Messages">
          <!-- 17.2.3, line 1906-->

          <t>The server MUST commit the assignment of any addresses or other
          configuration information message before sending a Reply message to
          a client in response to a Solicit message.</t>

          <t>DISCUSSION:</t>

          <t><list style="empty">
            <t>When using the Solicit-Reply message exchange, the server commits
            the assignment of any addresses before sending the Reply message.
            The client can assume it has been assigned the addresses in the
            Reply message and does not need to send a Request message for those
            addresses.</t>

            <t>Typically, servers that are configured to use the Solicit-Reply
            message exchange will be deployed so that only one server will
            respond to a Solicit message. If more than one server responds, the
            client will only use the addresses from one of the servers, while
            the addresses from the other servers will be committed to the client
            but not used by the client.</t>
          </list></t>

          <t>The server includes a Rapid Commit option in the Reply message to
          indicate that the Reply is in response to a Solicit message.</t>

          <t>The server includes a Reconfigure Accept option if the server
          wants to require that the client accept Reconfigure messages.</t>

          <t>The server produces the Reply message as though it had received a
          Request message, as described in <xref target='RFC3315-18.2.1'/>. The server
          transmits the Reply message as described in <xref target='RFC3315-18.2.8'/>.</t>
        </section>

        <!-- ends: "17.2.3 from line 1906-->
      </section>

      <!-- ends: "17.2 from line 1816-->
    </section>

    <!-- ends: "17 from line 1625-->

    <section anchor='RFC3315-18' title="DHCP Client-Initiated Configuration Exchange">
      <!-- 18, line 1942-->

      <t>A client initiates a message exchange with a server or servers to
      acquire or update configuration information of interest. The client may
      initiate the configuration exchange as part of the operating system
      configuration process, when requested to do so by the application layer,
      when required by Stateless Address Autoconfiguration or as required to
      extend the lifetime of an address (Renew and Rebind messages).</t>

      <section title="Client Behavior">
        <!-- 18.1, line 1953-->

        <t>A client uses Request, Renew, Rebind, Release and Decline messages
        during the normal life cycle of addresses. It uses Confirm to validate
        addresses when it may have moved to a new link. It uses
        Information-Request messages when it needs configuration information
        but no addresses.</t>

        <t>If the client has a source address of sufficient scope that can be
        used by the server as a return address, and the client has received a
        Server Unicast option (<xref target='RFC3315-22.12'/>) from the server, the client
        SHOULD unicast any Request, Renew, Release and Decline messages to the
        server.</t>

        <t>DISCUSSION:</t>

        <t><list style="empty">
          <t>Use of unicast may avoid delays due to the relaying of messages by
          relay agents, as well as avoid overhead and duplicate responses by
          servers due to the delivery of client messages to multiple servers.
          Requiring the client to relay all DHCP messages through a relay agent
          enables the inclusion of relay agent options in all messages sent by
          the client. The server should enable the use of unicast only when
          relay agent options will not be used.</t>
        </list></t>

        <section title="Creation and Transmission of Request Messages">
          <!-- 18.1.1, line 1981-->

          <t>The client uses a Request message to populate IAs with addresses
          and obtain other configuration information. The client includes one
          or more IA options in the Request message. The server then returns
          addresses and other information about the IAs to the client in IA
          options in a Reply message.</t>

          <t>The client generates a transaction ID and inserts this value in
          the "transaction-id" field.</t>

          <t>The client places the identifier of the destination server in a
          Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client adds any other appropriate options,
          including one or more IA options (if the client is requesting that
          the server assign it some network addresses).</t>

          <t>The client MUST include an Option Request option (see
          <xref target='RFC3315-22.7'/>) to indicate the options the client is interested in receiving.
          The client MAY include options with data values as hints to the
          server about parameter values the client would like to have
          returned.</t>

          <t>The client includes a Reconfigure Accept option (see
          <xref target='RFC3315-22.20'/>) indicating whether or not the client is willing to accept
          Reconfigure messages from the server.</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REQ_TIMEOUT</t>

          <t hangText="   MRT"> REQ_MAX_RT</t>

          <t hangText="   MRC"> REQ_MAX_RC</t>

          <t hangText="   MRD"> 0</t>

          </list></t>

          <t>If the message exchange fails, the client takes an action based
          on the client's local policy. Examples of actions the client might
          take include:

          <list hangIndent="3" style="hanging">
          <t hangText="-"> Select another server from a list of servers known to the
          client; for example, servers that responded with an Advertise
          message.</t>

          <t hangText="-"> Initiate the server discovery process described in
          <xref target='RFC3315-17'/>.</t>

          <t hangText="-"> Terminate the configuration process and report failure.</t>
          </list></t>
        </section>

        <!-- ends: "18.1.1 from line 1981-->

        <section title="Creation and Transmission of Confirm Messages">
          <!-- 18.1.2, line 2037-->

          <t>Whenever a client may have moved to a new link, the prefixes from
          the addresses assigned to the interfaces on that link may no longer
          be appropriate for the link to which the client is attached.
          Examples of times when a client may have moved to a new link
          include:

          <list hangIndent="3" style="hanging">
          <t hangText="o"> The client reboots.</t>

          <t hangText="o"> The client is physically connected to a wired connection.</t>

          <t hangText="o"> The client returns from sleep mode.</t>

          <t hangText="o"> The client using a wireless technology changes access
          points.</t>

          </list></t>

          <t>In any situation when a client may have moved to a new link, the
          client MUST initiate a Confirm/Reply message exchange. The client
          includes any IAs assigned to the interface that may have moved to a
          new link, along with the addresses associated with those IAs, in its
          Confirm message. Any responding servers will indicate whether those
          addresses are appropriate for the link to which the client is
          attached with the status in the Reply message it returns to the
          client.</t>

          <t>The client sets the "msg-type" field to CONFIRM. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client includes IA options for all of the
          IAs assigned to the interface for which the Confirm message is being
          sent. The IA options include all of the addresses the client
          currently has associated with those IAs. The client SHOULD set the
          T1 and T2 fields in any IA_NA options, and the preferred-lifetime
          and valid-lifetime fields in the IA Address options to 0, as the
          server will ignore these fields.</t>

          <t>The first Confirm message from the client on the interface MUST
          be delayed by a random amount of time between 0 and CNF_MAX_DELAY.
          The client transmits the message according to <xref target='RFC3315-14'/>, using the
          following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> CNF_TIMEOUT</t>

          <t hangText="   MRT"> CNF_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> CNF_MAX_RD</t>

          </list></t>

          <t>If the client receives no responses before the message
          transmission process terminates, as described in <xref target='RFC3315-14'/>, the
          client SHOULD continue to use any IP addresses, using the last known
          lifetimes for those addresses, and SHOULD continue to use any other
          previously obtained configuration parameters.</t>
        </section>

        <!-- ends: "18.1.2 from line 2037-->

        <section anchor='RFC3315-18.1.3' title="Creation and Transmission of Renew Messages">
          <!-- 18.1.3, line 2100-->

          <t>To extend the valid and preferred lifetimes for the addresses
          associated with an IA, the client sends a Renew message to the
          server from which the client obtained the addresses in the IA
          containing an IA option for the IA. The client includes IA Address
          options in the IA option for the addresses associated with the IA.
          The server determines new lifetimes for the addresses in the IA
          according to the administrative configuration of the server. The
          server may also add new addresses to the IA. The server may remove
          addresses from the IA by setting the preferred and valid lifetimes
          of those addresses to zero.</t>

          <t>The server controls the time at which the client contacts the
          server to extend the lifetimes on assigned addresses through the T1
          and T2 parameters assigned to an IA.</t>

          <t>At time T1 for an IA, the client initiates a Renew/Reply message
          exchange to extend the lifetimes on any addresses in the IA. The
          client includes an IA option with all addresses currently assigned
          to the IA in its Renew message.</t>

          <t>If T1 or T2 is set to 0 by the server (for an IA_NA) or there are
          no T1 or T2 times (for an IA_TA), the client may send a Renew or
          Rebind message, respectively, at the client's discretion.</t>

          <t>The client sets the "msg-type" field to RENEW. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client places the identifier of the destination server in a
          Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client adds any appropriate options,
          including one or more IA options. The client MUST include the list
          of addresses the client currently has associated with the IAs in the
          Renew message.</t>

          <t>The client MUST include an Option Request option (see
          <xref target='RFC3315-22.7'/>) to indicate the options the client is interested in receiving.
          The client MAY include options with data values as hints to the
          server about parameter values the client would like to have
          returned.</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REN_TIMEOUT</t>

          <t hangText="   MRT"> REN_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until T2</t>

          </list></t>

          <t>The message exchange is terminated
          when time T2 is reached (see <xref target='RFC3315-18.1.4'/>), at which time the
          client begins a Rebind message exchange.</t>
        </section>

        <!-- ends: "18.1.3 from line 2100-->

        <section anchor='RFC3315-18.1.4' title="Creation and Transmission of Rebind Messages">
          <!-- 18.1.4, line 2160-->

          <t>At time T2 for an IA (which will only be reached if the server to
          which the Renew message was sent at time T1 has not responded), the
          client initiates a Rebind/Reply message exchange with any available
          server. The client includes an IA option with all addresses
          currently assigned to the IA in its Rebind message.</t>

          <t>The client sets the "msg-type" field to REBIND. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client adds any appropriate options,
          including one or more IA options. The client MUST include the list
          of addresses the client currently has associated with the IAs in the
          Rebind message.</t>

          <t>The client MUST include an Option Request option (see
          <xref target='RFC3315-22.7'/>) to indicate the options the client is interested in receiving.
          The client MAY include options with data values as hints to the
          server about parameter values the client would like to have
          returned.</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REB_TIMEOUT</t>

          <t hangText="   MRT"> REB_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> Remaining time until valid lifetimes of all addresses have
          expired</t>

          </list></t>

          <t>The message exchange is terminated when the valid lifetimes of
          all the addresses assigned to the IA expire (see <xref target='RFC3315-10'/>), at
          which time the client has several alternative actions to choose
          from; for example:

          <list hangIndent="3" style="hanging">

          <t hangText="-"> The client may choose to use a Solicit message to locate a new
          DHCP server and send a Request for the expired IA to the new
          server.</t>

          <t hangText="-"> The client may have other addresses in other IAs, so the client
          may choose to discard the expired IA and use the addresses in the
          other IAs.</t>
          </list></t>
        </section>

        <!-- ends: "18.1.4 from line 2160-->

        <section anchor='RFC3315-18.1.5' title="Creation and Transmission of Information-request Messages">
          <!-- 18.1.5, line 2215-->

          <t>The client uses an Information-request message to obtain
          configuration information without having addresses assigned to
          it.</t>

          <t>The client sets the "msg-type" field to INFORMATION-REQUEST. The
          client generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client SHOULD include a Client Identifier option to identify
          itself to the server. If the client does not include a Client
          Identifier option, the server will not be able to return any
          client-specific options to the client, or the server may choose not
          to respond to the message at all. The client MUST include a Client
          Identifier option if the Information-Request message will be
          authenticated.</t>

          <t>The client MUST include an Option Request option (see
          <xref target='RFC3315-22.7'/>) to indicate the options the client is interested in receiving.
          The client MAY include options with data values as hints to the
          server about parameter values the client would like to have
          returned.</t>

          <t>The first Information-request message from the client on the
          interface MUST be delayed by a random amount of time between 0 and
          INF_MAX_DELAY. The client transmits the message according to
          <xref target='RFC3315-14'/>, using the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> INF_TIMEOUT</t>

          <t hangText="   MRT"> INF_MAX_RT</t>

          <t hangText="   MRC"> 0</t>

          <t hangText="   MRD"> 0</t>

          </list></t>
        </section>

        <!-- ends: "18.1.5 from line 2215-->

        <section title="Creation and Transmission of Release Messages">
          <!-- 18.1.6, line 2251-->

          <t>To release one or more addresses, a client sends a Release
          message to the server.</t>

          <t>The client sets the "msg-type" field to RELEASE. The client
          generates a transaction ID and places this value in the
          "transaction-id" field.</t>

          <t>The client places the identifier of the server that allocated the
          address(es) in a Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client includes options containing the IAs
          for the addresses it is releasing in the "options" field. The
          addresses to be released MUST be included in the IAs. Any addresses
          for the IAs the client wishes to continue to use MUST NOT be added
          to the IAs.</t>

          <t>The client MUST NOT use any of the addresses it is releasing as
          the source address in the Release message or in any subsequently
          transmitted message.</t>

          <t>Because Release messages may be lost, the client should
          retransmit the Release if no Reply is received. However, there are
          scenarios where the client may not wish to wait for the normal
          retransmission timeout before giving up (e.g., on power down).
          Implementations SHOULD retransmit one or more times, but MAY choose
          to terminate the retransmission procedure early.</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> REL_TIMEOUT</t>

          <t hangText="   MRT"> 0</t>

          <t hangText="   MRC"> REL_MAX_RC - 1</t>

          <t hangText="   MRD"> 0</t>

          </list></t>

          <t>The client MUST stop using all of the addresses being released as
          soon as the client begins the Release message exchange process. If
          addresses are released but the Reply from a DHCP server is lost, the
          client will retransmit the Release message, and the server may
          respond with a Reply indicating a status of NoBinding. Therefore,
          the client does not treat a Reply message with a status of NoBinding
          in a Release message exchange as if it indicates an error.</t>

          <t>Note that if the client fails to release the addresses, each
          address assigned to the IA will be reclaimed by the server when the
          valid lifetime of that address expires.</t>
        </section>

        <!-- ends: "18.1.6 from line 2251-->

        <section anchor='RFC3315-18.1.7' title="Creation and Transmission of Decline Messages">
          <!-- 18.1.7, line 2304-->

          <t>If a client detects that one or more addresses assigned to it by
          a server are already in use by another node, the client sends a
          Decline message to the server to inform it that the address is
          suspect.</t>

          <t>The client sets the "msg-type" field to DECLINE. The client
          generates a transaction ID and places this value in the
          "transaction-id" field.</t>

          <t>The client places the identifier of the server that allocated the
          address(es) in a Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client includes options containing the IAs
          for the addresses it is declining in the "options" field. The
          addresses to be declined MUST be included in the IAs. Any addresses
          for the IAs the client wishes to continue to use should not be in
          added to the IAs.</t>

          <t>The client MUST NOT use any of the addresses it is declining as
          the source address in the Decline message or in any subsequently
          transmitted message.</t>

          <t>The client transmits the message according to <xref target='RFC3315-14'/>, using
          the following parameters:

          <list hangIndent="11" style="hanging">

          <t hangText="   IRT"> DEC_TIMEOUT</t>

          <t hangText="   MRT"> 0</t>

          <t hangText="   MRC"> DEC_MAX_RC - 1</t>

          <t hangText="   MRD"> 0</t>

          </list></t>

          <t>If addresses are declined but the Reply from a DHCP server is
          lost, the client will retransmit the Decline message, and the server
          may respond with a Reply indicating a status of NoBinding.
          Therefore, the client does not treat a Reply message with a status
          of NoBinding in a Decline message exchange as if it indicates an
          error.</t>
        </section>

        <!-- ends: "18.1.7 from line 2304-->

        <section anchor='RFC3315-18.1.8' title="Receipt of Reply Messages">
          <!-- 18.1.8, line 2345-->

          <t>Upon the receipt of a valid Reply message in response to a
          Solicit (with a Rapid Commit option), Request, Confirm, Renew,
          Rebind or Information-request message, the client extracts the
          configuration information contained in the Reply. The client MAY
          choose to report any status code or message from the status code
          option in the Reply message.</t>

          <t>The client SHOULD perform duplicate address detection <xref
          target="RFC2462"/> on each of the addresses in any IAs it receives
          in the Reply message before using that address for traffic. If any
          of the addresses are found to be in use on the link, the client
          sends a Decline message to the server as described in
          <xref target='RFC3315-18.1.7'/>.</t>

          <t>If the Reply was received in response to a Solicit (with a Rapid
          Commit option), Request, Renew or Rebind message, the client updates
          the information it has recorded about IAs from the IA options
          contained in the Reply message:

          <list hangIndent="3" style="hanging">

          <t hangText="-"> Record T1 and T2 times.</t>

          <t hangText="-"> Add any new addresses in the IA option to the IA as recorded by
          the client.</t>

          <t hangText="-"> Update lifetimes for any addresses in the IA option that the
          client already has recorded in the IA.</t>

          <t hangText="-"> Discard any addresses from the IA, as recorded by the client,
          that have a valid lifetime of 0 in the IA Address option.</t>

          <t hangText="-"> Leave unchanged any information about addresses the client has
          recorded in the IA but that were not included in the IA from the
          server.</t>

          </list></t>

          <t>Management of the specific configuration information is detailed
          in the definition of each option in <xref target='RFC3315-22'/>.</t>

          <t>If the client receives a Reply message with a Status Code
          containing UnspecFail, the server is indicating that it was unable
          to process the message due to an unspecified failure condition. If
          the client retransmits the original message to the same server to
          retry the desired operation, the client MUST limit the rate at which
          it retransmits the message and limit the duration of the time during
          which it retransmits the message.</t>

          <t>When the client receives a Reply message with a Status Code
          option with the value UseMulticast, the client records the receipt
          of the message and sends subsequent messages to the server through
          the interface on which the message was received using multicast. The
          client resends the original message using multicast.</t>

          <t>When the client
          receives a NotOnLink status from the server in response to a Confirm
          message, the client performs DHCP server solicitation, as described
          in <xref target='RFC3315-17'/>, and client-initiated configuration as described in
          <xref target='RFC3315-18'/>. If the client receives any Reply messages that do not
          indicate a NotOnLink status, the client can use the addresses in the
          IA and ignore any messages that indicate a NotOnLink status.</t>

          <t>When the client receives a NotOnLink status from the server in
          response to a Request, the client can either re-issue the Request
          without specifying any addresses or restart the DHCP server
          discovery process (see <xref target='RFC3315-17'/>).</t>

          <t>The client examines the status code in each IA individually. If
          the status code is NoAddrsAvail, the client has received no usable
          addresses in the IA and may choose to try obtaining addresses for
          the IA from another server. The client uses addresses and other
          information from any IAs that do not contain a Status Code option
          with the NoAddrsAvail code. If the client receives no addresses in
          any of the IAs, it may either try another server (perhaps restarting
          the DHCP server discovery process) or use the Information-request
          message to obtain other configuration information only.</t>

          <t>When the client receives a Reply message in response to a Renew
          or Rebind message, the client examines each IA independently. For
          each IA in the original Renew or Rebind message, the client:

          <list hangIndent="3" style="hanging">

          <t hangText="-"> sends a Request message if the IA contained a Status Code
          option with the NoBinding status (and does not send any additional
          Renew/Rebind messages)</t>

          <t hangText="-"> sends a Renew/Rebind if the IA is not in the Reply message</t>

          <t hangText="-"> otherwise accepts the information in the IA</t>

          </list></t>

          <t>When the client receives a valid Reply message in response to a
          Release message, the client considers the Release event completed,
          regardless of the Status Code option(s) returned by the server.</t>

          <t>When the client receives a valid Reply message in response to a
          Decline message, the client considers the Decline event completed,
          regardless of the Status Code option(s) returned by the server.</t>
        </section>

        <!-- ends: "18.1.8 from line 2345-->
      </section>

      <!-- ends: "18.1 from line 1953-->

      <section anchor='RFC3315-18.2' title="Server Behavior">
        <!-- 18.2, line 2455-->

        <t>For this discussion, the Server is assumed to have been configured
        in an implementation specific manner with configuration of interest to
        clients.</t>

        <t>In most instances, the server will send a Reply in response to a
        client message. This Reply message MUST always contain the Server
        Identifier option containing the server's DUID and the Client
        Identifier option from the client message if one was present.</t>

        <t>In most Reply messages, the server includes options containing
        configuration information for the client. The server must be aware of
        the recommendations on packet sizes and the use of fragmentation in
        section 5 of RFC 2460. If the client included an Option Request option
        in its message, the server includes options in the Reply message
        containing configuration parameters for all of the options identified
        in the Option Request option that the server has been configured to
        return to the client. The server MAY return additional options to the
        client if it has been configured to do so.</t>

        <section anchor='RFC3315-18.2.1' title="Receipt of Request Messages">
          <!-- 18.2.1, line 2477-->

          <t>When the server receives a Request message via unicast from a
          client to which the server has not sent a unicast option, the server
          discards the Request message and responds with a Reply message
          containing a Status Code option with the value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>When the server receives a valid Request message, the server
          creates the bindings for that client according to the server's
          policy and configuration information and records the IAs and other
          information requested by the client.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Request
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Request
          message in the Reply message.</t>

          <t>If the server finds that the prefix on one or more IP addresses
          in any IA in the message from the client is not appropriate for the
          link to which the client is connected, the server MUST return the IA
          to the client with a Status Code option with the value
          NotOnLink.</t>

          <t>If the server cannot assign any addresses to an IA in the message
          from the client, the server MUST include the IA in the Reply message
          with no addresses in the IA and a Status Code option in the IA
          containing status code NoAddrsAvail.</t>

          <t>For any IAs to which the server
          can assign addresses, the server includes the IA with addresses and
          other configuration parameters, and records the IA as a new client
          binding.</t>

          <t>The server includes a Reconfigure Accept option if the server
          wants to require that the client accept Reconfigure messages.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in
          <xref target='RFC3315-18.2'/>.</t>

          <t>If the server finds that the client has included an IA in the
          Request message for which the server already has a binding that
          associates the IA with the client, the client has resent a Request
          message for which it did not receive a Reply message. The server
          either resends a previously cached Reply message or sends a new
          Reply message.</t>
        </section>

        <!-- ends: "18.2.1 from line 2477-->

        <section title="Receipt of Confirm Messages">
          <!-- 18.2.2, line 2527-->

          <t>When the server receives a Confirm message, the server determines
          whether the addresses in the Confirm message are appropriate for the
          link to which the client is attached. If all of the addresses in the
          Confirm message pass this test, the server returns a status of
          Success. If any of the addresses do not pass this test, the server
          returns a status of NotOnLink. If the server is unable to perform
          this test (for example, the server does not have information about
          prefixes on the link to which the client is connected), or there
          were no addresses in any of the IAs sent by the client, the server
          MUST NOT send a reply to the client.</t>

          <t>The server ignores the T1 and T2 fields in the IA options and the
          preferred-lifetime and valid-lifetime fields in the IA Address
          options.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Confirm
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Confirm
          message in the Reply message. The server includes a Status Code
          option indicating the status of the Confirm message.</t>
        </section>

        <!-- ends: "18.2.2 from line 2527-->

        <section anchor='RFC3315-18.2.3' title="Receipt of Renew Messages">
          <!-- 18.2.3, line 2554-->

          <t>When the server receives a Renew message via unicast from a
          client to which the server has not sent a unicast option, the server
          discards the Renew message and responds with a Reply message
          containing a Status Code option with the value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>When the server receives a Renew message that contains an IA
          option from a client, it locates the client's binding and verifies
          that the information in the IA from the client matches the
          information stored for that client.</t>

          <t>If the server cannot find a client entry for the IA the server
          returns the IA containing no addresses with a Status Code option set
          to NoBinding in the Reply message.</t>

          <t>If the server finds that any of the addresses are not appropriate
          for the link to which the client is attached, the server returns the
          address to the client with lifetimes of 0.</t>

          <t>If the server finds the addresses in the IA for the client then
          the server sends back the IA to the client with new lifetimes and
          T1/T2 times. The server may choose to change the list of addresses
          and the lifetimes of addresses in IAs that are returned to the
          client.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Renew
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Renew
          message in the Reply message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in
          <xref target='RFC3315-18.2'/>.</t>
        </section>

        <!-- ends: "18.2.3 from line 2554-->

        <section anchor='RFC3315-18.2.4' title="Receipt of Rebind Messages">
          <!-- 18.2.4, line 2594-->

          <t>When the server receives a Rebind message that contains an IA
          option from a client, it locates the client's binding and verifies
          that the information in the IA from the client matches the
          information stored for that client.</t>

          <t>If the server cannot find a client entry for the IA and the
          server determines that the addresses in the IA are not appropriate
          for the link to which the client's interface is attached according
          to the server's explicit configuration information, the server MAY
          send a Reply message to the client containing the client's IA, with
          the lifetimes for the addresses in the IA set to zero. This Reply
          constitutes an explicit notification to the client that the
          addresses in the IA are no longer valid. In this situation, if the
          server does not send a Reply message it discards the Rebind
          message.</t>

          <t>If the server finds that any of the addresses are no longer
          appropriate for the link to which the client is attached, the server
          returns the address to the client with lifetimes of 0.</t>

          <t>If the server finds the addresses in the IA for the client then
          the server SHOULD send back the IA to the client with new lifetimes
          and T1/T2 times.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Rebind
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Rebind
          message in the Reply message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in
          <xref target='RFC3315-18.2'/>.</t>
        </section>

        <!-- ends: "18.2.4 from line 2594-->

        <section anchor='RFC3315-18.2.5' title="Receipt of Information-request Messages">
          <!-- 18.2.5, line 2634-->

          <t>When the server receives an Information-request message, the
          client is requesting configuration information that does not include
          the assignment of any addresses. The server determines all
          configuration parameters appropriate to the client, based on the
          server configuration policies known to the server.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the
          Information-request message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID in the Reply message. If the client included a Client
          Identification option in the Information-request message, the server
          copies that option to the Reply message.</t>

          <t>The server includes options
          containing configuration information to be returned to the client as
          described in <xref target='RFC3315-18.2'/>.</t>

          <t>If the Information-request message received from the client did
          not include a Client Identifier option, the server SHOULD respond
          with a Reply message containing any configuration parameters that
          are not determined by the client's identity. If the server chooses
          not to respond, the client may continue to retransmit the
          Information-request message indefinitely.</t>
        </section>

        <!-- ends: "18.2.5 from line 2634-->

        <section title="Receipt of Release Messages">
          <!-- 18.2.6, line 2663-->

          <t>When the server receives a Release message via unicast from a
          client to which the server has not sent a unicast option, the server
          discards the Release message and responds with a Reply message
          containing a Status Code option with value UseMulticast, a Server
          Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>Upon the receipt of a valid Release message, the server examines
          the IAs and the addresses in the IAs for validity. If the IAs in the
          message are in a binding for the client, and the addresses in the
          IAs have been assigned by the server to those IAs, the server
          deletes the addresses from the IAs and makes the addresses available
          for assignment to other clients. The server ignores addresses not
          assigned to the IA, although it may choose to log an error.</t>

          <t>After all the addresses have been processed, the server generates
          a Reply message and includes a Status Code option with value
          Success, a Server Identifier option with the server's DUID, and a
          Client Identifier option with the client's DUID. For each IA in the
          Release message for which the server has no binding information, the
          server adds an IA option using the IAID from the Release message,
          and includes a Status Code option with the value NoBinding in the IA
          option. No other options are included in the IA option.</t>

          <t>A server may choose to retain a record of assigned addresses and
          IAs after the lifetimes on the addresses have expired to allow the
          server to reassign the previously assigned addresses to a
          client.</t>
        </section>

        <!-- ends: "18.2.6 from line 2663-->

        <section title="Receipt of Decline Messages">
          <!-- 18.2.7, line 2694-->

          <t>When the server receives a Decline message via unicast from a
          client to which the server has not sent a unicast option, the server
          discards the Decline message and responds with a Reply message
          containing a Status Code option with the value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>Upon the receipt of a valid Decline message, the server examines the
          IAs and the addresses in the IAs for validity. If the IAs in the
          message are in a binding for the client, and the addresses in the
          IAs have been assigned by the server to those IAs, the server
          deletes the addresses from the IAs. The server ignores addresses not
          assigned to the IA (though it may choose to log an error if it finds
          such an address).</t>

          <t>The client has found any addresses in the Decline messages to be
          already in use on its link. Therefore, the server SHOULD mark the
          addresses declined by the client so that those addresses are not
          assigned to other clients, and MAY choose to make a notification
          that addresses were declined. Local policy on the server determines
          when the addresses identified in a Decline message may be made
          available for assignment.</t>

          <t>After all the addresses have been processed, the server generates
          a Reply message and includes a Status Code option with the value
          Success, a Server Identifier option with the server's DUID, and a
          Client Identifier option with the client's DUID. For each IA in the
          Decline message for which the server has no binding information, the
          server adds an IA option using the IAID from the Decline message and
          includes a Status Code option with the value NoBinding in the IA
          option. No other options are included in the IA option.</t>
        </section>

        <!-- ends: "18.2.7 from line 2694-->

        <section anchor='RFC3315-18.2.8' title="Transmission of Reply Messages">
          <!-- 18.2.8, line 2729-->

          <t>If the original message was received directly by the server, the
          server unicasts the Reply message directly to the client using the
          address in the source address field from the IP datagram in which
          the original message was received. The Reply message MUST be unicast
          through the interface on which the original message was
          received.</t>

          <t>If the original message was received in a Relay-forward message,
          the server constructs a Relay-reply message with the Reply message
          in the payload of a Relay Message option (see <xref target='RFC3315-22.10'/>). If the
          Relay-forward messages included an Interface-id option, the server
          copies that option to the Relay-reply message. The server unicasts
          the Relay-reply message directly to the relay agent using the
          address in the source address field from the IP datagram in which
          the Relay-forward message was received.</t>
        </section>

        <!-- ends: "18.2.8 from line 2729-->
      </section>

      <!-- ends: "18.2 from line 2455-->
    </section>

    <!-- ends: "18 from line 1942-->

    <section anchor='RFC3315-19' title="DHCP Server-Initiated Configuration Exchange">
      <!-- 19, line 2751-->

      <t>A server initiates a configuration exchange to cause DHCP clients to
      obtain new addresses and other configuration information. For example,
      an administrator may use a server-initiated configuration exchange when
      links in the DHCP domain are to be renumbered. Other examples include
      changes in the location of directory servers, addition of new services
      such as printing, and availability of new software.</t>

      <section title="Server Behavior">
        <!-- 19.1, line 2762-->

        <t>A server sends a Reconfigure message to cause a client to initiate
        immediately a Renew/Reply or Information-request/Reply message
        exchange with the server.</t>

        <section title="Creation and Transmission of Reconfigure Messages">
          <!-- 19.1.1, line 2769-->

          <t>The server sets the "msg-type" field to RECONFIGURE. The server
          sets the transaction-id field to 0. The server includes a Server
          Identifier option containing its DUID and a Client Identifier option
          containing the client's DUID in the Reconfigure message.</t>

          <t>The server MAY include an Option Request option to inform the
          client of what information has been changed or new information that
          has been added. In particular, the server specifies the IA option in
          the Option Request option if the server wants the client to obtain
          new address information. If the server identifies the IA option in
          the Option Request option, the server MUST include an IA option
          to identify each IA that is to be reconfigured on the client.
          The IA options included by the server MUST not contain any
          options.</t>

          <t>Because of the risk of denial of service attacks against DHCP
          clients, the use of a security mechanism is mandated in Reconfigure
          messages. The server MUST use DHCP authentication in the Reconfigure
          message.</t>

          <t>The server MUST include a Reconfigure Message option (defined in
          <xref target='RFC3315-22.19'/>) to select whether the client responds with a Renew
          message, a Rebind message, or an Information-Request message.</t>

          <t>The server MUST NOT include any other options in the Reconfigure
          except as specifically allowed in the definition of individual
          options.</t>

          <t>A server sends each Reconfigure message to a single DHCP client,
          using an IPv6 unicast address of sufficient scope belonging to the
          DHCP client. If the server does not have an address to which it can
          send the Reconfigure message directly to the client, the server uses
          a Relay-reply message (as described in <xref target='RFC3315-20.3'/>) to send the
          Reconfigure message to a relay agent that will relay the message to
          the client. The server may obtain the address of the client (and the
          appropriate relay agent, if required) through the information the
          server has about clients that have been in contact with the server,
          or through some external agent.</t>

          <t>To reconfigure more than one client, the server unicasts a
          separate message to each client. The server may initiate the
          reconfiguration of multiple clients concurrently; for example, a
          server may send a Reconfigure message to additional clients while
          previous reconfiguration message exchanges are still in
          progress.</t>

          <t>The Reconfigure message causes the client to initiate a
          Renew/Reply, a Rebind/Reply, or Information-request/Reply message exchange with the
          server. The server interprets the receipt of a Renew, a Rebind, or
          Information-request message (whichever was specified in the original
          Reconfigure message) from the client as satisfying the Reconfigure
          message request.</t>
        </section>

        <!-- ends: "19.1.1 from line 2769-->

        <section title="Time Out and Retransmission of Reconfigure Messages">
          <!-- 19.1.2, line 2824-->

          <t>If the server does not receive a Renew, Rebind, or Information-request
          message from the client in REC_TIMEOUT milliseconds, the server
          retransmits the Reconfigure message, doubles the REC_TIMEOUT value
          and waits again. The server continues this process until REC_MAX_RC
          unsuccessful attempts have been made, at which point the server
          SHOULD abort the reconfigure process for that client.</t>

          <t>Default and initial values for REC_TIMEOUT and REC_MAX_RC are
          documented in <xref target='RFC3315-5.5'/>.</t>
        </section>

        <!-- ends: "19.1.2 from line 2824-->
      </section>

      <!-- ends: "19.1 from line 2762-->

      <section title="Receipt of Renew or Rebind Messages">
        <!-- 19.2, line 2837-->

        <t>In response to a Renew message, the server generates
        and sends a Reply message to the client as
        described in <xref target='RFC3315-18.2.3'/> and
        <xref target='RFC3315-18.2.8'/>, including options for
        configuration parameters.</t>

        <t>In response to a Rebind message, the server generates and sends a
   	Reply message to the client as described in <xref target='RFC3315-18.2.4'/>
   	and <xref target='RFC3315-18.2.8'/>, including options
   	for configuration parameters.</t>

        <t>The server MAY include options containing the IAs and new values
        for other configuration parameters in the Reply message, even if those
        IAs and parameters were not requested in the Renew or Rebind message from the
        client.</t>
      </section>

      <!-- ends: "19.2 from line 2837-->

      <section title="Receipt of Information-request Messages">
        <!-- 19.3, line 2849-->

        <t>The server generates and sends a Reply message to the client as
        described in <xref target='RFC3315-18.2.5'/> and
        <xref target='RFC3315-18.2.8'/>, including options for
        configuration parameters.</t>

        <t>The server MAY include options containing
        new values for other configuration parameters in the Reply message,
        even if those parameters were not requested in the Information-request
        message from the client.</t>
      </section>

      <!-- ends: "19.3 from line 2849-->

      <section title="Client Behavior">
        <!-- 19.4, line 2861-->

        <t>A client receives Reconfigure messages sent to the UDP port 546 on
        interfaces for which it has acquired configuration information through
        DHCP. These messages may be sent at any time. Since the results of a
        reconfiguration event may affect application layer programs, the
        client SHOULD log these events, and MAY notify these programs of the
        change through an implementation-specific interface.</t>

        <section title="Receipt of Reconfigure Messages">
          <!-- 19.4.1, line 2871-->

          <t>Upon receipt of a valid Reconfigure message, the client responds
          with either a Renew message, a Rebind message, or an Information-request message as
          indicated by the Reconfigure Message option (as defined in
          <xref target='RFC3315-22.19'/>). The client ignores the transaction-id field in the received
          Reconfigure message. While the transaction is in progress, the
          client discards any Reconfigure messages it receives.</t>

          <t>DISCUSSION:</t>

          <t><list style="empty">
            <t>The Reconfigure message acts as a trigger that signals the client
            to complete a successful message exchange. Once the client has
            received a Reconfigure, the client proceeds with the message
            exchange (retransmitting the Renew or Information-request message if
            necessary); the client ignores any additional Reconfigure messages
            until the exchange is complete. Subsequent Reconfigure messages
            cause the client to initiate a new exchange.</t>

            <t>How does this mechanism work in the face of duplicated or
            retransmitted Reconfigure messages? Duplicate messages will be
            ignored because the client will begin the exchange after the receipt
            of the first Reconfigure. Retransmitted messages will either trigger
            the exchange (if the first Reconfigure was not received by the
            client) or will be ignored. The server can discontinue
            retransmission of Reconfigure messages to the client once the server
            receives the Renew or Information-request message from the
            client.</t>

            <t>It might be possible for a duplicate or retransmitted Reconfigure
            to be sufficiently delayed (and delivered out of order) to arrive at
            the client after the exchange (initiated by the original
            Reconfigure) has been completed. In this case, the client would
            initiate a redundant exchange. The likelihood of delayed and out of
            order delivery is small enough to be ignored. The consequence of the
            redundant exchange is inefficiency rather than incorrect
            operation.</t>
          </list></t>
        </section>

        <!-- ends: "19.4.1 from line 2871-->

        <section title="Creation and Transmission of Renew Messages">
          <!-- 19.4.2, line 2913-->

          <t>When responding to a Reconfigure, the client creates and sends
          the Renew message in exactly the same manner as outlined in
          <xref target='RFC3315-18.1.3'/>, with the exception that the client copies the Option Request
          option and any IA options from the Reconfigure message into the
          Renew message. The client MUST include a Server Identifier
          option in the Renew message, identifying the server with which
          the client most recently communicated.</t>

          <t>When responding to a Reconfigure, the client creates and sends the
   	  Rebind message in exactly the same manner as outlined in
   	  <xref target='RFC3315-18.1.4'/>, with the exception that the client copies the
   	  Option Request option and any IA options from the Reconfigure message
   	  into the Rebind message.</t>

   	  <t>If a client is currently sending Rebind messages, as described in
   	  <xref target='RFC3315-18.1.3'/>, the client ignores any received
   	  Reconfigure messages.</t>
        </section>

        <!-- ends: "19.4.2 from line 2913-->

        <section anchor='RFC3315-19.4.3' title="Creation and Transmission of Information-request Messages">
          <!-- 19.4.3, line 2922-->

          <t>When responding to a Reconfigure, the client creates and sends
          the Information-request message in exactly the same manner as
          outlined in <xref target='RFC3315-18.1.5'/>, with the exception that the client
          includes a Server Identifier option with the identifier from the
          Reconfigure message to which the client is responding.</t>
        </section>

        <!-- ends: "19.4.3 from line 2922-->

        <section title="Time Out and Retransmission of Renew or Information-request">
          <!-- 19.4.4, line 2931-->

          <t>Messages</t>

          <t>The client uses the same variables and retransmission algorithm
          as it does with Renew, Rebind, or Information-request messages generated as
          part of a client-initiated configuration exchange. See
          <xref target='RFC3315-18.1.3'/>, <xref target='RFC3315-18.1.4'/>, and <xref target='RFC3315-18.1.5'/>
          for details. If the client does not receive a
          response from the server by the end of the retransmission process,
          the client ignores and discards the Reconfigure message.</t>
        </section>

        <!-- ends: "19.4.4 from line 2931-->

        <section title="Receipt of Reply Messages">
          <!-- 19.4.5, line 2942-->

          <t>Upon the receipt of a valid Reply message, the client processes
          the options and sets (or resets) configuration parameters
          appropriately. The client records and updates the lifetimes for any
          addresses specified in IAs in the Reply message.</t>
        </section>

        <!-- ends: "19.4.5 from line 2942-->
      </section>

      <!-- ends: "19.4 from line 2861-->
    </section>

    <!-- ends: "19 from line 2751-->

    <section title="Relay Agent Behavior">
      <!-- 20, line 2950-->

      <t>The relay agent MAY be configured to use a list of destination
      addresses, which MAY include unicast addresses, the All_DHCP_Servers
      multicast address, or other addresses selected by the network
      administrator. If the relay agent has not been explicitly configured, it
      MUST use the All_DHCP_Servers multicast address as the default.</t>

      <t>If the
      relay agent relays messages to the All_DHCP_Servers multicast address or
      other multicast addresses, it sets the Hop Limit field to 32.</t>

      <section title="Relaying a Client Message or a Relay-forward Message">
        <!-- 20.1, line 2964-->

        <t>A relay agent relays both messages from clients and Relay-forward
        messages from other relay agents. When a relay agent receives a valid
        message to be relayed, it constructs a new Relay-forward message. The
        relay agent copies the source address from the header of the IP
        datagram in which the message was received to the peer-address field
        of the Relay-forward message. The relay agent copies the received DHCP
        message (excluding any IP or UDP headers) into a Relay Message option
        in the new message. The relay agent adds to the Relay-forward message
        any other options it is configured to include.</t>

        <section title="Relaying a Message from a Client">
          <!-- 20.1.1, line 2979-->

          <t>If the relay agent received the message to be relayed from a
          client, the relay agent places a global or site-scoped address with
          a prefix assigned to the link on which the client should be assigned
          an address in the link-address field. This address will be used by
          the server to determine the link from which the client should be
          assigned an address and other configuration information. The
          hop-count in the Relay-forward message is set to 0.</t>

          <t>If the relay agent cannot use the address in the link-address
          field to identify the interface through which the response to the
          client will be relayed, the relay agent MUST include an Interface-id
          option (see <xref target='RFC3315-22.18'/>) in the Relay-forward message. The server
          will include the Interface-id option in its Relay-reply message. The
          relay agent fills in the link-address field as described in the
          previous paragraph regardless of whether the relay agent includes an
          Interface-id option in the Relay-forward message.</t>
        </section>

        <!-- ends: "20.1.1 from line 2979-->

        <section title="Relaying a Message from a Relay Agent">
          <!-- 20.1.2, line 2999-->

          <t>If the message received by the relay agent is a Relay-forward
          message and the hop-count in the message is greater than or equal to
          HOP_COUNT_LIMIT, the relay agent discards the received message.</t>

          <t>The relay agent copies the source address from the IP datagram in
          which the message was received from the relay agent into the peer-address
          field in the Relay-forward message and sets the hop-count field to
          the value of the hop-count field in the received message incremented
          by 1.</t>

          <t>If the source address from the IP datagram header of the received
          message is a global or site-local address (and the device on which
          the relay agent is running belongs to only one site), the relay
          agent sets the link-address field to 0; otherwise the relay agent
          sets the link-address field to a global or site-local address
          assigned to the interface on which the message was received, or
          includes an Interface-ID option to identify the interface on which
          the message was received.</t>
        </section>

        <!-- ends: "20.1.2 from line 2999-->
      </section>

      <!-- ends: "20.1 from line 2964-->

      <section title="Relaying a Relay-reply Message">
        <!-- 20.2, line 3021-->

        <t>The relay agent processes any options included in the Relay-reply
        message in addition to the Relay Message option, and then discards
        those options.</t>

        <t>The relay agent extracts the message from the Relay Message option
        and relays it to the address contained in the peer-address field of
        the Relay-reply message. Relay agents MUST NOT modify the message.</t>

        <t>If the Relay-reply message includes an Interface-id option, the
        relay agent relays the message from the server to the client on the
        link identified by the Interface-id option. Otherwise, if the
        link-address field is not set to zero, the relay agent relays the
        message on the link identified by the link-address field.</t>
      </section>

      <!-- ends: "20.2 from line 3021-->

      <section anchor='RFC3315-20.3' title="Construction of Relay-reply Messages">
        <!-- 20.3, line 3040-->

        <t>A server uses a Relay-reply message to return a response to a
        client if the original message from the client was relayed to the
        server in a Relay-forward message or to send a Reconfigure message to
        a client if the server does not have an address it can use to send the
        message directly to the client.</t>

        <t>A response to the client MUST be relayed through the same relay
        agents as the original client message. The server causes this to
        happen by creating a Relay-reply message that includes a Relay Message
        option containing the message for the next relay agent in the return
        path to the client. The contained Relay-reply message contains another
        Relay Message option to be sent to the next relay agent, and so on.
        The server must record the contents of the peer-address fields in the
        received message so it can construct the appropriate Relay-reply
        message carrying the response from the server.</t>

        <t>For example, if client C sent a message that was relayed by relay
        agent A to relay agent B and then to the server, the server would send
        the following Relay-Reply message to relay agent B:</t>

        <figure align="center" anchor="FigRelayExample"
                title="Relay-reply Example">
          <preamble/>

          <artwork align="left">
          <![CDATA[
   msg-type:       RELAY-REPLY
   hop-count:      1
   link-address:   0
   peer-address:   A
   Relay Message option, containing:
     msg-type:     RELAY-REPLY
     hop-count:    0
     link-address: address from link to which C is attached
     peer-address: C
     Relay Message option: <response from server>
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>When sending a Reconfigure message to a client through a relay
        agent, the server creates a Relay-reply message that includes a Relay
        Message option containing the Reconfigure message for the next relay
        agent in the return path to the client. The server sets the
        peer-address field in the Relay-reply message header to the address of
        the client, and sets the link-address field as required by the relay
        agent to relay the Reconfigure message to the client. The server
        obtains the addresses of the client and the relay agent through prior
        interaction with the client or through some external mechanism.</t>
      </section>

      <!-- ends: "20.3 from line 3040-->
    </section>

    <!-- ends: "20 from line 2950-->

    <section anchor='RFC3315-21' title="Authentication of DHCP Messages">
      <!-- 21, line 3092-->

      <t>Some network administrators may wish to provide authentication of the
      source and contents of DHCP messages. For example, clients may be
      subject to denial of service attacks through the use of bogus DHCP
      servers, or may simply be misconfigured due to unintentionally
      instantiated DHCP servers. Network administrators may wish to constrain
      the allocation of addresses to authorized hosts to avoid denial of
      service attacks in "hostile" environments where the network medium is
      not physically secured, such as wireless networks or college residence
      halls.</t>

      <t>The DHCP authentication mechanism is based on the design of
      authentication for DHCPv4 <xref target="RFC3118"/>.</t>

      <section anchor='RFC3315-21.1' title="Security of Messages Sent Between Servers and Relay Agents">
        <!-- 21.1, line 3108-->

        <t>Relay agents and servers that exchange messages securely use the
        IPsec mechanisms for IPv6 <xref target="RFC2401"/>. If a client
        message is relayed through multiple relay agents, each of the relay
        agents must have established independent, pairwise trust
        relationships. That is, if messages from client C will be relayed by
        relay agent A to relay agent B and then to the server, relay agents A
        and B must be configured to use IPsec for the messages they exchange,
        and relay agent B and the server must be configured to use IPsec for
        the messages they exchange.</t>

        <t>Relay agents and servers that support secure relay agent to server
        or relay agent to relay agent communication use IPsec under the
        following conditions:

        <list hangIndent="24" style="hanging">

        <t hangText="   Selectors"> Relay agents are manually configured with the addresses
        of the relay agent or server to which DHCP messages are to be
        forwarded. Each relay agent and server that will be using IPsec for
        securing DHCP messages must also be configured with a list of the
        relay agents to which messages will be returned. The selectors for the
        relay agents and servers will be the pairs of addresses defining relay
        agents and servers that exchange DHCP messages on DHCPv6 UDP port 547.</t>

        <t hangText="   Mode"> Relay agents and servers use transport mode and ESP. The
        information in DHCP messages is not generally considered confidential,
        so encryption need not be used (i.e., NULL encryption can be
        used).</t>

        <t hangText="   Key management"> Because the relay agents and servers are used within
        an organization, public key schemes are not necessary. Because the
        relay agents and servers must be manually configured, manually
        configured key management may suffice, but does not provide defense
        against replayed messages. Accordingly, IKE with preshared secrets
        SHOULD be supported. IKE with public keys MAY be supported.</t>

        <t hangText="   Security policy"> DHCP messages between relay agents and servers
        should only be accepted from DHCP peers as identified in the local
        configuration.</t>

        <t hangText="   Authentication"> Shared keys, indexed to the source IP address of the
        received DHCP message, are adequate in this application.</t>

        <t hangText="   Availability"> Appropriate IPsec implementations are likely to be
        available for servers and for relay agents in more featureful devices
        used in enterprise and core ISP networks. IPsec is less likely to be
        available for relay agents in low end devices primarily used in the
        home or small office markets.</t>

        </list></t>
      </section>

      <!-- ends: "21.1 from line 3108-->

      <section title="Summary of DHCP Authentication">
        <!-- 21.2, line 3172-->

        <t>Authentication of DHCP messages is accomplished through the use of
        the Authentication option (see <xref target='RFC3315-22.11'/>). The authentication
        information carried in the Authentication option can be used to
        reliably identify the source of a DHCP message and to confirm that the
        contents of the DHCP message have not been tampered with.</t>

        <t>The Authentication option provides a framework for multiple
        authentication protocols. Two such protocols are defined here. Other
        protocols defined in the future will be specified in separate
        documents.</t>

        <t>Any DHCP message MUST NOT include more than one Authentication
        option.</t>

        <t>The protocol field in the Authentication option identifies the
        specific protocol used to generate the authentication information
        carried in the option. The algorithm field identifies a specific
        algorithm within the authentication protocol; for example, the
        algorithm field specifies the hash algorithm used to generate the
        message authentication code (MAC) in the authentication option. The
        replay detection method (RDM) field specifies the type of replay
        detection used in the replay detection field.</t>
      </section>

      <!-- ends: "21.2 from line 3172-->

      <section title="Replay Detection">
        <!-- 21.3, line 3198-->

        <t>The Replay Detection Method (RDM) field determines the type of
        replay detection used in the Replay Detection field.</t>

        <t>If the RDM field contains 0x00, the replay detection field MUST be
        set to the value of a strictly monotonically increasing counter. Using a
        counter value, such as the current time of day (for example, an
        NTP-format timestamp <xref target="RFC1305"/>), can reduce the danger
        of replay attacks. This method MUST be supported by all protocols.</t>
      </section>

      <!-- ends: "21.3 from line 3198-->

      <section anchor='RFC3315-21.4' title="Delayed Authentication Protocol">
        <!-- 21.4, line 3210-->

        <t>If the protocol field is 2, the message is using the "delayed
        authentication" mechanism. In delayed authentication, the client
        requests authentication in its Solicit message, and the server replies
        with an Advertise message that includes authentication
        information. This authentication information contains a nonce value
        generated by the source as a message authentication code (MAC) to
        provide message authentication and entity authentication.</t>

        <t>The use of a particular technique based on the HMAC protocol <xref
        target="RFC2104"/> using the MD5 hash <xref target="RFC1321"/> is
        defined here.</t>

        <section title="Use of the Authentication Option in the Delayed Authentication Protocol">
          <!-- 21.4.1, line 3226-->

          <t>In a Solicit message, the client fills in the protocol, algorithm
          and RDM fields in the Authentication option with the client's
          preferences. The client sets the replay detection field to zero and
          omits the authentication information field. The client sets the
          option-len field to 11.</t>

          <t>In all other messages, the protocol and algorithm fields identify
          the method used to construct the contents of the authentication
          information field. The RDM field identifies the method used to
          construct the contents of the replay detection field.</t>

          <t>The format of the Authentication information is:</t>

          <figure align="center" anchor="FigAuthInfo"
                  title="Authentication information format">
            <preamble/>

            <artwork align="left">
            <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          DHCP realm                           |
   |                      (variable length)                        |
   .                                                               .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      key ID (4 octets)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                           HMAC-MD5                            |
   |                          (128 bits)                           |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              ]]>
            </artwork>

            <postamble/>
          </figure>

          <t><list hangIndent="24" style="hanging">

          <t hangText="   DHCP realm"> The DHCP realm that identifies the key used to
          generate the HMAC-MD5 value. This is a domain name encoded as described in
          <xref target='RFC3315-8'/>.</t>

          <t hangText="   key ID"> The key identifier that identified the key used to
          generate the HMAC-MD5 value.</t>

          <t hangText="   HMAC-MD5"> The message authentication code generated by applying
          MD5 to the DHCP message using the key identified by the DHCP realm,
          client DUID, and key ID.</t>

          </list></t>

          <t>The sender computes the MAC using the HMAC generation algorithm
          <xref target="RFC2104"/> and the MD5 hash function <xref
          target="RFC1321"/>. The entire DHCP message (setting the MAC field
          of the authentication option to zero), including the DHCP message
          header and the options field, is used as input to the HMAC-MD5
          computation function.</t>

          <t>DISCUSSION:</t>

          <t><list style="empty">
            <t>Algorithm 1 specifies the use of HMAC-MD5. Use of a different
            technique, such as HMAC-SHA, will be specified as a separate
            protocol.</t>

            <t>The DHCP realm used to identify authentication keys is chosen to
            be unique among administrative domains. Use of the DHCP realm allows
            DHCP administrators to avoid conflict in the use of key identifiers,
            and allows a host using DHCP to use authenticated DHCP while roaming
            among DHCP administrative domains.</t>
          </list></t>
        </section>

        <!-- ends: "21.4.1 from line 3226-->

        <section anchor='RFC3315-21.4.2' title="Message Validation">
          <!-- 21.4.2, line 3294-->

          <t>Any DHCP message that includes more than one authentication
          option MUST be discarded.</t>

          <t>To validate an incoming message, the receiver first checks that
          the value in the replay detection field is acceptable according to
          the replay detection method specified by the RDM field. If no replay
          is detected, then the receiver computes the MAC as described in
          <xref target="RFC2104"/>.
          The entire DHCP message (setting the MAC field of the authentication
          option to 0) is used as input to the HMAC-MD5 computation function.
          If the MAC computed by the receiver does not match the MAC contained
          in the authentication option, the receiver MUST discard the DHCP
          message.</t>
        </section>

        <!-- ends: "21.4.2 from line 3294-->

        <section title="Key Utilization">
          <!-- 21.4.3, line 3309-->

          <t>Each DHCP client has a set of keys. Each key is identified by
          &lt;DHCP realm, client DUID, key id&gt;. Each key also has a
          lifetime. The key may not be used past the end of its lifetime. The
          client's keys are initially distributed to the client through some
          out-of-band mechanism. The lifetime for each key is distributed with
          the key. Mechanisms for key distribution and lifetime specification
          are beyond the scope of this document.</t>

          <t>The client and server use one of the client's keys to
          authenticate DHCP messages during a session (until the next Solicit
          message sent by the client).</t>
        </section>

        <!-- ends: "21.4.3 from line 3309-->

        <section title="Client Considerations for Delayed Authentication Protocol">
          <!-- 21.4.4, line 3324-->

          <t>The client announces its intention to use DHCP authentication by
          including an Authentication option in its Solicit message. The
          server selects a key for the client based on the client's DUID. The
          client and server use that key to authenticate all DHCP messages
          exchanged during the session.</t>

          <section title="Sending Solicit Messages">
            <!-- 21.4.4.1, line 3333-->

            <t>When the client sends a Solicit message and wishes to use
            authentication, it includes an Authentication option with the
            desired protocol, algorithm and RDM as described in <xref target='RFC3315-21.4'/>.
            The client does not include any replay detection or authentication
            information in the Authentication option.</t>
          </section>

          <!-- ends: "21.4.4.1 from line 3333-->

          <section title="Receiving Advertise Messages">
            <!-- 21.4.4.2, line 3342-->

            <t>The client validates any Advertise messages containing an
            Authentication option specifying the delayed authentication
            protocol using the validation test described in
            <xref target='RFC3315-21.4.2'/>.</t>

            <t>The Client behavior is defined by local policy, as detailed below. </t>
            <t>
            If the client
            requires that Advertise messages be authenticated, then it MUST
            ignore Advertise messages that do not include authentication information,
            or for which the client has no matching key, or that do not pass the validation test.
            </t>
            <t>
            Local policy MAY also prefer authenticated Advertise messages,
            in which case the client SHOULD attempt to validate all Advertise
            messages for which the client has a matching key.  Messages for which
            the client has a key, but which do not pass the validation test MUST be
            rejected, even if the client would otherwise accept the same
            message without the Authentication option.  </t>
            <t> In all cases, messages for which the client does not have a matching key
            should be treated as if they have no Authentication option.
            </t>

            <t>When the decision to accept unauthenticated
            message is made, it should be made with care.  Accepting an unauthenticated
            Advertise message can make the client vulnerable to spoofing and
            other attacks.  Policies and actions which were depending upon
            Authentication MUST NOT be executed.  Local users are SHOULD be informed that the
            client has accepted an unauthenticated Advertise message. </t>

            <t>A client MUST be configurable to discard unauthenticated
            messages, and SHOULD be configured by default to discard
            unauthenticated messages if the client has been configured with an
            authentication key or other authentication information.
            </t>

            <t> A client
            MAY choose to differentiate between Advertise messages with no
            authentication information and Advertise messages that do not pass
            the validation test; for example, a client might accept the former
            and discard the latter. If a client does accept an unauthenticated
            message, the client SHOULD inform any local users and SHOULD log
            the event.</t>

          </section>

          <!-- ends: "21.4.4.2 from line 3342-->

          <section anchor='RFC3315-21.4.4.3' title="Sending Request, Confirm, Renew, Rebind, Decline or Release Messages">
            <!-- 21.4.4.3, line 3374-->

            <t>If the client authenticated the Advertise message through which
            the client selected the server, the client MUST generate
            authentication information for subsequent Request, Confirm, Renew,
            Rebind or Release messages sent to the server, as described in
            <xref target='RFC3315-21.4'/>. When the client sends a subsequent message, it MUST
            use the same key used by the server to generate the authentication
            information.</t>
          </section>

          <!-- ends: "21.4.4.3 from line 3374-->

          <section title="Sending Information-request Messages">
            <!-- 21.4.4.4, line 3385-->

            <t>If the server has selected a key for the client in a previous
            message exchange (see <xref target='RFC3315-21.4.5.1'/>), the client MUST use the
            same key to generate the authentication information throughout the
            session.</t>
          </section>

          <!-- ends: "21.4.4.4 from line 3385-->

          <section title="Receiving Reply Messages">
            <!-- 21.4.4.5, line 3392-->

            <t>If the client authenticated the Advertise it accepted, the
            client MUST validate the associated Reply message from the server.
            The client MUST ignore and discard the Reply if the message fails to pass the
            validation test and MAY log the validation failure.</t>

            <t>If the client accepted an Advertise message that did not
            include authentication information or did not pass the validation
            test, the client MAY accept an unauthenticated Reply message from
            the server.</t>
          </section>

          <!-- ends: "21.4.4.5 from line 3392-->

          <section title="Receiving Reconfigure Messages">
            <!-- 21.4.4.6, line 3406-->

            <t>The client MUST discard the Reconfigure if the message fails to
            pass the validation test and MAY log the validation failure.</t>
          </section>

          <!-- ends: "21.4.4.6 from line 3406-->
        </section>

        <!-- ends: "21.4.4 from line 3324-->

        <section title="Server Considerations for Delayed Authentication Protocol">
          <!-- 21.4.5, line 3412-->

          <t>After receiving a Solicit message that contains an Authentication
          option, the server selects a key for the client, based on the
          client's DUID and key selection policies with which the server has
          been configured. The server identifies the selected key in the
          Advertise message and uses the key to validate subsequent messages
          between the client and the server.</t>

          <section anchor='RFC3315-21.4.5.1' title="Receiving Solicit Messages and Sending Advertise Messages">
            <!-- 21.4.5.1, line 3422-->

            <t>The server selects a key for the client and includes
            authentication information in the Advertise message returned to
            the client as specified in <xref target='RFC3315-21.4'/>. The server MUST record
            the identifier of the key selected for the client and use that
            same key for validating subsequent messages with the client.</t>
          </section>

          <!-- ends: "21.4.5.1 from line 3422-->

          <section title="Receiving Request, Confirm, Renew, Rebind or Release Messages and Sending Reply Messages">
            <!-- 21.4.5.2, line 3431-->

            <t>The server uses the key identified in the message and validates
            the message as specified in <xref target='RFC3315-21.4.2'/>. If the message fails
            to pass the validation test or the server does not know the key
            identified by the 'key ID' field, the server MUST discard the
            message and MAY choose to log the validation failure. If the server
            receives a client message without an authentication option while the
            server has previously sent authentication information in the same session,
            it MUST discard the message and MAY choose to log the validation failure, because
            the client violates the definition in <xref target='RFC3315-21.4.4.3'/>.</t>

            <t>If the message passes the validation test, the server responds
            to the specific message as described in <xref target='RFC3315-18.2'/>. The server
            MUST include authentication information generated using the key
            identified in the received message, as specified in
            <xref target='RFC3315-21.4'/>.</t>
          </section>

          <!-- ends: "21.4.5.2 from line 3431-->
        </section>

        <!-- ends: "21.4.5 from line 3412-->
      </section>

      <!-- ends: "21.4 from line 3210-->

      <section anchor='RFC3315-21.5' title="Reconfigure Key Authentication Protocol">
        <!-- 21.5, line 3446-->

        <t>The Reconfigure key authentication protocol provides protection
        against misconfiguration of a client caused by a Reconfigure message
        sent by a malicious DHCP server. In this protocol, a DHCP server sends
        a Reconfigure Key to the client in the initial exchange of DHCP
        messages. The client records the Reconfigure Key for use in
        authenticating subsequent Reconfigure messages from that server. The
        server then includes an HMAC computed from the Reconfigure Key in
        subsequent Reconfigure messages.</t>

        <t>Both the Reconfigure Key sent from the server to the client and the
        HMAC in subsequent Reconfigure messages are carried as the
        Authentication information in an Authentication option. The format of
        the Authentication information is defined in the following
        section.</t>

        <t>The Reconfigure Key protocol is used (initiated by the server) only
        if the client and server are not using any other authentication
        protocol and the client and server have negotiated to use Reconfigure
        messages.</t>

        <section title="Use of the Authentication Option in the Reconfigure Key Authentication Protocol">
          <!-- 21.5.1, line 3470-->

          <t>The following fields are set in an Authentication option for the
          Reconfigure Key Authentication Protocol:

          <list hangIndent="14" style="hanging">

          <t hangText="   protocol"> 3</t>

          <t hangText="   algorithm"> 1</t>

          <t hangText="   RDM"> 0</t>

          </list>
          </t>

          <t>The format of the Authentication information for the Reconfigure
          Key Authentication Protocol is:</t>

          <figure align="center" anchor="FigRKAPAuthInfo"
              title="RKAP Authentication Information">
            <preamble/>

            <artwork align="left">
            <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |                 Value (128 bits)              |
   +-+-+-+-+-+-+-+-+                                               |
   .                                                               .
   .                                                               .
   .                                               +-+-+-+-+-+-+-+-+
   |                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
            </artwork>

            <postamble/>
          </figure>

          <t><list hangIndent="20" style="hanging">
          <t hangText="   Type"> Type of data in Value field carried in this option:

          <list hangIndent="8" style="hanging">

          <t hangText="   1"> Reconfigure Key value (used in Reply message).</t>

          <t hangText="   2"> HMAC-MD5 digest of the message (used in Reconfigure
          message).</t>

          </list>
          </t>

          <t hangText="   Value"> Data as defined by field.</t>

          </list></t>
        </section>

        <!-- ends: "21.5.1 from line 3470-->

        <section title="Server considerations for Reconfigure Key protocol">
          <!-- 21.5.2, line 3508-->

          <t>The server selects a Reconfigure Key for a client during the
          Request/Reply, Solicit/Reply or Information-request/Reply message
          exchange. The server records the Reconfigure Key and transmits that
          key to the client in an Authentication option in the Reply
          message.</t>

          <t>The Reconfigure Key is 128 bits long, and MUST be a
          cryptographically strong random or pseudo-random number that cannot
          easily be predicted.</t>

          <t>To provide authentication for a Reconfigure message, the server
          selects a replay detection value according to the RDM selected by
          the server, and computes an HMAC-MD5 of the Reconfigure message
          using the Reconfigure Key for the client. The server computes the
          HMAC-MD5 over the entire DHCP Reconfigure message, including the
          Authentication option; the HMAC-MD5 field in the Authentication
          option is set to zero for the HMAC-MD5 computation. The server
          includes the HMAC-MD5 in the authentication information field in an
          Authentication option included in the Reconfigure message sent to
          the client.</t>
        </section>

        <!-- ends: "21.5.2 from line 3508-->

        <section title="Client considerations for Reconfigure Key protocol">
          <!-- 21.5.3, line 3532-->

          <t>The client will receive a Reconfigure Key from the server in the
          initial Reply message from the server. The client records the
          Reconfigure Key for use in authenticating subsequent Reconfigure
          messages.</t>

          <t>To authenticate a Reconfigure message, the client computes an
          HMAC-MD5 over the DHCP Reconfigure message, using the Reconfigure
          Key received from the server. If this computed HMAC-MD5 matches the
          value in the Authentication option, the client accepts the
          Reconfigure message.</t>
        </section>

        <!-- ends: "21.5.3 from line 3532-->
      </section>

      <!-- ends: "21.5 from line 3446-->
    </section>

    <!-- ends: "21 from line 3092-->

    <section anchor='RFC3315-22' title="DHCP Options">
      <!-- 22, line 3547-->

      <t>Options are used to carry additional information and parameters in
      DHCP messages. Every option shares a common base format, as described in
      <xref target='RFC3315-22.1'/>. All values in options are represented in network byte
      order.</t>

      <t>This document describes the DHCP options defined as part of the base
      DHCP specification. Other options may be defined in the future in
      separate documents.</t>

      <t>Unless otherwise noted, each option may appear only in the options
      area of a DHCP message and may appear only once. If an option does
      appear multiple times, each instance is considered separate and the data
      areas of the options MUST NOT be concatenated or otherwise combined.</t>

      <section anchor='RFC3315-22.1' title="Format of DHCP Options">
        <!-- 22.1, line 3566-->

        <t>The format of DHCP options is:</t>

        <figure align="center" anchor="FigOptions"
              title="Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          option-data                          |
   |                      (option-len octets)                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> An unsigned integer identifying the specific option
        type carried in this option.</t>

        <t hangText="   option-len"> An unsigned integer giving the length of the option-data
        field in this option in octets.</t>

        <t hangText="   option-data"> The data for the option; the format of this data
        depends on the definition of the option.</t>

        </list></t>

        <t>DHCPv6 options are scoped by using encapsulation. Some options
        apply generally to the client, some are specific to an IA, and some
        are specific to the addresses within an IA. These latter two cases are
        discussed in <xref target='RFC3315-22.4'/> and <xref target='RFC3315-22.6'/>.</t>
      </section>

      <!-- ends: "22.1 from line 3566-->

      <section anchor='RFC3315-22.2' title="Client Identifier Option">
        <!-- 22.2, line 3597-->

        <t>The Client Identifier option is used to carry a DUID (see
        <xref target='RFC3315-9'/>) identifying a client between a client
        and a server. The format of the Client Identifier option is:</t>

        <figure align="center" anchor="FigOption1"
              title="Client Identifier Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |        OPTION_CLIENTID        |          option-len           |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  .                                                               .
  .                              DUID                             .
  .                        (variable length)                      .
  .                                                               .
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_CLIENTID (1).</t>

        <t hangText="   option-len"> Length of DUID in octets.</t>

        <t hangText="   DUID"> The DUID for the client.</t>

        </list></t>

      </section>

      <!-- ends: "22.2 from line 3597-->

      <section  anchor='RFC3315-22.3' title="Server Identifier Option">
        <!-- 22.3, line 3623-->

        <t>The Server Identifier option is used to carry a DUID (see
        <xref target='RFC3315-9'/>) identifying a server between a client
        and a server. The format of the Server Identifier option is:</t>

        <figure align="center" anchor="FigOption2"
              title="Server Identifier Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        OPTION_SERVERID        |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                              DUID                             .
   .                        (variable length)                      .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_SERVERID (2).</t>

        <t hangText="   option-len"> Length of DUID in octets.</t>

        <t hangText="   DUID"> The DUID for the server.</t>

        </list></t>
      </section>

      <!-- ends: "22.3 from line 3623-->

      <section anchor='RFC3315-22.4' title="Identity Association for Non-temporary Addresses Option">
        <!-- 22.4, line 3649-->

        <t>The Identity Association for Non-temporary Addresses option (IA_NA
        option) is used to carry an IA_NA, the parameters associated with the
        IA_NA, and the non-temporary addresses associated with the IA_NA.</t>

        <t>Addresses appearing in an IA_NA option are not temporary addresses
        (see <xref target='RFC3315-22.5'/>).</t>

        <t>The format of the IA_NA option is:</t>

        <figure align="center" anchor="FigOption3"
              title="Identity Association for Non-temporary Addresses Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IA_NA         |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        IAID (4 octets)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T1                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T2                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                         IA_NA-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_IA_NA (3).</t>

        <t hangText="   option-len"> 12 + length of IA_NA-options field.</t>

        <t hangText="   IAID"> The unique identifier for this IA_NA; the IAID must be unique
        among the identifiers for all of this client's IA_NAs. The number
        space for IA_NA IAIDs is separate from the number space for IA_TA
        IAIDs.</t>

        <t hangText="   T1"> The time at which the client contacts the server from which the
        addresses in the IA_NA were obtained to extend the lifetimes of the
        addresses assigned to the IA_NA; T1 is a time duration relative to the
        current time expressed in units of seconds.</t>

        <t hangText="   T2"> The time at which the client contacts any available server to
        extend the lifetimes of the addresses assigned to the IA_NA; T2 is a
        time duration relative to the current time expressed in units of
        seconds.</t>

        <t hangText="   IA_NA-options"> Options associated with this IA_NA.</t>

        </list></t>

        <t>The IA_NA-options field encapsulates those options that are
        specific to this IA_NA. For example, all of the IA Address Options
        carrying the addresses associated with this IA_NA are in the
        IA_NA-options field.</t>

        <t>An IA_NA option may only appear in the options area of a DHCP
        message. A DHCP message may contain multiple IA_NA options.</t>

        <t>The status of any operations involving this IA_NA is indicated in a
        Status Code option in the IA_NA-options field.</t>

        <t>Note that an IA_NA has no explicit "lifetime" or "lease length" of
        its own. When the valid lifetimes of all of the addresses in an IA_NA
        have expired, the IA_NA can be considered as having expired. T1 and T2
        are included to give servers explicit control over when a client
        recontacts the server about a specific IA_NA.</t>

        <t>In a message sent by a client to a server, values in the T1 and T2
        fields indicate the client's preference for those parameters. The
        client sets T1 and T2 to 0 if it has no preference for those values.
        In a message sent by a server to a client, the client MUST use the
        values in the T1 and T2 fields for the T1 and T2 parameters, unless
        those values in those fields are 0. The values in the T1 and T2 fields
        are the number of seconds until T1 and T2.</t>

        <t>The server selects the T1 and T2 times to allow the client to
        extend the lifetimes of any addresses in the IA_NA before the
        lifetimes expire, even if the server is unavailable for some short
        period of time. Recommended values for T1 and T2 are .5 and .8 times
        the shortest preferred lifetime of the addresses in the IA that the
        server is willing to extend, respectively. If the "shortest" preferred
        lifetime is 0xffffffff ("infinity"), the recommended T1 and T2 values
        are also 0xffffffff. If the time at which the addresses in an IA_NA
        are to be renewed is to be left to the discretion of the client, the
        server sets T1 and T2 to 0.</t>

        <t>If a server receives an IA_NA with T1 greater than T2, and both T1
        and T2 are greater than 0, the server ignores the invalid values of T1
        and T2 and processes the IA_NA as though the client had set T1 and T2
        to 0.</t>

        <t>If a client receives an IA_NA with T1 greater than T2, and both T1
        and T2 are greater than 0, the client discards the IA_NA option and
        processes the remainder of the message as though the server had not
        included the invalid IA_NA option.</t>

        <t>Care should be taken in setting T1 or T2 to 0xffffffff
        ("infinity"). A client will never attempt to extend the lifetimes of
        any addresses in an IA with T1 set to 0xffffffff. A client will never
        attempt to use a Rebind message to locate a different server to extend
        the lifetimes of any addresses in an IA with T2 set to 0xffffffff.</t>
      </section>

      <!-- ends: "22.4 from line 3649-->

      <section anchor='RFC3315-22.5' title="Identity Association for Temporary Addresses Option">
        <!-- 22.5, line 3761-->

        <t>The Identity Association for the Temporary Addresses (IA_TA) option
        is used to carry an IA_TA, the parameters associated with the IA_TA
        and the addresses associated with the IA_TA. All of the addresses in
        this option are used by the client as temporary addresses, as defined
        in <xref target="RFC3041"/>. The format of the IA_TA option
        is:</t>

        <figure align="center" anchor="FigOption4"
              title="Identity Association for Temporary Addresses Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IA_TA         |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        IAID (4 octets)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                         IA_TA-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_IA_TA (4).</t>

        <t hangText="   option-len"> 4 + length of IA_TA-options field.</t>

        <t hangText="   IAID"> The unique identifier for this IA_TA; the IAID must be unique
        among the identifiers for all of this client's IA_TAs. The number
        space for IA_TA IAIDs is separate from the number space for IA_NA
        IAIDs.</t>

        <t hangText="   IA_TA-options"> Options associated with this IA_TA.</t>

        </list></t>

        <t>The IA_TA-Options field encapsulates those options that are
        specific to this IA_TA. For example, all of the IA Address Options
        carrying the addresses associated with this IA_TA are in the
        IA_TA-options field.</t>

        <t>Each IA_TA carries one "set" of temporary addresses; that is, at
        most one address from each prefix assigned to the link to which the
        client is attached.</t>

        <t>An IA_TA option may only appear in the options area of a DHCP
        message. A DHCP message may contain multiple IA_TA options.</t>

        <t>The status of any operations involving this IA_TA is indicated in a
        Status Code option in the IA_TA-options field.</t>

        <t>Note that an IA has no explicit "lifetime" or "lease length" of its
        own. When the valid lifetimes of all of the addresses in an IA_TA have
        expired, the IA can be considered as having expired.</t>

        <t>An IA_TA option does not include values for T1 and T2. A client MAY
        request that the lifetimes on temporary addresses be extended by
        including the addresses in a IA_TA option sent in a Renew or Rebind
        message to a server. For example, a client would request an extension
        on the lifetime of a temporary address to allow an application to
        continue to use an established TCP connection.</t>

        <t>The client obtains new temporary addresses by sending an IA_TA
        option with a new IAID to a server. Requesting new temporary addresses
        from the server is the equivalent of generating new temporary
        addresses as described in RFC 3041. The server will generate new
        temporary addresses and return them to the client. The client should
        request new temporary addresses before the lifetimes on the previously
        assigned addresses expire.</t>

        <t>A server MUST return the same set of temporary address for the same
        IA_TA (as identified by the IAID) as long as those addresses are still
        valid. After the lifetimes of the addresses in an IA_TA have expired,
        the IAID may be reused to identify a new IA_TA with new temporary
        addresses.</t>

        <t>This option MAY appear in a Confirm message if the lifetimes on the
        temporary addresses in the associated IA have not expired.</t>
      </section>

      <!-- ends: "22.5 from line 3761-->

      <section anchor='RFC3315-22.6' title="IA Address Option">
        <!-- 22.6, line 3840-->

        <t>The IA Address option is used to specify IPv6 addresses associated
        with an IA_NA or an IA_TA. The IA Address option must be encapsulated
        in the Options field of an IA_NA or IA_TA option. The Options field
        encapsulates those options that are specific to this address.</t>

        <t>The format of the IA Address option is:</t>

        <figure align="center" anchor="FigOption5"
              title="IA Address Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IAADDR        |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                         IPv6 address                          |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      preferred-lifetime                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        valid-lifetime                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                        IAaddr-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_IAADDR (5).</t>

        <t hangText="   option-len"> 24 + length of IAaddr-options field.</t>

        <t hangText="   IPv6 address"> An IPv6 address.</t>

        <t hangText="   preferred-lifetime"> The preferred lifetime for the IPv6 address in
        the option, expressed in units of seconds.</t>

        <t hangText="   valid-lifetime"> The valid lifetime for the IPv6 address in the
        option, expressed in units of seconds.</t>

        <t hangText="   IAaddr-options"> Options associated with this address.</t>

        </list></t>

        <t>In a message sent by a client to a server, values in the preferred
        and valid lifetime fields indicate the client's preference for those
        parameters. The client may send 0 if it has no preference for the
        preferred and valid lifetimes. If a client wishes to express
        its lifetimes preferences and does not have the knowledge
        to populate the IPv6 address field, it can use unspecified address (::).
        It is up to a server to honor or ignore these preferences.</t>

        <t>In a message sent by a server to a
        client, the client MUST use the values in the preferred and valid
        lifetime fields for the preferred and valid lifetimes. The values in
        the preferred and valid lifetimes are the number of seconds remaining
        in each lifetime.</t>

        <t>A client discards any addresses for which the
        preferred lifetime is greater than the valid lifetime. A server
        ignores the lifetimes set by the client if the preferred lifetime is
        greater than the valid lifetime and ignores the values for T1 and T2
        set by the client if those values are greater than the preferred
        lifetime.</t>

        <t>Care should be taken in setting the valid lifetime of an address to
        0xffffffff ("infinity"), which amounts to a permanent assignment of an
        address to a client.</t>

        <t>An IA Address option may appear only in an IA_NA option or an IA_TA
        option. More than one IA Address Option can appear in an IA_NA option
        or an IA_TA option.</t>

        <t>The status of any operations involving this IA Address is indicated
        in a Status Code option in the IAaddr-options field, as specified
        in section <xref target='RFC3315-22.13'/>.</t>
      </section>

      <!-- ends: "22.6 from line 3840-->

      <section anchor='RFC3315-22.7' title="Option Request Option">
        <!-- 22.7, line 3912-->

        <t>The Option Request option is used to identify a list of options in
        a message between a client and a server. The format of the Option
        Request option is:</t>

        <figure align="center" anchor="FigOption6"
              title="Option Request Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           OPTION_ORO          |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    requested-option-code-1    |    requested-option-code-2    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              ...                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_ORO (6).</t>

        <t hangText="   option-len"> 2 * number of requested options.</t>

        <t hangText="   requested-option-code-n"> The option code for an option requested by
        the client.</t>

        </list></t>

        <t>A client MAY include an Option Request option in a Solicit,
        Request, Renew, Rebind, Confirm or Information-request message to
        inform the server about options the client wants the server to send to
        the client. A server MAY include an Option Request option in a
        Reconfigure message to indicate which options the client should request
        from the server.</t>
      </section>

      <!-- ends: "22.7 from line 3912-->

      <section anchor='RFC3315-22.8' title="Preference Option">
        <!-- 22.8, line 3945-->

        <t>The Preference option is sent by a server to a client to affect the
        selection of a server by the client.</t>

        <t>The format of the Preference option is:</t>

        <figure align="center" anchor="FigOption7"
              title="Preference Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_PREFERENCE       |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  pref-value   |
   +-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_PREFERENCE (7).</t>

        <t hangText="   option-len"> 1.</t>

        <t hangText="   pref-value"> The preference value for the server in this message.</t>

        </list></t>

        <t>A server MAY include a Preference option in an Advertise message to
        control the selection of a server by the client. See <xref target='RFC3315-17.1.3'/>
        for the use of the Preference option by the client and the
        interpretation of Preference option data value.</t>
      </section>

      <!-- ends: "22.8 from line 3945-->

      <section title="Elapsed Time Option">
        <!-- 22.9, line 3974-->

        <figure align="center" anchor="FigOption8"
              title="Elapsed Time Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_ELAPSED_TIME      |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          elapsed-time         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_ELAPSED_TIME (8).</t>

        <t hangText="   option-len"> 2.</t>

        <t hangText="   elapsed-time"> The amount of time since the client began its current
        DHCP transaction. This time is expressed in hundredths of a second
        (10^-2 seconds).</t>

        </list></t>

        <t>A client MUST include an Elapsed Time option in messages to
        indicate how long the client has been trying to complete a DHCP
        message exchange. The elapsed time is measured from the time at which
        the client sent the first message in the message exchange, and the
        elapsed-time field is set to 0 in the first message in the message
        exchange. Servers and Relay Agents use the data value in this option
        as input to policy controlling how a server responds to a client
        message. For example, the elapsed time option allows a secondary DHCP
        server to respond to a request when a primary server has not answered
        in a reasonable time. The elapsed time value is an unsigned, 16 bit
        integer. The client uses the value 0xffff to represent any elapsed
        time values greater than the largest time value that can be
        represented in the Elapsed Time option.</t>
      </section>

      <!-- ends: "22.9 from line 3974-->

      <section anchor='RFC3315-22.10' title="Relay Message Option">
        <!-- 22.10, line 4009-->

        <t>The Relay Message option carries a DHCP message in a Relay-forward
        or Relay-reply message.</t>

        <t>The format of the Relay Message option is:</t>

        <figure align="center" anchor="FigOption9"
              title="Relay Message Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        OPTION_RELAY_MSG       |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                       DHCP-relay-message                      .
   .                                                               .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_RELAY_MSG (9)</t>

        <t hangText="   option-len"> Length of DHCP-relay-message</t>

        <t hangText="   DHCP-relay-message"> In a Relay-forward message, the received
        message, relayed verbatim to the next relay agent or server; in a
        Relay-reply message, the message to be copied and relayed to the relay
        agent or client whose address is in the peer-address field of the
        Relay-reply message</t>

        </list></t>
      </section>

      <!-- ends: "22.10 from line 4009-->

      <section anchor='RFC3315-22.11' title="Authentication Option">
        <!-- 22.11, line 4042-->

        <t>The Authentication option carries authentication information to
        authenticate the identity and contents of DHCP messages. The use of
        the Authentication option is described in <xref target='RFC3315-21'/>. The format of
        the Authentication option is:</t>

        <figure align="center" anchor="FigOption11"
              title="Authentication Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_AUTH          |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   protocol    |   algorithm   |      RDM      |               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
   |                                                               |
   |          replay detection (64 bits)           +-+-+-+-+-+-+-+-+
   |                                               |   auth-info   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
   .                   authentication information                  .
   .                       (variable length)                       .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_AUTH (11)</t>

        <t hangText="   option-len"> 11 + length of authentication information field</t>

        <t hangText="   protocol"> The authentication protocol used in this authentication
        option</t>

        <t hangText="   algorithm"> The algorithm used in the authentication protocol</t>

        <t hangText="   RDM"> The replay detection method used in this authentication
        option</t>

        <t hangText="   Replay detection"> The replay detection information for the RDM</t>

        <t hangText="   authentication information">The authentication information, as
        specified by the protocol and algorithm used in this authentication
        option</t>

        </list></t>
      </section>

      <!-- ends: "22.11 from line 4042-->

      <section anchor='RFC3315-22.12' title="Server Unicast Option">
        <!-- 22.12, line 4089-->

        <t>The server sends this option to a client to indicate to the client
        that it is allowed to unicast messages to the server. The format of
        the Server Unicast option is:</t>

        <figure align="center" anchor="FigOption12"
              title="Server Unicast Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_UNICAST       |        option-len             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                       server-address                          |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_UNICAST (12).</t>

        <t hangText="   option-len"> 16.</t>

        <t hangText="   server-address"> The IP address to which the client should send
        messages delivered using unicast.</t>

        </list></t>

        <t>The server specifies the IPv6 address to which the client is to
        send unicast messages in the server-address field. When a client
        receives this option, where permissible and appropriate, the client
        sends messages directly to the server using the IPv6 address specified
        in the server-address field of the option.</t>

        <t>When the server sends a Unicast option to the client, some messages
        from the client will not be relayed by Relay Agents, and will not
        include Relay Agent options from the Relay Agents. Therefore, a server
        should only send a Unicast option to a client when Relay Agents are
        not sending Relay Agent options. A DHCP server rejects any messages
        sent inappropriately using unicast to ensure that messages are relayed
        by Relay Agents when Relay Agent options are in use.</t>

        <t>Details about when the client may send messages to the server using
        unicast are in <xref target='RFC3315-18'/>.</t>
      </section>

      <!-- ends: "22.12 from line 4089-->

      <section anchor='RFC3315-22.13' title="Status Code Option">
        <!-- 22.13, line 4134-->

        <t>This option returns a status indication related to the DHCP message
        or option in which it appears. The format of the Status Code option
        is:</t>

        <figure align="center" anchor="FigOption13"
              title="Status Code Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_STATUS_CODE      |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          status-code          |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                                                               .
   .                        status-message                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_STATUS_CODE (13).</t>

        <t hangText="   option-len"> 2 + length of status-message.</t>

        <t hangText="   status-code"> The numeric code for the status encoded in this option.
        The status codes are defined in <xref target='RFC3315-24.4'/>.</t>

        <t hangText="   status-message"> A UTF-8 encoded text string suitable for display to
        an end user, which MUST NOT be null-terminated.</t>

        </list></t>

        <t>A Status Code option may appear in the options field of a DHCP
        message and/or in the options field of another option. If the Status
        Code option does not appear in a message in which the option could
        appear, the status of the message is assumed to be Success.</t>
      </section>

      <!-- ends: "22.13 from line 4134-->

      <section anchor='RFC3315-22.14' title="Rapid Commit Option">
        <!-- 22.14, line 4172-->

        <t>The Rapid Commit option is used to signal the use of the two
        message exchange for address assignment. The format of the Rapid
        Commit option is:</t>

        <figure align="center" anchor="FigOption14"
              title="Rapid Commit Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_RAPID_COMMIT      |               0               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_RAPID_COMMIT (14).</t>

        <t hangText="   option-len"> 0.</t>

        </list></t>

        <t>A client MAY include this option in a Solicit message if the client
        is prepared to perform the Solicit-Reply message exchange described in
        <xref target='RFC3315-17.1.1'/>.</t>

        <t>A server MUST include this option in a Reply message sent in
        response to a Solicit message when completing the Solicit-Reply
        message exchange.</t>

        <t>DISCUSSION:</t>

	<t><list style="empty">
          <t>Each server that responds with a Reply to a Solicit that includes a
          Rapid Commit option will commit the assigned addresses in the Reply
          message to the client, and will not receive any confirmation that the
          client has received the Reply message. Therefore, if more than one
          server responds to a Solicit that includes a Rapid Commit option, some
          servers will commit addresses that are not actually used by the
          client.</t>

          <t>The problem of unused addresses can be minimized, for example, by
          designing the DHCP service so that only one server responds to the
          Solicit or by using relatively short lifetimes for assigned
          addresses.</t>
	</list></t>
      </section>

      <!-- ends: "22.14 from line 4172-->

      <section title="User Class Option">
        <!-- 22.15, line 4217-->

        <t>The User Class option is used by a client to identify the type or
        category of user or applications it represents.</t>

        <t>The format of the User Class option is:</t>

        <figure align="center" anchor="FigOption15"
              title="User Class Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_USER_CLASS       |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          user-class-data                      .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_USER_CLASS (15).</t>

        <t hangText="   option-len"> Length of user class data field.</t>

        <t hangText="   user-class-data"> The user classes carried by the client.</t>

        </list></t>

        <t>The information contained in the data area of this option is
        contained in one or more opaque fields that represent the user class
        or classes of which the client is a member. A server selects
        configuration information for the client based on the classes
        identified in this option. For example, the User Class option can be
        used to configure all clients of people in the accounting department
        with a different printer than clients of people in the marketing
        department. The user class information carried in this option MUST be
        configurable on the client.</t>

        <t>The data area of the user class option MUST contain one or more
        instances of user class data. Each instance of the user class data is
        formatted as follows:</t>

        <figure align="center" anchor="FigOption15Data"
              title="User Class Data Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
   |        user-class-len         |          opaque-data          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>The user-class-len is two octets long and specifies the length of
        the opaque user class data in network byte order.</t>

        <t>A server interprets the classes identified in this option according
        to its configuration to select the appropriate configuration
        information for the client. A server may use only those user classes
        that it is configured to interpret in selecting configuration
        information for a client and ignore any other user classes. In
        response to a message containing a User Class option, a server
        includes a User Class option containing those classes that were
        successfully interpreted by the server, so that the client can be
        informed of the classes interpreted by the server.</t>
      </section>

      <!-- ends: "22.15 from line 4217-->

      <section title="Vendor Class Option">
        <!-- 22.16, line 4276-->

        <t>This option is used by a client to identify the vendor that
        manufactured the hardware on which the client is running. The
        information contained in the data area of this option is contained in
        one or more opaque fields that identify details of the hardware
        configuration. The format of the Vendor Class option is:</t>

        <figure align="center" anchor="FigOption16"
              title="Vendor Class Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_VENDOR_CLASS      |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       enterprise-number                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                       vendor-class-data                       .
   .                             . . .                             .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_VENDOR_CLASS (16).</t>

        <t hangText="   option-len"> 4 + length of vendor class data field.</t>

        <t hangText="   enterprise-number"> The vendor's registered Enterprise Number as
        registered with IANA <xref target="IANA-PEN"/>.</t>

        <t hangText="   vendor-class-data"> The hardware configuration of the host on which
        the client is running.</t>

        </list></t>

        <t>The vendor-class-data is composed of a series of separate items,
        each of which describes some characteristic of the client's hardware
        configuration. Examples of vendor-class-data instances might include
        the version of the operating system the client is running or the
        amount of memory installed on the client.</t>

        <t>Each instance of the vendor-class-data is formatted as follows:</t>

        <figure align="center" anchor="FigOption16Data"
              title="Vendor Class Data Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
   |       vendor-class-len        |          opaque-data          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t>The vendor-class-len is two octets long and specifies the length of
        the opaque vendor class data in network byte order.</t>

        <t>Servers and clients MUST NOT include more than one instance
        of OPTION_VENDOR_CLASS with the same Enterprise Number. Each instance
        of OPTION_VENDOR_CLASS can carry multiple </t>
      </section>

      <!-- ends: "22.16 from line 4276-->

      <section title="Vendor-specific Information Option">
        <!-- 22.17, line 4325-->

        <t>This option is used by clients and servers to exchange
        vendor-specific information.</t>

        <t>The format of the Vendor-specific Information option is:</t>

        <figure align="center" anchor="FigOption17"
              title="Vendor-specific Information Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_VENDOR_OPTS       |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       enterprise-number                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          option-data                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_VENDOR_OPTS (17)</t>

        <t hangText="   option-len"> 4 + length of option-data field</t>

        <t hangText="   enterprise-number"> The vendor's registered Enterprise Number as
        registered with IANA <xref target="IANA-PEN"/>.</t>

        <t hangText="   option-data"> An opaque object, interpreted by
        vendor-specific code on the clients and servers</t>

        </list></t>

        <t>The definition of the information carried in this option is vendor
        specific. The vendor is indicated in the enterprise-number field. Use
        of vendor-specific information allows enhanced operation, utilizing
        additional features in a vendor's DHCP implementation. A DHCP client
        that does not receive requested vendor-specific information will still
        configure the host device's IPv6 stack to be functional.</t>

        <t>The encapsulated vendor-specific options field MUST be encoded as a
        sequence of code/length/value fields of identical format to the DHCP
        options field. The option codes are defined by the vendor identified
        in the enterprise-number field and are not managed by IANA. Each of
        the encapsulated options is formatted as follows:</t>

        <figure align="center" anchor="FigOption17Data"
              title="Vendor-specific Options Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          opt-code             |             option-len        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          option-data                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   opt-code"> The code for the encapsulated option.</t>

        <t hangText="   option-len"> An unsigned integer giving the length of the option-data
        field in this encapsulated option in octets.</t>

        <t hangText="   option-data"> The data area for the encapsulated option.</t>

        </list></t>

        <t>Multiple instances of the Vendor-specific Information option may
        appear in a DHCP message. Each instance of the option is interpreted
        according to the option codes defined by the vendor identified by the
        Enterprise Number in that option. Servers and clients MUST NOT send
        more than one instance of Vendor-specific Information option with the
        same Enterprise Number. Each instanf of Vendor-specific Information option
        MAY contain multiple encapsulated options.</t>
        
        <t>A client that is interested in receiving a Vendor-specific Information Option:
        </t>
        
        <t><list hangIndent="3" style="hanging">

        <t hangText="-"> MUST specify the Vendor-specific Information Option in an 
        Option Request Option.</t>
        
        <t hangText="-"> MAY specify an associated Vendor Class Option.</t>	

        <t hangText="-"> MAY specify the Vendor-specific Information Option with any 
        data.</t>	

        </list></t>

        <t>Severs only return the Vendor-specific Information Options if specified in 
        Option Request Options from clients and:</t>

        <t><list hangIndent="3" style="hanging">
        
        <t hangText="-"> MAY use the Enterprise Numbers in the associated Vendor Class 
        Options to restrict the set of Enterprise Numbers in the Vendor-specific 
        Information Options returned.</t>	

        <t hangText="-"> MAY return all configured Vendor-specific Information Options.</t>	

        <t hangText="-"> MAY use other information in the packet or in its configuration
        to determine which set of Enterprise Numbers in the Vendor-specific Information 
        Options to return.</t>	

        </list> </t>
      </section>

      <!-- ends: "22.17 from line 4325-->

      <section anchor='RFC3315-22.18' title="Interface-Id Option">
        <!-- 22.18, line 4396-->

        <t>The relay agent MAY send the Interface-id option to identify the
        interface on which the client message was received. If a relay agent
        receives a Relay-reply message with an Interface-id option, the relay
        agent relays the message to the client through the interface
        identified by the option.</t>

        <t>The format of the Interface ID option is:</t>

        <figure align="center" anchor="FigOption18"
              title="Interface-ID Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_INTERFACE_ID      |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                         interface-id                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_INTERFACE_ID (18).</t>

        <t hangText="   option-len"> Length of interface-id field.</t>

        <t hangText="   interface-id"> An opaque value of arbitrary length generated by the
        relay agent to identify one of the relay agent's interfaces.</t>

        </list></t>

        <t>The server MUST copy the Interface-Id option from the Relay-Forward
        message into the Relay-Reply message the server sends to the relay
        agent in response to the Relay-Forward message. This option MUST NOT
        appear in any message except a Relay-Forward or Relay-Reply
        message.</t>

        <t>Servers MAY use the Interface-ID for parameter assignment policies.
        The Interface-ID SHOULD be considered an opaque value, with policies
        based on exact match only; that is, the Interface-ID SHOULD NOT be
        internally parsed by the server. The Interface-ID value for an
        interface SHOULD be stable and remain unchanged, for example, after
        the relay agent is restarted; if the Interface-ID changes, a server
        will not be able to use it reliably in parameter assignment
        policies.</t>
      </section>

      <!-- ends: "22.18 from line 4396-->

      <section anchor='RFC3315-22.19' title="Reconfigure Message Option">
        <!-- 22.19, line 4440-->

        <t>A server includes a Reconfigure Message option in a Reconfigure
        message to indicate to the client whether the client responds with a
        Renew message, a Rebind message, or an Information-request message.
        The format of this option is:</t>

        <figure align="center" anchor="FigOption19"
              title="Reconfigure Message Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_RECONF_MSG        |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |
   +-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_RECONF_MSG (19).</t>

        <t hangText="   option-len"> 1.</t>

        <t hangText="   msg-type"> 5 for Renew message, 6 for Rebind,
        11 for Information-request message.</t>

        </list></t>

        <t>The Reconfigure Message option can only appear in a Reconfigure
        message.</t>
      </section>

      <!-- ends: "22.19 from line 4440-->

      <section anchor='RFC3315-22.20' title="Reconfigure Accept Option">
        <!-- 22.20, line 4468-->

        <t>A client uses the Reconfigure Accept option to announce to the
        server whether the client is willing to accept Reconfigure messages,
        and a server uses this option to tell the client whether or not to
        accept Reconfigure messages. The default behavior, in the absence of
        this option, means unwillingness to accept Reconfigure messages, or
        instruction not to accept Reconfigure messages, for the client and
        server messages, respectively. The following figure gives the format
        of the Reconfigure Accept option:</t>

        <figure align="center" anchor="FigOption20"
              title="Reconfigure Accept Option Format">
          <preamble/>

          <artwork align="left">
          <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     OPTION_RECONF_ACCEPT      |               0               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_RECONF_ACCEPT (20).</t>

        <t hangText="   option-len"> 0.</t>

        </list></t>
      </section>

      <!-- ends: "22.20 from line 4468-->

      <!-- Merging section 4. from RFC7083 (SOL_MAX_RT option) -->
      <section anchor='RFC3315-22.21' title="SOL_MAX_RT Option">
        <t>A DHCP server sends the SOL_MAX_RT option to a client to override
        the default value of SOL_MAX_RT.  The value of SOL_MAX_RT in the
        option replaces the default value defined in <xref target='RFC3315-5.5'/>.
        One use for the SOL_MAX_RT option is to set a longer value for
        SOL_MAX_RT, which reduces the Solicit traffic from a client that has
        not received a response to its Solicit messages. </t>

        <t>The format of the SOL_MAX_RT option is:</t>

        <figure align="center" anchor="FigOption82"
                title="SOL_MAX_RT Option Format">
          <preamble/>

          <artwork align="left">
            <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       SOL_MAX_RT value                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_SOL_MAX_RT (82).</t>

        <t hangText="   option-len"> 4.</t>

        <t hangText="   SOL_MAX_RT value"> Overriding value for SOL_MAX_RT
        in seconds; MUST be in range: 60 &lt;= "value" &lt;= 86400 (1 day).</t>

        </list></t>

        <!-- The following paragraphs have been merged from section 7 and 8
             of RFC7083 -->
        <t>A DHCP client MUST include the SOL_MAX_RT option code in any Option
        Request option (see <xref target='RFC3315-22.7'/>) it sends.</t>

        <t>The DHCP server MAY include the SOL_MAX_RT option in any response
        it sends to a client that has included the SOL_MAX_RT option code in
        an Option Request option.  The SOL_MAX_RT option is sent in the main
        body of the message to client, not as an encapsulated option in,
        e.g., an IA_NA, IA_TA, or IA_PD option.</t>

        <t>A DHCP client MUST ignore any SOL_MAX_RT option values
        that are less than 60 or more than 86400.</t>

        <t>If a DHCP client receives a message containing a SOL_MAX_RT option
        that has a valid value for SOL_MAX_RT, the client MUST set its
        internal SOL_MAX_RT parameter to the value contained in the
        SOL_MAX_RT option.  This value of SOL_MAX_RT is then used by the
        retransmission mechanism defined in <xref target='RFC3315-14'/>
        and <xref target='RFC3315-17.1.2'/>.</t>

        <t>Updated SOL_MAX_RT value applies only to the network interface on
        which the client received SOL_MAX_RT option.</t>

      </section>

      <!-- ends: merged section 4. from RFC7083 -->

      <section anchor='RFC3315-22.22' title="INF_MAX_RT Option">
        <t>A DHCP server sends the INF_MAX_RT option to a client to override
        the default value of INF_MAX_RT.  The value of INF_MAX_RT in the
        option replaces the default value defined in <xref target='RFC3315-5.5'/>.
        One use for the INF_MAX_RT option is to set a longer value for INF_MAX_RT,
        which reduces the Information-request traffic from a client that has not
        received a response to its Information-request messages.</t>

        <t>The format of the INF_MAX_RT option is:</t>

        <figure align="center" anchor="FigOption83"
                title="INF_MAX_RT Option Format">
          <preamble/>

          <artwork align="left">
            <![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       INF_MAX_RT value                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>

          <postamble/>
        </figure>

        <t><list hangIndent="24" style="hanging">

        <t hangText="   option-code"> OPTION_INF_MAX_RT (83).</t>

        <t hangText="   option-len"> 4.</t>

        <t hangText="   SOL_MAX_RT value"> Overriding value for INF_MAX_RT
        in seconds; MUST be in range: 60 &lt;= "value" &lt;= 86400 (1 day).</t>

        </list></t>

        <!-- The following paragraphs have been merged from section 7 of RFC7083 -->
        <t>A DHCP client MUST include the INF_MAX_RT option code in any Option
        Request option (see <xref target='RFC3315-22.7'/>) it sends.</t>

        <t>The DHCP server MAY include the INF_MAX_RT option in any response
        it sends to a client that has included the INF_MAX_RT option code in
        an Option Request option.  The INF_MAX_RT option is sent in the main
        body of the message to client, not as an encapsulated option in,
        e.g., an IA_NA, IA_TA, or IA_PD option.</t>

        <t>A DHCP client MUST ignore any INF_MAX_RT option values
        that are less than 60 or more than 86400.</t>

        <t>If a DHCP client receives a message containing an INF_MAX_RT option
        that has a valid value for INF_MAX_RT, the client MUST set its
        internal INF_MAX_RT parameter to the value contained in the
        INF_MAX_RT option. This value of INF_MAX_RT is then used by the
        retransmission mechanism defined in <xref target='RFC3315-14'/>
        and <xref target='RFC3315-18.1.5'/>.</t>

        <t>Updated INF_MAX_RT value applies only to the network interface on
        which the client received INF_MAX_RT option.</t>

      </section>

      <!-- ends: merged section 5. from RFC7083 -->

    </section>

    <!-- ends: "22 from line 3547-->

    <section title="Security Considerations">
      <!-- 23, line 4492-->

      <t>The threat to DHCP is inherently an insider threat (assuming a
      properly configured network where DHCPv6 ports are blocked on the
      perimeter gateways of the enterprise). Regardless of the gateway
      configuration, however, the potential attacks by insiders and outsiders
      are the same.</t>

      <t>Use of manually configured preshared keys for IPsec between relay
      agents and servers does not defend against replayed DHCP messages.
      Replayed messages can represent a DOS attack through exhaustion of
      processing resources, but not through mis-configuration or exhaustion of
      other resources such as assignable addresses.</t>

      <t>One attack specific to a DHCP client is the establishment of a
      malicious server with the intent of providing incorrect configuration
      information to the client. The motivation for doing so may be to mount a
      "man in the middle" attack that causes the client to communicate with a
      malicious server instead of a valid server for some service such as DNS
      or NTP. The malicious server may also mount a denial of service attack
      through misconfiguration of the client that causes all network
      communication from the client to fail.</t>

      <!-- Merged from the section 10 of RFC7083. -->
      <t>A malicious DHCP server might cause a client to set its SOL_MAX_RT
      and INF_MAX_RT parameters to an unreasonably high value with the
      SOL_MAX_RT and INF_MAX_RT options, which may cause an undue delay in a
      client completing its DHCP protocol transaction in the case no other
      valid response is received. Assuming the client also receives a response
      from a valid DHCP server, large values for SOL_MAX_RT and INF_MAX_RT
      will not have any effect.</t>

      <t>There is another threat to DHCP clients from mistakenly or
      accidentally configured DHCP servers that answer DHCP client requests
      with unintentionally incorrect configuration parameters.</t>

      <t>A DHCP client may also be subject to attack through the receipt of a
      Reconfigure message from a malicious server that causes the client to
      obtain incorrect configuration information from that server. Note that
      although a client sends its response (Renew or Information-request
      message) through a relay agent and, therefore, that response will only
      be received by servers to which DHCP messages are relayed, a malicious
      server could send a Reconfigure message to a client, followed (after an
      appropriate delay) by a Reply message that would be accepted by the
      client. Thus, a malicious server that is not on the network path between
      the client and the server may still be able to mount a Reconfigure
      attack on a client. The use of transaction IDs that are
      cryptographically sound and cannot easily be predicted will also reduce
      the probability that such an attack will be successful.</t>

      <t>The threat specific to a DHCP server is an invalid client
      masquerading as a valid client. The motivation for this may be for theft
      of service, or to circumvent auditing for any number of nefarious
      purposes.</t>

      <t>The threat common to both the client and the server is the resource
      "denial of service" (DoS) attack. These attacks typically involve the
      exhaustion of available addresses, or the exhaustion of CPU or network
      bandwidth, and are present anytime there is a shared resource.</t>

      <t>In the case where relay agents add additional options to Relay
      Forward messages, the messages exchanged between relay agents and
      servers may be used to mount a "man in the middle" or denial of service
      attack.</t>

      <t>This threat model does not consider the privacy of the contents of
      DHCP messages to be important. DHCP is not used to exchange
      authentication or configuration information that must be kept secret
      from other networks nodes.</t>

      <t>DHCP authentication provides for
      authentication of the identity of DHCP clients and servers, and for the
      integrity of messages delivered between DHCP clients and servers. DHCP
      authentication does not provide any privacy for the contents of DHCP
      messages.</t>

      <t>The Delayed Authentication protocol described in <xref target='RFC3315-21.4'/> uses a
      secret key that is shared between a client and a server. The use of a
      "DHCP realm" in the shared key allows identification of administrative
      domains so that a client can select the appropriate key or keys when
      roaming between administrative domains. However, the Delayed
      Authentication protocol does not define any mechanism for sharing of
      keys, so a client may require separate keys for each administrative
      domain it encounters. The use of shared keys may not scale well and does
      not provide for repudiation of compromised keys. This protocol is
      focused on solving the intradomain problem where the out-of-band
      exchange of a shared key is feasible.</t>

      <t>Because of the opportunity for attack through the Reconfigure
      message, a DHCP client MUST discard any Reconfigure message that does
      not include authentication or that does not pass the validation process
      for the authentication protocol.</t>

      <t>The Reconfigure Key protocol described in <xref target='RFC3315-21.5'/> provides
      protection against the use of a Reconfigure message by a malicious DHCP
      server to mount a denial of service or man-in-the-middle attack on a
      client. This protocol can be compromised by an attacker that can
      intercept the initial message in which the DHCP server sends the key to
      the client.</t>

      <t>Communication between a server and a relay agent, and communication
      between relay agents, can be secured through the use of IPsec, as
      described in <xref target='RFC3315-21.1'/>. The use of manual configuration and
      installation of static keys are acceptable in this instance because
      relay agents and the server will belong to the same administrative
      domain and the relay agents will require other specific configuration
      (for example, configuration of the DHCP server address) as well as the
      IPsec configuration.</t>
    </section>

    <!-- ends: "23 from line 4492-->

    <section title="IANA Considerations">
      <!-- 24, line 4595-->

      <t>This document defines several new name spaces associated with DHCPv6
      and DHCPv6 options:

      <list hangIndent="3" style="hanging">

      <t hangText="-"> Message types</t>

      <t hangText="-"> Status codes</t>

      <t hangText="-"> DUID</t>

      <t hangText="-"> Option codes</t>

      </list></t>

      <t>IANA has established a registry of values for each of these name
      spaces, which are described in the remainder of this section. These name
      spaces will be managed by the IANA and all will be managed separately
      from the name spaces defined for DHCPv4.</t>

      <t>New multicast addresses, message types, status codes, and DUID types
      are assigned via Standards Action <xref target="RFC2434"/>.</t>

      <t>New DHCP option codes are tentatively assigned after the
      specification for the associated option, published as an Internet Draft,
      has received expert review by a designated expert <xref
      target="RFC2434"/>. The final assignment of DHCP option codes is through
      Standards Action, as defined in <xref target="RFC2434"/>.</t>

      <t>This document also references three name spaces in <xref target='RFC3315-21'/> that
      are associated with the Authentication Option (<xref target='RFC3315-22.11'/>). These
      name spaces are defined by the authentication mechanism for DHCPv4 in
      <xref target="RFC3118"/>.</t>

      <t>The authentication name spaces currently registered by IANA will
      apply to both DHCPv6 and DHCPv4. In the future, specifications that
      define new Protocol, Algorithm and RDM mechanisms will explicitly define
      whether the new mechanisms are used with DHCPv4, DHCPv6 or both.</t>

      <section title="Multicast Addresses">
        <!-- 24.1, line 4634-->

        <t>Section 5.1 defines the following multicast addresses, which have
        been assigned by IANA for use by DHCPv6:

        <list hangIndent="48" style="hanging">

        <t hangText="   All_DHCP_Relay_Agents_and_Servers address:"> FF02::1:2</t>

        <t hangText="   All_DHCP_Servers address:"> FF05::1:3</t>
        </list></t>
      </section>

      <!-- ends: "24.1 from line 4634-->

      <section title="DHCP Message Types">
        <!-- 24.2, line 4644-->

        <t>IANA has recorded the following message types (defined in
        <xref target='RFC3315-5.3'/>). IANA will maintain the registry of DHCP message types.

        <list hangIndent="25" style="hanging">
          <t hangText="   SOLICIT">1</t>

          <t hangText="   ADVERTISE">2</t>

          <t hangText="   REQUEST">3</t>

          <t hangText="   CONFIRM">4</t>

          <t hangText="   RENEW">5</t>

          <t hangText="   REBIND">6</t>

          <t hangText="   REPLY">7</t>

          <t hangText="   RELEASE">8</t>

          <t hangText="   DECLINE">9</t>

          <t hangText="   RECONFIGURE">10</t>

          <t hangText="   INFORMATION-REQUEST">11</t>

          <t hangText="   RELAY-FORW">12</t>

          <t hangText="   RELAY-REPL">13</t>
        </list></t>
      </section>

      <!-- ends: "24.2 from line 4644-->

      <section title="DHCP Options">
        <!-- 24.3, line 4678-->

        <t>IANA has recorded the following option-codes (as defined in section
        <xref target='RFC3315-22'/>). IANA will maintain the registry of DHCP option codes.

        <list hangIndent="25" style="hanging">

            <t hangText="   OPTION_CLIENTID">1</t>

            <t hangText="   OPTION_SERVERID">2</t>

            <t hangText="   OPTION_IA_NA">3</t>

            <t hangText="   OPTION_IA_TA">4</t>

            <t hangText="   OPTION_IAADDR">5</t>

            <t hangText="   OPTION_ORO">6</t>

            <t hangText="   OPTION_PREFERENCE">7</t>

            <t hangText="   OPTION_ELAPSED_TIME">8</t>

            <t hangText="   OPTION_RELAY_MSG">9</t>

            <t hangText="   OPTION_AUTH">11</t>

            <t hangText="   OPTION_UNICAST">12</t>

            <t hangText="   OPTION_STATUS_CODE">13</t>

            <t hangText="   OPTION_RAPID_COMMIT">14</t>

            <t hangText="   OPTION_USER_CLASS">15</t>

            <t hangText="   OPTION_VENDOR_CLASS">16</t>

            <t hangText="   OPTION_VENDOR_OPTS">17</t>

            <t hangText="   OPTION_INTERFACE_ID">18</t>

            <t hangText="   OPTION_RECONF_MSG">19</t>

            <t hangText="   OPTION_RECONF_ACCEPT">20</t>

            <!-- Options incorporated from RFC7083 -->
            <t hangText="   OPTION_SOL_MAX_RT">82</t>

            <t hangText="   OPTION_INF_MAX_RT">83</t>
        </list></t>
      </section>

      <!-- ends: "24.3 from line 4678-->

      <section anchor='RFC3315-24.4' title="Status Codes">
        <!-- 24.4, line 4724-->

        <t>IANA has recorded the status codes defined in the following table.
        IANA will manage the definition of additional status codes in the
        future.</t>

	<texttable>

	  <ttcol>Name</ttcol>
	  <ttcol align="right">Code</ttcol>
	  <ttcol>Description</ttcol>

          <c>Success</c><c>0</c><c>Success.</c>

          <c>UnspecFail</c><c>1</c><c>Failure, reason unspecified; this
          status code is sent by either a client or a server to indicate
          a failure not explicitly specified in this document.</c>

          <c>NoAddrsAvail</c><c>2</c><c>Server has no addresses available
          to assign to the IA(s).</c>

          <c>NoBinding</c><c>3</c><c>Client record (binding) unavailable.</c>

          <c>NotOnLink</c><c>4</c><c>The prefix for the address is not
          appropriate for the link to which the client is attached.</c>

          <c>UseMulticast</c><c>5</c><c>Sent by a server to a client to
          force the client to send messages to the server using the
          All_DHCP_Relay_Agents_and_Servers address.</c>

	</texttable>
      </section>

      <!-- ends: "24.4 from line 4724-->

      <section title="DUID">
        <!-- 24.5, line 4750-->

        <t>IANA has recorded the following DUID types (as defined in
        <xref target='RFC3315-9.1'/>). IANA will manage the definition
        of additional DUID types in the future.

        <list hangIndent="25" style="hanging">

            <t hangText="   DUID-LLT">1</t>

            <t hangText="   DUID-EN">2</t>

            <t hangText="   DUID-LL">3</t>
        </list></t>
      </section>

      <!-- ends: "24.5 from line 4750-->
    </section>

    <!-- ends: "24 from line 4595-->

    <section title="Acknowledgments">
      <!-- 25, line 4764-->
      <t>The following people are authors of the original RFC3315:
      Ralph Droms, Jim Bound, Bernie Volz, Ted Lemon, Charles Perkins,
      and Mike Carney. This document is merely a refinement of their
      work and would not be possible without their original work</t>

      <t>The following acknowledgements are from the original RFC3315:</t>

      <t>Thanks to the DHC Working Group and the members of the IETF for their
      time and input into the specification. In particular, thanks also for
      the consistent input, ideas, and review by (in alphabetical order)
      Bernard Aboba, Bill Arbaugh, Thirumalesh Bhat, Steve Bellovin, A. K.
      Vijayabhaskar, Brian Carpenter, Matt Crawford, Francis Dupont, Richard
      Hussong, Kim Kinnear, Fredrik Lindholm, Tony Lindstrom, Josh
      Littlefield, Gerald Maguire, Jack McCann, Shin Miyakawa, Thomas Narten,
      Erik Nordmark, Jarno Rajahalme, Yakov Rekhter, Mark Stapp, Matt Thomas,
      Sue Thomson, Tatuya Jinmei and Phil Wells.</t>

      <t>Thanks to Steve Deering and Bob Hinden, who have consistently taken
      the time to discuss the more complex parts of the IPv6
      specifications.</t>

      <t>And, thanks to Steve Deering for pointing out at IETF 51 in London
      that the DHCPv6 specification has the highest revision number of any
      Internet Draft.</t>
    </section>

    <!-- ends: "25 from line 4764-->


  </middle>

  <back>
    <references title="Normative References">

      &RFC3646;

      &RFC4075;

      &RFC2136;

      <!-- Vixie, P., Ed., Thomson, S., Rekhter, Y. and J. Bound, "DynamicUpdates in the Domain Name System (DNS UPDATE)", RFC 2136, April

1997. -->

      &RFC2119;

      <!--  Bradner, S., "Key words for use in RFCs to Indicate RequirementLevels", BCP 14, RFC 2119, March 1997. -->

      &RFC2460;

      <!--  Deering, S. and R. Hinden, "Internet Protocol, Version 6 (IPv6)Specification", RFC 2460, December 1998. -->

      &RFC2464;

      <!--  Crawford, M., "Transmission of IPv6 Packets over EthernetNetworks", RFC 2464, December 1998. -->

      &RFC2373;

      <!--  Hinden, R. and S. Deering, "IP Version 6 AddressingArchitecture", RFC 2373, July 1998. -->

      &RFC3118;

      <!--  Droms, R., Ed. and W. Arbaugh, Ed., "Authentication forDHCP Messages", RFC 3118, June 2001. -->

      &RFC2401;

      <!--  Kent, S. and R. Atkinson, "Security Architecture for the InternetProtocol", RFC 2401, November 1998. -->

      <reference anchor="IANA-PEN">
        <front>
          <title>Private Enterprise Numbers registry
          http://www.iana.org/assignments/enterprise-numbers
          </title>

          <author>
            <organization>IANA</organization>
          </author>

          <date/>
        </front>
      </reference>

      &RFC1305;

      <!--  Mills, D., "Network Time Protocol (Version 3)Specification, Implementation", RFC 1305, March 1992. -->

      &RFC2104;

      <!--  Krawczyk, H., Bellare, M. and R. Canetti, "HMAC: Keyed-Hashingfor Message Authentication", RFC 2104, February 1997. -->

      &RFC2434;

      <!-- Narten, T. and H. Alvestrand, "Guidelines for Writing an IANAConsiderations Section in RFCs", BCP 26, RFC 2434, October 1998.

-->

      &RFC1035;

      <!-- Mockapetris, P., "Domain names - implementation andspecification", RFC 1035, November 1987. -->

      &RFC2461;

      <!-- Narten, T., Nordmark, E. and W. Simpson, "Neighbor Discovery forIP Version 6 (IPv6)", RFC 2461, December 1998. -->

      &RFC3041;

      <!-- Narten, T. and R. Draves, "Privacy Extensions for StatelessAddress Autoconfiguration in IPv6", RFC 3041, January 2001. -->

      &RFC0768;

      <!-- Postel, J., "User Datagram Protocol", STD 6, RFC 768, August 1980. -->

      &RFC0826;

      <!-- Plummer, D.C., "Ethernet Address Resolution Protocol:  Orconverting network protocol addresses to 48.bit Ethernet addressfor

transmission on Ethernet hardware", STD 37, RFC 826, November1982. -->

      &RFC2462;

      <!-- Thomson, S. and T. Narten, "IPv6 Stateless AddressAutoconfiguration", RFC 2462, December 1998. -->

      &RFC1321;

      <!-- Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321, April1992. -->

      &RFC2131;

      <!-- Droms, R., "Dynamic Host Configuration Protocol", RFC 2131, March1997. -->

      &RFC2132;

      <!-- Alexander, S. and R. Droms, "DHCP Options and BOOTP VendorExtensions", RFC 2132, March 1997. -->

	&RFC6355;

    </references>

    <!-- Let's briefly document relevant changes against 3315 here -->
    <section title="Changes since RFC3315">

      <t>
        <list style="numbers">

          <t>Incorporated RFC3315 erratas (ids: 294, 1373, 2928, 1815, 3577,
          2509, 295)</t>

          <t>Partially incorporated RFC3315 errata id 2472 (place other IA options
          if NoAddrsAvail is sent in Advertise)</t>

          <t>Clarified section 21.4.1 of RFC3315 by defining length of "key ID" field
          and specifying that 'DHCP realm' is Domain Name encoded as per section 8 of RFC3315.
          Ticket 43.</t>

          <t>Added DUID-UUID and reference to RFC6355. Ticket 54.</t>

          <t>Specified a minimum length for the DUID in section "9.1. DUID Contents".
          Ticket 39.</t>

          <t>Removed the use of term "sub-options" from section "19.1.1. Creation and
          Transmission of Reconfigure Messages". Ticket 40.</t>

          <t>Added text to section 22.6 "IA Address Option" about the usage of
          unspecified address to express the client hints for Preferred and Valid
          lifetimes. Ticket 45.</t>

          <t>Updated text in 21.4.2 of RFC3315 ("Message Validation") as suggested in
          section 3.1 of draft-ietf-dhc-dhcpv6-clarify-auth-01. Ticket 87.</t>

          <t>Merged RFC7083, "Modification to Default Values of SOL_MAX_RT and
          INF_MAX_RT", into this document. Ticket #51.</t>

          <t>Incorporated RFC3315 errata (id 2471), into section 17.1.3. Ticket 25.</t>
          
          <t>Added text that relay agents MUST NOT modify the relayed message to section
          20.1.2. Ticket 57.</t>
          
          <t>Modified the text in section 21.4.4.5, Receiving Reply Messages, to remove
          special treatment of a Reply validation failure (client ignores message).
          Ticket 89.</t>

          <t>Appendix C updated: Auth option is no longer allowed in Relay-Forward and
          Relay-Reply messages, ORO is no longer allowed in Confirm, Release and Decline
          messages; Preference option is no longer allowed in Reply messages (only in
          Advertise). Ticket 10.</t>

          <t>Removed "silently" from several instances of "silently ignores" or "silently"
          discards. It it up to software vendor if and how to log such events (debug log
          message, event log, message pop-up etc.). Ticket 50.</t>

          <t>Clarified that: there should be no more that one instance of Vendor Class
          option with a given Enterprise Number; that one instance of Vendor Class can
          contain multiple encapsulated options; the same applies to Vendor Specific
          Information option. Ticket #22.</t>

          <t>Clarified relay agent definition. Ticket #12.</t>
          
          <t>Changed MRC to use REL_MAX_RC-1 and DEC_MAX_RC-1 to clarify MRC to
          be retransmission count. Ticket #84.</t>

        </list>

      </t>

    </section>

    <!-- Let's briefly document relevant changes against 3633 here -->
    <section title="Changes since RFC3633">

      <t>
        <list style="numbers">
          <t>Incorporated RFC3633 erratas (ids: 248, 1880, 2468, 2469, 2470, 3736)</t>
          <t>...</t>
        </list>
      </t>

    </section>

<!-- ** This should be an appendix tag but that does not yet seem to work! -->
<!-- tomek: I managed to get it work. The trick was to move section from <middle>
     to <back> -->

        <section title="Appearance of Options in Message Types">

        <t>The following table indicates with a "*" the options are allowed in
        each DHCP message type:</t>

<figure>
<artwork>
        Client Server IA_NA  Option Pref Elap. Relay Auth. Server
          ID     ID   IA_TA  Request     Time   Msg.       Unicast
Solicit   *             *      *           *           *
Advert.   *      *      *            *                 *
Request   *      *      *      *           *           *
Confirm   *             *                  *           *
Renew     *      *      *      *           *           *
Rebind    *             *      *           *           *
Decline   *      *      *                  *           *
Release   *      *      *                  *           *
Reply     *      *      *                              *     *
Reconf.   *      *             *                       *
Inform.   * (see note)         *           *           *
R-forw.                                          *
R-repl.                                          *
</artwork>
</figure>

          <t>NOTE:</t>

        <t>Only included in Information-Request messages that are sent in
        response to a Reconfigure (see section 19.4.3).</t>

<figure>
<artwork>
        Status  Rap. User  Vendor Vendor Inter. Recon. Recon. SOL_MAX_RT
         Code  Comm. Class Class  Spec.    ID    Msg.  Accept INF_MAX_RT
Solicit          *     *     *      *                    *
Advert.   *            *     *      *                    *        *
Request                *     *      *                    *
Confirm                *     *      *
Renew                  *     *      *                    *
Rebind                 *     *      *                    *
Decline                *     *      *
Release                *     *      *
Reply     *      *     *     *      *                    *        *
Reconf.                                           *
Inform.                *     *      *                    *
R-forw.                *     *      *      *
R-repl.                *     *      *      *
</artwork>
</figure>

        </section>

<!-- ** This should be an appendix tag but that does not yet seem to work! -->
        <section title="Appearance of Options in the Options Field of DHCP Options">

        <t>The following table indicates with a "*" where options can appear
        in the options field of other options:</t>

<figure>
<artwork>
             Option  IA_NA/ IAADDR Relay  Relay
             Field   IA_TA         Forw.  Reply
Client ID      *
Server ID      *
IA_NA/IA_TA    *
IAADDR                 *
ORO            *
Preference     *
Elapsed Time   *
Relay Message                        *      *
Authentic.     *
Server Uni.    *
Status Code    *       *       *
Rapid Comm.    *
User Class     *
Vendor Class   *
Vendor Info.   *
Interf. ID                           *      *
Reconf. MSG.   *
Reconf. Accept *
</artwork>
</figure>

        <t>Note: "Relay Forw" / "Relay Reply" options appear in the options
        field of the message but may only appear in these messages.</t>

        </section>

  </back>
</rfc>
<!-- generated from file samples/rfc3315.nroff with nroff2xml 0.0.2 by Tomek Mrugalski -->
