<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-ietf-dhc-rfc3315bis-08"
     ipr="pre5378Trust200902" obsoletes="3315,3633,3736,4242,7083,7550">
  <front>
    <title abbrev="DHCP for IPv6">Dynamic Host Configuration Protocol for IPv6
    (DHCPv6) bis</title>

    <author fullname="Tomek Mrugalski" initials="T." role="editor"
            surname="Mrugalski">
      <organization abbrev="ISC">Internet Systems Consortium,
      Inc.</organization>

      <address>
        <postal>
          <street>950 Charter Street</street>

          <city>Redwood City</city>

          <region>CA</region>

          <code>94063</code>

          <country>USA</country>
        </postal>

        <email>tomasz.mrugalski@gmail.com</email>
      </address>
    </author>

    <author fullname="Marcin Siodelski" initials="M" surname="Siodelski">
      <organization abbrev="ISC">Internet Systems Consortium,
      Inc.</organization>

      <address>
        <postal>
          <street>950 Charter St.</street>

          <city>Redwood City</city>

          <region>CA</region>

          <code>94063</code>

          <country>USA</country>
        </postal>

        <email>msiodelski@gmail.com</email>
      </address>
    </author>

    <author fullname="Bernie Volz" initials="B" surname="Volz">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>1414 Massachusetts Ave</street>

          <city>Boxborough, MA 01719</city>

          <region></region>

          <code></code>

          <country>USA</country>
        </postal>

        <email>volz@cisco.com</email>
      </address>
    </author>

    <author fullname="Andrew Yourtchenko" initials="A" surname="Yourtchenko">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>De Kleetlaan, 7</street>

          <city>Diegem</city>

          <code>B-1831</code>

          <country>Belgium</country>
        </postal>

        <email>ayourtch@cisco.com</email>
      </address>
    </author>

    <author fullname="Michael C. Richardson" initials="M."
            surname="Richardson">
      <organization abbrev="SSW">Sandelman Software Works</organization>

      <address>
        <postal>
          <street>470 Dawson Avenue</street>

          <city>Ottawa</city>

          <region>ON</region>

          <code>K1Z 5V7</code>

          <country>CA</country>
        </postal>

        <email>mcr+ietf@sandelman.ca</email>

        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <author fullname="Sheng Jiang" initials="S." surname="Jiang">
      <organization abbrev="Huawei">Huawei Technologies Co.,
      Ltd</organization>

      <address>
        <postal>
          <street>Q14, Huawei Campus, No.156 Beiqing Road</street>

          <city>Hai-Dian District, Beijing, 100095</city>

          <country>P.R. China</country>
        </postal>

        <email>jiangsheng@huawei.com</email>
      </address>
    </author>

    <author fullname="Ted Lemon" initials="T" surname="Lemon">
      <organization abbrev="Nominum">Nominum, Inc.</organization>

      <address>
        <postal>
          <street>800 Bridge St.</street>

          <city>Redwood City</city>

          <region>CA</region>

          <code>94043</code>

          <country>USA</country>
        </postal>

        <email>Ted.Lemon@nominum.com</email>
      </address>
    </author>

    <author fullname="Timothy Winters" initials="T" surname="Winters">
      <organization abbrev="UNH-IOL">University of New Hampshire, Interoperability Lab (UNH-IOL)</organization>

      <address>
        <postal>

          <street/>

          <city>Durham, NH</city>

          <region></region>

          <code></code>

          <country>USA</country>
        </postal>

        <email>twinters@iol.unh.edu</email>
      </address>
    </author>

    <date />

    <area>Internet</area>

    <workgroup>Dynamic Host Configuration (DHC)</workgroup>

    <keyword>DHCPv6</keyword>

    <keyword>IPv6</keyword>

    <keyword>DHCP</keyword>

    <!--  SECTION 0:  Abstract                      -->

    <abstract>
      <t>This document describes the Dynamic Host Configuration Protocol for
      IPv6 (DHCPv6): an extensible mechanism for configuring nodes with
      network configuration parameters, IP addresses, and prefixes. Parameters
      can be provided statelessly, or in combination with stateful assignment
      of one or more IPv6 addresses and/or IPv6 prefixes. DHCPv6 can operate
      either in place of or in addition to stateless address autoconfiguration
      (SLAAC).</t>

      <t>This document updates the text from RFC3315, the original DHCPv6
      specification, and incorporates prefix delegation (RFC3633),
      stateless DHCPv6 (RFC3736), an option to specify an upper
      bound for how long a client should wait before refreshing information
      (RFC4242), a mechanism for throttling DHCPv6 clients when DHCPv6
      service is not available (RFC7083), and clarifies the interactions
      between modes of operation (RFC7550).
      As such, this document obsoletes RFC3315, RFC3633, RFC3736, RFC4242,
      RFC7083, and RFC7550.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro-and-overview" title="Introduction">
      <!-- 1, line 230-->

      <t>This document describes DHCP for IPv6 (DHCPv6), a client/server
      protocol that provides managed configuration of devices. Relay agent
      functionality is also defined for enabling communication between clients
      and servers that are not on the same link.</t>

      <t>DHCPv6 can provide a device with addresses assigned by a DHCPv6
      server and other configuration information, which are carried in
      options. DHCPv6 can be extended through the definition of new options to
      carry configuration information not specified in this document.</t>

      <t>DHCPv6 also provides a mechanism for automated delegation of
      IPv6 prefixes using DHCPv6, originally specified in <xref target="RFC3633"/>.
      Through this mechanism, a delegating router
      can delegate prefixes to requesting routers. Use of this mechanism is
      specified as part of the <xref target="RFC7084"/> and by <xref
      target="TR-187"/>.</t>

      <t>DHCPv6 can also provide only other configuration options
      (i.e., no addresses or prefixes). That implies that the
      server does not have to track any state, and thus this mode is called
      stateless DHCPv6. Mechanisms necessary to support stateless DHCPv6 are
      much smaller than to support stateful DHCPv6.</t>

      <t>The remainder of this introduction summarizes the relationship to the
      previous DHCPv6 standards in <xref target="previous-dhcp6"/> and
      clarifies the stance with regards to DHCPv4 in <xref target="dhcpv4"/>.
      <xref target="Client-Server-Exchanges"/> describes the message exchange mechanisms
      to illustrate DHCP operation rather than provide an exhaustive
      list of all possible interactions and <xref target="OpModes"/>
      provides an overview of common operational models.
      <xref target="configuration-exchange"/> explains client and server operation
      in detail.</t>

      <section anchor="previous-dhcp6"
               title="Relation to Previous DHCPv6 standards">
        <t>The initial specification of DHCPv6 was defined in <xref
        target="RFC3315"></xref> and a number of follow up documents were
        published over the years:
        IPv6 Prefix Options for Dynamic Host Configuration Protocol (DHCP) version 6
        <xref target="RFC3633"></xref>, Stateless Dynamic Host Configuration Protocol
        (DHCP) Service for IPv6s <xref target="RFC3736"></xref>, Information Refresh
        Time Option for Dynamic Host Configuration Protocol for IPv6 (DHCPv6)
        <xref target="RFC4242"/>, Modification to
        Default Values of SOL_MAX_RT and INF_MAX_RT <xref target="RFC7083"/>, and
        Issues and Recommendations with Multiple Stateful DHCPv6 Options
        <xref target="RFC7550"/>. This document
        provides a unified, corrected, and cleaned up definition of DHCPv6
        that also covers all errata filled against older RFCs. As such, it
        obsoletes a number of aforementioned RFCs. And, there are a small
        number of mechanisms that were obsoleted, listed in <xref
        target="obsolete"></xref>. Also see <xref target="ChangeSummary"/>.</t>
      </section>

      <section anchor="dhcpv4" title="Relation to DHCP in IPv4">
        <t>The operational models and relevant configuration information for
        DHCPv4 (<xref target="RFC2131"/> and <xref target="RFC2132"/>)
        and DHCPv6 are sufficiently different that integration between the two
        services is not included in this document. <xref
        target="RFC3315"></xref> suggested that future work might be to extend
        DHCPv6 to carry IPv4 address and configuration information. However,
        the current consensus of the IETF is that DHCPv4 should be used rather
        than DHCPv6 when conveying IPv4 configuration information to nodes.
        For IPv6-only networks, <xref target="RFC7341"></xref> describes a
        transport mechanism to carry DHCPv4 messages using the DHCPv6 protocol
        for the dynamic provisioning of IPv4 address and configuration
        information.</t>

        <t>Merging DHCPv4 and DHCPv6 configuration is out of scope of
        this document. <xref target="RFC4477"/> discusses some issues
        and possible strategies for running DHCPv4 and DHCPv6 services
        together. While this document is a bit dated, it provides a
        good overview of the issues at hand.</t>
      </section>

      <!-- ends: "1.3 from line 323-->
    </section>

    <!-- ends: "1 from line 230-->

    <section anchor="requirements" title="Requirements">
      <!-- 2, line 343-->

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/> when they
      appear in ALL CAPS.  When these words are not in ALL CAPS (such as
      "should" or "Should"), they have their usual English meanings, and
      are not to be interpreted as <xref target="RFC2119"/> key words.</t>

      <t>This document also makes use of internal conceptual variables to
      describe protocol behavior and external variables that an implementation
      must allow system administrators to change. The specific variable names,
      how their values change, and how their settings influence protocol
      behavior are provided to demonstrate protocol behavior. An
      implementation is not required to have them in the exact form described
      here, so long as its external behavior is consistent with that described
      in this document.</t>
    </section>

    <!-- ends: "2 from line 343-->

    <section anchor="background" title="Background">
      <!-- 3, line 360-->

      <t>The IPv6 Specification provides the base architecture and design of
      IPv6. Related work in IPv6 that would best serve an implementer to study
      includes the IPv6 Specification <xref target="RFC2460"></xref>, the IPv6
      Addressing Architecture <xref target="RFC4291"></xref>, IPv6 Stateless
      Address Autoconfiguration <xref target="RFC4862"></xref>, and IPv6 Neighbor
      Discovery Processing <xref target="RFC4861"></xref>. These specifications
      enable DHCP to build upon the IPv6 work to provide robust stateful
      autoconfiguration.</t>

      <t>The IPv6 Addressing Architecture specification <xref
      target="RFC4291"></xref> defines the address scope that can be used in
      an IPv6 implementation, and the various configuration architecture
      guidelines for network designers of the IPv6 address space. Two
      advantages of IPv6 are that support for multicast is required and nodes
      can create link-local addresses during initialization. The availability
      of these features means that a client can use its link-local address and
      a well-known multicast address to discover and communicate with DHCP
      servers or relay agents on its link.</t>

      <t>IPv6 Stateless Address Autoconfiguration <xref
      target="RFC4862"></xref> specifies procedures by which a node may
      autoconfigure addresses based on router advertisements <xref
      target="RFC4861"></xref>, and the use of a valid lifetime to support
      renumbering of addresses on the Internet. Compatibility with stateless address
      autoconfiguration is a design requirement of DHCP.</t>

      <t>IPv6 Neighbor Discovery <xref target="RFC4861"></xref> is the node
      discovery protocol in IPv6 which replaces and enhances functions of ARP
      <xref target="RFC0826"></xref>. To understand IPv6 and stateless address
      autoconfiguration, it is strongly recommended that implementers
      understand IPv6 Neighbor Discovery.</t>

    </section>

    <!-- ends: "3 from line 360-->

    <section anchor="terminology" title="Terminology">
      <!-- 4, line 402-->

      <t>This section defines terminology specific to IPv6 and DHCP used in
      this document.</t>

      <section title="IPv6 Terminology">
        <!-- 4.1, line 408-->

        <t>IPv6 terminology relevant to this specification from the IPv6
        Protocol <xref target="RFC2460"></xref>, IPv6 Addressing Architecture
        <xref target="RFC4291"></xref>, and IPv6 Stateless Address
        Autoconfiguration <xref target="RFC4862"></xref> is included
        below.</t>

        <t><list hangIndent="26" style="hanging">
            <t hangText="address">An IP layer identifier for an interface or a
            set of interfaces.</t>

            <t hangText="host">Any node that is not a router.</t>

            <t hangText="IP">Internet Protocol Version 6 (IPv6). The terms
            IPv4 and IPv6 are used only in contexts where it is necessary to
            avoid ambiguity.</t>

            <t hangText="interface">A node's attachment to a link.</t>

            <t hangText="link">A communication facility or medium over which
            nodes can communicate at the link layer, i.e., the layer
            immediately below IP. Examples are Ethernet (simple or bridged);
            PPP and PPPoE links; and Internet (or higher) layer "tunnels",
            such as tunnels over IPv4 or IPv6 itself.</t>

            <t hangText="link-layer identifier">A link-layer identifier for an
            interface. Examples include IEEE 802 addresses for Ethernet or
            Token Ring network interfaces, and E.164 addresses for ISDN
            links.</t>

            <t hangText="link-local address">An IPv6 address having a
            link-only scope, indicated by having the prefix (fe80::/10), that
            can be used to reach neighboring nodes attached to the same link.
            Every interface has a link-local address.</t>

            <t hangText="multicast address">An identifier for a set of
            interfaces (typically belonging to different nodes). A packet sent
            to a multicast address is delivered to all interfaces identified
            by that address.</t>

            <t hangText="neighbor">A node attached to the same link.</t>

            <t hangText="node">A device that implements IP.</t>

            <t hangText="packet">An IP header plus payload.</t>

            <t hangText="prefix">The initial bits of an address, or a set of
            IP addresses that share the same initial bits.</t>

            <t hangText="prefix length">The number of bits in a prefix.</t>

            <t hangText="router">A node that forwards IP packets not
            explicitly addressed to itself.</t>

            <t hangText="unicast address">An identifier for a single
            interface. A packet sent to a unicast address is delivered to the
            interface identified by that address.</t>
          </list></t>
      </section>

      <!-- ends: "4.1 from line 408-->

      <section anchor="dhcp-terminology" title="DHCP Terminology">
        <!-- 4.2, line 478-->

        <t>Terminology specific to DHCP can be found below.</t>

        <t><list hangIndent="26" style="hanging">
            <t hangText="appropriate to the link">An address is "appropriate
            to the link" when the address is consistent with the DHCP server's
            knowledge of the network topology, prefix assignment and address
            assignment policies.</t>

            <t hangText="binding">A binding (or, client binding) is a group of
            server data records containing the information the server has
            about the addresses or delegated prefixes in an IA or configuration information
            explicitly assigned to the client. Configuration information that
            has been returned to a client through a policy, such as the
            information returned to all clients on the same link, does not
            require a binding. A binding containing information about an IA is
            indexed by the tuple &lt;DUID, IA-type, IAID&gt; (where IA-type is
            the type of lease in the IA; for example, temporary). A binding
            containing configuration information for a client is indexed by
            &lt;DUID&gt;.</t>

            <t hangText="configuration parameter">An element of the
            configuration information set on the server and delivered to the
            client using DHCP. Such parameters may be used to carry
            information to be used by a node to configure its network
            subsystem and enable communication on a link or internetwork, for
            example.</t>

            <t hangText="container option">An option that encapsulates other
            options (for example, the IA_NA may contain IAADDR options).</t>

            <t hangText="delegating router">The router that acts as a DHCP
            server, and responds to requests for delegated prefixes. This document
            primarily uses the term "DHCP server" or "server" when
            discussing the "delegating router" functionality of prefix
            delegation (see <xref target="intro-and-overview"/>.</t>

            <t hangText="DHCP">Dynamic Host Configuration Protocol for IPv6.
            The terms DHCPv4 and DHCPv6 are used only in contexts where it is
            necessary to avoid ambiguity.</t>

            <t hangText="DHCP client (or client)">A node that initiates
            requests on a link to obtain configuration parameters from one or
            more DHCP servers. Depending on the purpose of the client, it may
            feature the requesting router functionality, if it supports prefix
            delegation.</t>

            <t hangText="DHCP domain">A set of links managed by DHCP and
            operated by a single administrative entity.</t>

            <t hangText="DHCP relay agent (or relay agent)">A node that acts
            as an intermediary to deliver DHCP messages between clients and
            servers. In certain configurations there may be more than one
            relay agent between clients and servers, so a relay agent may send
            DHCP messages to another relay agent.</t>

            <t hangText="DHCP server (or server)">A node that responds to
            requests from clients, and may or may not be on the same link as
            the client(s). Depending on its capabilities, it may also feature
            the functionality of delegating router, if it supports prefix
            delegation.</t>

            <t hangText="DUID">A DHCP Unique IDentifier for a DHCP
            participant; each DHCP client and server has exactly one DUID. See
            <xref target="RFC3315-9"></xref> for details of the ways in which
            a DUID may be constructed.</t>

            <t hangText="IA">Identity Association: A collection of leases
            assigned to a client. Each IA has an associated IAID. A client may
            have more than one IA assigned to it; for example, one for each of
            its interfaces. Each IA holds one type of lease; for example, an
            identity association for temporary addresses (IA_TA) holds
            temporary addresses (see "identity association for temporary
            addresses") and identity association for prefix delegation (IA_PD)
            holds delegated prefixes. Throughout this document, "IA" is used
            to refer to an identity association without identifying the type
            of a lease in the IA. At the time of writing this document, there
            are three IA types defined: IA_NA, IA_TA and IA_PD. New IA types may
            be defined in the future.</t>

            <t hangText="IAID">Identity Association IDentifier: An identifier
            for an IA, chosen by the client. Each IA has an IAID, which is
            chosen to be unique among IAIDs for IAs of a specific type,
            belonging to that client.</t>

            <t hangText="IA_NA">Identity association for Non-temporary
            Addresses: An IA that carries assigned addresses that are not
            temporary addresses (see "IA_TA").</t>

            <t hangText="IA_TA">Identity Association for Temporary Addresses:
            An IA that carries temporary addresses (see <xref
            target="RFC4941"></xref>).</t>

            <t hangText="IA_PD">Identity Association for Prefix Delegation: An
            IA that carries delegated prefixes.</t>

            <t hangText="lease">A contract by which the server grants the use
            of an address or delegated prefix to the client for a specified
            period of time.</t>

            <t hangText="message">A unit of data carried as the payload of a
            UDP datagram, exchanged among DHCP servers, relay agents and
            clients.</t>

            <t hangText="Reconfigure key">A key supplied to a client by a
            server used to provide security for Reconfigure messages (see
            <xref target="RFC3315-5.3"/>).</t>           

            <t hangText="relaying">A DHCP relay agent relays DHCP messages
            between DHCP participants.</t>

            <t hangText="requesting router">The router that acts as a DHCP
            client and is requesting prefix(es) to be assigned. This document
            primarily uses the term "DHCP client" or "client" when
            discussing the "requesting router" functionality of prefix
            delegation (see <xref target="intro-and-overview"/>.</t>

            <t hangText="retransmission">Another attempt to send the same
            DHCP message by a client or server, as a result of not
            receiving a valid response to the previously sent messages.
            The retransmitted message is typically modified prior to sending,
            as required by the DHCP specifications. In particular, the
            client updates the value of the Elapsed Time option in the
            retransmitted message.</t>
             
            <t hangText="RKAP">The Reconfiguration Key Authentication
            Protocol, see <xref target="reconfigure-protocol"/>.</t>               

            <t hangText="singleton option">An option that is allowed to appear
            only once as a the top-level option or at any encapsulation level.
            Most options are singletons.</t>

            <t hangText="T1">The time at which the client contacts the
            server from which the addresses in the IA_NA or prefixes in
            the IA_PD were obtained to extend the lifetimes of the
            addresses assigned to the IA_NA or prefixes delegated to the
            IA_PD.</t>

            <t hangText="T2">The time at which the client contacts any
            available server to extend the lifetimes of the addresses 
            assigned to the IA_NA or prefixes delegated to the IA_PD.</t>

            <t hangText="top-level option">An option conveyed in a DHCP
            message directly, i.e., not encapsulated in any other option, as
            described in Section 9 of <xref target="RFC7227"></xref>.</t>

            <t hangText="transaction ID">An opaque value used to match
            responses with replies initiated either by a client or server.</t>
          </list></t>
      </section>

      <!-- ends: "4.2 from line 478-->
    </section>

    <!-- ends: "4 from line 402-->

  <section anchor="Client-Server-Exchanges"
           title="Client-Server Exchanges">
     <!-- 1.1, line 260-->

     <t>Clients and servers exchange DHCP messages using UDP <xref
     target="RFC0768"></xref>. The client uses a link-local address or
     addresses determined through other mechanisms for transmitting and
     receiving DHCP messages.</t>

     <t>A DHCP client sends most messages using a reserved, link-scoped
     multicast destination address so that the client need not be
     configured with the address or addresses of DHCP servers.</t>

     <t>To allow a DHCP client to send a message to a DHCP server that is
     not attached to the same link, a DHCP relay agent on the client's link
     will relay messages between the client and server. The operation of
     the relay agent is transparent to the client and the discussion of
     message exchanges in the remainder of this section will omit the
     description of message relaying by relay agents.</t>

     <t>Once the client has determined the address of a server, it may
     under some circumstances send messages directly to the server using
     unicast.</t>

     <!-- ends: "1.1 from line 260-->

      <section anchor="RFC3315-1.2"
               title="Client-server Exchanges Involving Two Messages">
        <!-- 1.2, line 284-->

        <t>When a DHCP client does not need to have a DHCP server assign it IP
        addresses or delegated prefixes, the client can obtain other configuration information such as a
        list of available DNS servers <xref target="RFC3646"></xref> or NTP
        servers <xref target="RFC4075"></xref> through a single message and
        reply exchange with a DHCP server. To obtain other configuration
        information the client first sends an Information-request message to
        the All_DHCP_Relay_Agents_and_Servers multicast address. Servers
        respond with a Reply message containing the other configuration information
        for the client.</t>

        <t>When a server has addresses and/or delegated prefixes and
        other configuration
        information committed to a client, the client and server may be able
        to complete the exchange using only two messages, instead of four
        messages as described in the next section. In this case, the client
        sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers multicast address
        requesting the assignment of addresses and/or delegated prefixes and other configuration
        information. This message includes an indication (the Rapid Commit option) that the client is
        willing to accept an immediate Reply message from the server. The
        server that is willing to commit the assignment of addresses and/or
        delegated prefixes to the client immediately responds with a Reply
        message. The configuration information and the addresses and/or
        delegated prefixes in the Reply message are then
        immediately available for use by the client.</t>

        <t>Each address or delegated prefix assigned to the client has associated preferred and
        valid lifetimes specified by the server. To request an extension of
        the lifetimes assigned to an address or delegated prefix, the client sends a Renew message
        to the server. The server sends a Reply message to the client with the
        new lifetimes, allowing the client to continue to use the address or
        delegated prefix without interruption. If the server is unable to extend
        the lifetime of an address or delegated prefix, it indicates this by
        returning the address or delegated prefix with lifetimes of 0. At the same
        time, the server may assign other addresses or delegated prefixes.</t>

        <t>There are additional two message exchanges between the client and
        server described later in this document.</t>
      </section>

      <!-- ends: "1.2 from line 284-->

      <section anchor="RFC3315-1.3"
               title="Client-server Exchanges Involving Four Messages">
        <!-- 1.3, line 323-->

        <t>To request the assignment of one or more addresses and/or delegated prefixes, a client
        first locates a DHCP server and then requests the assignment of
        addresses and/or delegated prefixes and other configuration information from the server. The
        client sends a Solicit message to the
        All_DHCP_Relay_Agents_and_Servers multicast address to find available DHCP
        servers. Any server that can meet the client's requirements responds
        with an Advertise message. The client then chooses one of the servers
        and sends a Request message to the server asking for confirmed
        assignment of addresses and/or delegated prefixes and other configuration information. The
        server responds with a Reply message that contains the confirmed
        addresses, delegated prefixes, and configuration.</t>

        <t>As described in the previous section, the client can also request an
        extension of the lifetimes assigned to addresses or delegated prefixes
        (this is a two message exchange).</t>

      </section>
      <!-- 1.3, line 323-->

      <section title="Server-client Exchanges">
          <t>A server that has previously communicated with a client and negotiated
          for the client to listen for Reconfigure messages, may send the client
          a Reconfigure message to initiate the client to updates its configuration
          by sending an Information-request, Renew, or Rebind message. The client then
          performs the earlier described two message exchange. This can be used to
          expedite configuration changes to a client, such as the need to renumber
          a network (see <xref target="RFC6879"/>).
          </t>

      </section>

    </section>

    <section anchor="OpModes" title="Operational Models">
      <t>This section describes some of the current most common DHCP
      operational models. The described models are not mutually exclusive and
      are sometimes used together. For example, a device may start in stateful
      mode to obtain an address, and at a later time when an application is
      started, request additional parameters using stateless mode.</t>

      <t>This document assumes that the DHCP servers and the client,
      communicating with the servers via specific interface, belong to a
      single provisioning domain.</t>

      <section anchor="OpModes-Stateless" title="Stateless DHCP">
        <t>Stateless DHCP <xref target="RFC3736"></xref> is used when DHCP is
        not used for obtaining a lease, but a node (DHCP client) desires one
        or more DHCP "other configuration" parameters, such as a list of DNS
        recursive name servers or DNS domain search lists <xref
        target="RFC3646"></xref>. Stateless may be used when a node initially
        boots or at any time the software on the node requires some missing or
        expired configuration information that is available via DHCP.</t>

        <t>This is the simplest and most basic operation for DHCP and requires
        a client (and a server) to support only two messages -
        Information-request and Reply. Note that DHCP servers and relay agents
        typically also need to support the Relay-forward and Relay-reply messages
        to accommodate operation when clients and servers are not on the same
        link.</t>
      </section>

      <section anchor="OpModes-NA"
               title="DHCP for Non-Temporary Address Assignment">
        <t>This model of operation was the original motivation for DHCP and is
        the "stateful address autoconfiguration protocol" for IPv6 which is discussed in <xref
        target="RFC2462"></xref>. It is appropriate for situations where
        stateless address autoconfiguration alone is insufficient or
        impractical, e.g., because of network policy, additional requirements
        such as dynamic updates to the DNS, or client-specific requirements.</t>

        <t>The model of operation for non-temporary address assignment is as
        follows. The server is provided with prefixes from which it may
        allocate addresses to clients, as well as any related network topology
        information as to which prefixes are present on which links. A client
        requests a non-temporary address to be assigned by the server. The
        server allocates an address or addresses appropriate for the link on
        which the client is connected. The server returns the allocated
        address or addresses to the client.</t>

        <t>Each address has an associated preferred and valid lifetime, which
        constitutes an agreement about the length of time over which the
        client is allowed to use the address. A client can request an
        extension of the lifetimes on an address and is required to terminate
        the use of an address if the valid lifetime of the address
        expires.</t>

        <t>Typically clients request other configuration parameters, such as
        the DNS name server addresses and domain search lists, when requesting
        addresses.</t>
           
        <t>Clients can also request more than one address or set of
         addresses (see <xref target="RFC3315-10"/>).</t>
      </section>

      <section anchor="OpModes-PD" title="DHCP for Prefix Delegation">
        <t>The prefix delegation mechanism, originally described in <xref
        target="RFC3633"></xref>, is another stateful mode of operation and
        was originally intended for simple delegation of prefixes from a delegating router
        (DHCP server) to requesting routers (DHCP clients). It is appropriate
        for situations in which the delegating router does not have knowledge
        about the topology of the networks to which the requesting router is
        attached, and the delegating router does not require other information
        aside from the identity of the requesting router to choose a prefix
        for delegation. For example, these options would be used by a service
        provider to assign a prefix to a Customer Edge Router device acting as
        a router between the subscriber's internal network and the service
        provider's core network.</t>

        <t>The design of this prefix delegation mechanism meets the
        requirements for prefix delegation in <xref
        target="RFC3769"></xref>.</t>

        <t>While <xref target="RFC3633"/> assumed that the DHCP client
        is a router (hence use of "requesting router") and that the DHCP
        server was a router (hence use of "delegating router"), DHCP
        prefix delegation itself does not require that the client forward
        IP packets not addressed to itself, and thus does not require
        that the client (or server) be a router as defined in
        <xref target="RFC2460"/>. Also, in many cases (such as tethering
        or hosting virtual machines), hosts are already forwarding IP
        packets and thus operating as routers as defined in
        <xref target="RFC2460"/>. Therefore, this document mostly replaces
        "requesting router" with client and "delegating router" with
        server.</t>

        <t>The model of operation for prefix delegation is as follows. A
        server is provided prefixes to be delegated to
        clients. A client requests prefix(es) from the
        server, as described in <xref
        target="configuration-exchange"></xref>. The server chooses
        prefix(es) for delegation, and responds with prefix(es) to the
        client. The client is then responsible for the
        delegated prefix(es). For example, the client might assign
        a subnet from a delegated prefix to one of its interfaces, and begin
        sending router advertisements for the prefix on that link.</t>

        <t>Each prefix has an associated valid and preferred lifetime, which
        constitutes an agreement about the length of time over which the
        client is allowed to use the prefix. A client
        can request an extension of the lifetimes on a delegated prefix and is
        required to terminate the use of a delegated prefix if the valid
        lifetime of the prefix expires.</t>

        <t>This prefix delegation mechanism is appropriate for use by an
        ISP to delegate a prefix to a subscriber, where the delegated prefix
        would possibly be subnetted and assigned to the links within the
        subscriber's network. <xref target="RFC7084" /> and <xref
        target="RFC7368" /> describe in detail such use.</t>

        <t><xref target="FigISPNetwork"></xref> illustrates a network
        architecture in which prefix delegation could be used.</t>

        <figure align="center" anchor="FigISPNetwork"
                title="Prefix Delegation Network">
          <preamble></preamble>

          <artwork align="left"><![CDATA[
                   ______________________         \
                  /                      \         \
                 |    ISP core network    |         \
                  \__________ ___________/           |
                             |                       |
                     +-------+-------+               |
                     |  Aggregation  |               | ISP
                     |    device     |               | network
                     |  (delegating  |               |
                     |    router)    |               |
                     +-------+-------+               |
                             |                      /
                             |Network link to      /
                             |subscriber premises /
                             |
                      +------+------+             \
                      |     CPE     |              \
                      | (requesting |               \
                      |   router)   |                |
                      +----+---+----+                |
                           |   |                     | Subscriber
    ---+-------------+-----+   +-----+------         | Network
       |             |               |               |
  +----+-----+ +-----+----+     +----+-----+         |
  |Subscriber| |Subscriber|     |Subscriber|        /
  |    PC    | |    PC    |     |    PC    |       /
  +----------+ +----------+     +----------+      /
        ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>In this example, the server (delegating router) is configured with a set of
        prefixes to be used for assignment to customers at the time of each
        customer's first connection to the ISP service. The prefix delegation
        process begins when the client (requesting router) requests configuration
        information through DHCP. The DHCP messages from the client
        are received by the server in the aggregation device. When
        the server receives the request, it selects an available
        prefix or prefixes for delegation to the client. The
        server then returns the prefix or prefixes to the
        client.</t>

        <t>The client subnets the delegated prefix and assigns the
        longer prefixes to links in the subscriber's network. In a typical
        scenario based on the network shown in <xref
        target="FigISPNetwork"></xref>, the client subnets a single
        delegated /48 prefix into /64 prefixes and assigns one /64 prefix to
        each of the links in the subscriber network.</t>

        <t>The prefix delegation options can be used in conjunction with other
        DHCP options carrying other configuration information to the
        client. The client may, in turn, provide DHCP
        service to nodes attached to the internal network. For example, the
        client may obtain the addresses of DNS and NTP servers from
        the ISP server, and then pass that configuration
        information on to the subscriber hosts through a DHCP server in the
        client (requesting router).</t>

        <t>If the client assigns a delegated prefix to a link to
        which the router is attached, and begins to send router advertisements
        for the prefix on the link, the client MUST set the valid
        lifetime in those advertisements to be no later than the valid
        lifetime specified in the IA_PD option. A client MAY
        use the preferred lifetime specified in the IA_PD option.</t>

      </section>

      <section anchor="OpModes-CPE" title="DHCP for Customer Edge Routers">
        <t>The DHCP requirements and network architecture for Customer Edge
        Routers are described in <xref target="RFC7084"></xref>. This model of
        operation combines address assignment (see <xref
        target="OpModes-NA"></xref>) and prefix delegation (see <xref
        target="OpModes-PD"></xref>). In general, this model assumes that a
        single set of transactions between the client and server will assign
        or extend the client's non-temporary addresses and delegated
        prefixes.</t>

      </section>

      <section anchor="OpModes-TA" title="DHCP for Temporary Addresses">
        <t>Temporary addresses were originally introduced to avoid privacy
        concerns with stateless address autoconfiguration, which based 64-bits
        of the address on the EUI-64 (see <xref target="RFC3041"></xref> and
        <xref target="RFC4941"></xref>). They were added to DHCP to provide
        complementary support when stateful address assignment is used.</t>

        <t>Temporary address assignment works mostly like non-temporary
        address assignment (see <xref target="OpModes-NA"></xref>), however
        these addresses are generally intended to be used for a short period
        of time and not to have their lifetimes extended, though they can be
        if required.</t>
      </section>
    </section>

    <section anchor="dhcp-constants" title="DHCP Constants">
      <!-- 5, line 597-->

      <t>This section describes various program and networking constants used
      by DHCP.</t>

      <section anchor="mutlicastAddr" title="Multicast Addresses">
        <!-- 5.1, line 603-->

        <t>DHCP makes use of the following multicast addresses:</t>

        <t><list hangIndent="16" style="hanging">
            <t hangText="All_DHCP_Relay_Agents_and_Servers (FF02::1:2)">A
            link-scoped multicast address used by a client to communicate with
            neighboring (i.e., on-link) relay agents and servers. All servers
            and relay agents are members of this multicast group.</t>

            <t hangText="All_DHCP_Servers (FF05::1:3)">A site-scoped multicast
            address used by a relay agent to communicate with servers, either
            because the relay agent wants to send messages to all servers or
            because it does not know the unicast addresses of the servers.
            Note that in order for a relay agent to use this address, it must
            have an address of sufficient scope to be reachable by the
            servers. All servers within the site are members of this multicast
            group on the interfaces which are within the site.</t>
          </list></t>
      </section>

      <!-- ends: "5.1 from line 603-->

      <section title="UDP Ports">
        <!-- 5.2, line 628-->

        <t>Clients listen for DHCP messages on UDP port 546. Servers and relay
        agents listen for DHCP messages on UDP port 547.</t>
      </section>

      <!-- ends: "5.2 from line 628-->

      <section anchor="RFC3315-5.3" title="DHCP Message Types">
        <!-- 5.3, line 634-->

        <t>DHCP defines the following message types. More detail on these
        message types can be found in <xref target="RFC3315-6"></xref> and
        <xref target="RFC3315-7"></xref>. Additional message types are
        defined in <xref target="RFC5007"/>, <xref target="RFC5460"/>,
        <xref target="RFC6977"/>, <xref target="RFC7341"/>, <xref
        target="RFC7563"/>. Additional message types may be defined in
        the future. The numeric encoding for each message type is
        shown in parentheses.</t>

        <t><list hangIndent="16" style="hanging">
            <t hangText="SOLICIT (1)">A client sends a Solicit message to
            locate servers.</t>

            <t hangText="ADVERTISE (2)">A server sends an Advertise message to
            indicate that it is available for DHCP service, in response to a
            Solicit message received from a client.</t>

            <t hangText="REQUEST (3)">A client sends a Request message to
            request configuration parameters, including addresses and/or
            delegated prefixes, from a specific server.</t>

            <t hangText="CONFIRM (4)">A client sends a Confirm message to any
            available server to determine whether the addresses it was
            assigned are still appropriate to the link to which the client is
            connected.</t>

            <t hangText="RENEW (5)">A client sends a Renew message to the
            server that originally provided the client's leases and
            configuration parameters to extend the lifetimes on the leases
            assigned to the client and to update other configuration
            parameters.</t>

            <t hangText="REBIND (6)">A client sends a Rebind message to any
            available server to extend the lifetimes on the leases assigned
            to the client and to update other configuration parameters; this
            message is sent after a client receives no response to a Renew
            message.</t>

            <t hangText="REPLY (7)">A server sends a Reply message containing
            assigned leases and configuration parameters in response to a
            Solicit, Request, Renew, Rebind message received from a client. A
            server sends a Reply message containing configuration parameters
            in response to an Information-request message. A server sends a
            Reply message in response to a Confirm message confirming or
            denying that the addresses assigned to the client are appropriate
            to the link to which the client is connected. A server sends a
            Reply message to acknowledge receipt of a Release or Decline
            message.</t>

            <t hangText="RELEASE (8)">A client sends a Release message to the
            server that assigned leases to the client to indicate that the
            client will no longer use one or more of the assigned
            leases.</t>

            <t hangText="DECLINE (9)">A client sends a Decline message to a
            server to indicate that the client has determined that one or more
            addresses assigned by the server are already in use on the link to
            which the client is connected.</t>

            <t hangText="RECONFIGURE (10)">A server sends a Reconfigure
            message to a client to inform the client that the server has new
            or updated configuration parameters, and that the client is to
            initiate a Renew/Reply or Information-request/Reply transaction
            with the server in order to receive the updated information.</t>

            <t hangText="INFORMATION-REQUEST (11)">A client sends an
            Information-request message to a server to request configuration
            parameters without the assignment of any leases to the
            client.</t>

            <t hangText="RELAY-FORW (12)">A relay agent sends a Relay-forward
            message to relay messages to servers, either directly or through
            another relay agent. The received message, either a client message
            or a Relay-forward message from another relay agent, is
            encapsulated in an option in the Relay-forward message.</t>

            <t hangText="RELAY-REPL (13)">A server sends a Relay-reply message
            to a relay agent containing a message that the relay agent
            delivers to a client. The Relay-reply message may be relayed by
            other relay agents for delivery to the destination relay
            agent.</t>

            <t>The server encapsulates the client message as an option in the
            Relay-reply message, which the relay agent extracts and relays to
            the client.</t>
          </list></t>
      </section>

      <!-- ends: "5.3 from line 634-->

      <section title="DHCP Option Codes">

        <t>DHCP makes extensive use of options in messages and some of these
        are defined later in <xref target="RFC3315-22"/>. Additional options
        are defined in other documents or may be defined in the future.</t>
        </section>

      <section title="Status Codes">
        <!-- 5.4, line 733-->

        <t>DHCP uses status codes to communicate the success or failure of
        operations requested in messages from clients and servers, and to
        provide additional information about the specific cause of the failure
        of a message. The specific status codes are defined in <xref
        target="RFC3315-22.13"></xref>.</t>

        <t>If the Status Code option does not appear in a message in which the
        option could appear, the status of the message is assumed to be
        Success.</t>
      </section>

      <!-- ends: "5.4 from line 733-->

      <section anchor="RFC3315-5.5"
               title="Transmission and Retransmission Parameters">
        <!-- 5.5, line 743-->

        <t>This section presents a table of values used to describe the
        message transmission behavior of clients and servers.</t>

        <texttable>
          <ttcol>Parameter</ttcol>

          <ttcol>Default</ttcol>

          <ttcol>Description</ttcol>

          <c>SOL_MAX_DELAY</c>

          <c>1 sec</c>

          <c>Max delay of first Solicit</c>

          <c>SOL_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Solicit timeout</c>

          <c>SOL_MAX_RT</c>

          <c>3600 secs</c>

          <c>Max Solicit timeout value</c>

          <c>REQ_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Request timeout</c>

          <c>REQ_MAX_RT</c>

          <c>30 secs</c>

          <c>Max Request timeout value</c>

          <c>REQ_MAX_RC</c>

          <c>10</c>

          <c>Max Request retry attempts</c>

          <c>CNF_MAX_DELAY</c>

          <c>1 sec</c>

          <c>Max delay of first Confirm</c>

          <c>CNF_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Confirm timeout</c>

          <c>CNF_MAX_RT</c>

          <c>4 secs</c>

          <c>Max Confirm timeout</c>

          <c>CNF_MAX_RD</c>

          <c>10 secs</c>

          <c>Max Confirm duration</c>

          <c>REN_TIMEOUT</c>

          <c>10 secs</c>

          <c>Initial Renew timeout</c>

          <c>REN_MAX_RT</c>

          <c>600 secs</c>

          <c>Max Renew timeout value</c>

          <c>REB_TIMEOUT</c>

          <c>10 secs</c>

          <c>Initial Rebind timeout</c>

          <c>REB_MAX_RT</c>

          <c>600 secs</c>

          <c>Max Rebind timeout value</c>

          <c>INF_MAX_DELAY</c>

          <c>1 sec</c>

          <c>Max delay of first Information-request</c>

          <c>INF_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Information-request timeout</c>

          <c>INF_MAX_RT</c>

          <c>3600 secs</c>

          <c>Max Information-request timeout value</c>

          <c>REL_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Release timeout</c>

          <c>REL_MAX_RC</c>

          <c>4</c>

          <c>MAX Release retry attempts</c>

          <c>DEC_TIMEOUT</c>

          <c>1 sec</c>

          <c>Initial Decline timeout</c>

          <c>DEC_MAX_RC</c>

          <c>4</c>

          <c>Max Decline retry attempts</c>

          <c>REC_TIMEOUT</c>

          <c>2 secs</c>

          <c>Initial Reconfigure timeout</c>

          <c>REC_MAX_RC</c>

          <c>8</c>

          <c>Max Reconfigure attempts</c>

          <c>HOP_COUNT_LIMIT</c>

          <c>32</c>

          <c>Max hop count in a Relay-forward message</c>

          <c>IRT_DEFAULT</c>

          <c>86400 secs (24 hours)</c>

          <c>Default information refresh time</c>

          <c>IRT_MINIMUM</c>

          <c>600 secs</c>

          <c>Min information refresh time</c>

        </texttable>
      </section>

      <!-- ends: "5.5 from line 743-->

      <section anchor="RFC3315-5.6"
               title="Representation of Time Values and &quot;Infinity&quot; as a Time Value">
        <t>All time values for lifetimes, T1 and T2 are unsigned 32-bit integers. The
        value 0xffffffff is taken to mean "infinity" when used as a lifetime
        (as in <xref target="RFC4861"></xref>) or a value for T1 or T2.</t>

        <t>Setting the valid lifetime of an address or a
        delegated prefix to 0xffffffff ("infinity") amounts to a permanent
        address or delegation of the prefix to a client and should only be used in cases
        were permanent addresses are desired.</t>

        <t>Care should be taken in setting T1 or T2 to 0xffffffff
        ("infinity"). A client will never attempt to extend the lifetimes of
        any addresses in an IA with T1 set to 0xffffffff. A client will never
        attempt to use a Rebind message to locate a different server to extend
        the lifetimes of any addresses in an IA with T2 set to 0xffffffff.</t>
      </section>

      <!-- ends: "5.6 -->
    </section>

    <!-- ends: "5 from line 597-->

    <section anchor="RFC3315-6" title="Client/Server Message Formats">
      <!-- 6, line 786-->

      <t>All DHCP messages sent between clients and servers share an identical
      fixed format header and a variable format area for options.</t>

      <t>All values in the message header and in options are in network byte
      order.</t>

      <t>Options are stored serially in the options field, with no padding
      between the options. Options are byte-aligned but are not aligned in any
      other way such as on 2 or 4 byte boundaries.</t>

      <t>The following diagram illustrates the format of DHCP messages sent
      between clients and servers:</t>

      <figure align="center" anchor="FigClientServerMsg"
              title="Client/Server message format">
        <preamble></preamble>

        <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |               transaction-id                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                            options                            .
   .                           (variable)                          .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        ]]></artwork>

        <postamble></postamble>
      </figure>

      <t><list hangIndent="24" style="hanging">
          <t hangText="   msg-type">Identifies the DHCP message type; the
          available message types are listed in <xref
          target="RFC3315-5.3"></xref>.</t>

          <t hangText="   transaction-id">The transaction ID for this message
          exchange.</t>

          <t hangText="   options">Options carried in this message; options
          are described in <xref target="RFC3315-22"></xref>.</t>
        </list></t>
    </section>

    <!-- ends: "6 from line 786-->

    <section anchor="RFC3315-7" title="Relay Agent/Server Message Formats">
      <!-- 7, line 825-->

      <t>Relay agents exchange messages with other relay agents and servers
      to relay messages between
      clients and servers that are not connected to the same link.</t>

      <t>All values in the message header and in options are in network byte
      order.</t>

      <t>Options are stored serially in the options field, with no padding
      between the options. Options are byte-aligned but are not aligned in any
      other way such as on 2 or 4 byte boundaries.</t>

      <t>There are two relay agent messages, which share the following
      format:</t>

      <figure align="center" anchor="FigRelayServerMsg"
              title="Relay Agent/Server message format">
        <preamble></preamble>

        <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |   hop-count   |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   |                         link-address                          |
   |                                                               |
   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
   |                               |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   |                         peer-address                          |
   |                                                               |
   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
   |                               |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                                                               .
   .            options (variable number and length)   ....        .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        ]]></artwork>

        <postamble></postamble>
      </figure>

      <t>The following sections describe the use of the Relay Agent message
      header.</t>

      <section title="Relay-forward Message">
        <!-- 7.1, line 868-->

        <t>The following table defines the use of message fields in a
        Relay-forward message.</t>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   msg-type">RELAY-FORW</t>

            <t hangText="   hop-count">Number of relay agents that
            have already relayed this message.</t>

            <t hangText="   link-address">An address that may be used by the
            server to identify the link on which the client is located. This
            is typically a globally unique address or unique local address (ULA)
            <xref target="RFC4193"/>, but see discussion in <xref
            target="relaying-from-client"></xref>.</t>

            <t hangText="   peer-address">The address of the client or relay
            agent from which the message to be relayed was received.</t>

            <t hangText="   options">MUST include a "Relay Message option"
            (see <xref target="RFC3315-22.10"></xref>); MAY include other
            options added by the relay agent.</t>
        </list></t>

        <t>See <xref target="addr-assign-ia-na"/> for an explanation
        how link-address is used.</t>

      </section>

      <!-- ends: "7.1 from line 868-->

      <section title="Relay-reply Message">
        <!-- 7.2, line 892-->

        <t>The following table defines the use of message fields in a
        Relay-reply message.</t>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   msg-type">RELAY-REPL</t>

            <t hangText="   hop-count">Copied from the Relay-forward
            message</t>

            <t hangText="   link-address">Copied from the Relay-forward
            message</t>

            <t hangText="   peer-address">Copied from the Relay-forward
            message</t>

            <t hangText="   options">MUST include a "Relay Message option";
            see <xref target="RFC3315-22.10"></xref>; MAY include other
            options</t>
          </list></t>
      </section>

      <!-- ends: "7.2 from line 892-->
    </section>

    <!-- ends: "7 from line 825-->

    <section anchor="RFC3315-8" title="Representation and Use of Domain Names">
      <!-- 8, line 912-->

      <t>So that domain names may be encoded uniformly, a domain name or a
      list of domain names is encoded using the technique described in section
      3.1 of <xref target="RFC1035"></xref>. A domain name, or list of domain
      names, in DHCP MUST NOT be stored in compressed form, as described in
      section 4.1.4 of <xref target="RFC1035"></xref>.</t>
    </section>

    <!-- ends: "8 from line 912-->

    <section anchor="RFC3315-9" title="DHCP Unique Identifier (DUID)">
      <!-- 9, line 921-->

      <t>Each DHCP client and server has a DUID. DHCP servers use DUIDs to
      identify clients for the selection of configuration parameters and in
      the association of IAs with clients. DHCP clients use DUIDs to identify
      a server in messages where a server needs to be identified. See <xref
      target="RFC3315-22.2"></xref> and <xref target="RFC3315-22.3"></xref>
      for the representation of a DUID in a DHCP message.</t>

      <t>Clients and servers MUST treat DUIDs as opaque values and MUST only
      compare DUIDs for equality. Clients and servers SHOULD NOT in any other
      way interpret DUIDs. Clients and servers MUST NOT restrict DUIDs to the
      types defined in this document, as additional DUID types may be defined
      in the future. It should be noted that an attempt to parse a DUID to obtain
      a client's link-layer address is unreliable as there is no guarantee that
      the client is still using the same link-layer address as when it generated
      its DUID. And, such an attempt will be more and more unreliable as more
      clients adopt privacy measures, such are those defined in <xref
      target="RFC7844"/>. It is recommended to rely on the mechanism defined in
      <xref target="RFC6939"/>.</t>

      <t>The DUID is carried in an option because it may be variable length
      and because it is not required in all DHCP messages. The DUID is
      designed to be unique across all DHCP clients and servers, and stable
      for any specific client or server - that is, the DUID used by a client
      or server SHOULD NOT change over time if at all possible; for example, a
      device's DUID should not change as a result of a change in the device's
      network hardware.  The stability of the DUID includes changes to virtual
      interfaces, such as logical PPP (over Ethernet) interfaces that may
      come and go in Customer Premise Equipment routers. The client
      may change its DUID as specific in <xref target="RFC7844"/>.</t>

      <t>The motivation for having more than one type of DUID is that the DUID
      must be globally unique, and must also be easy to generate. The sort of
      globally-unique identifier that is easy to generate for any given device
      can differ quite widely. Also, some devices may not contain any
      persistent storage. Retaining a generated DUID in such a device is not
      possible, so the DUID scheme must accommodate such devices.</t>

      <section anchor="RFC3315-9.1" title="DUID Contents">
        <!-- 9.1, line 953-->

        <t>A DUID consists of a two-octet type code represented in network
        byte order, followed by a variable number of octets that make up the
        actual identifier. The length of the DUID (not including the type
        code) is at least 1 octet and at most 128 octets. The following types
        are currently defined:</t>

        <texttable>
          <ttcol>Type</ttcol>

          <ttcol>Description</ttcol>

          <c>1</c>

          <c>Link-layer address plus time</c>

          <c>2</c>

          <c>Vendor-assigned unique ID based on Enterprise Number</c>

          <c>3</c>

          <c>Link-layer address</c>

          <c>4</c>

          <c>Universally Unique IDentifier (UUID) - see <xref
          target="RFC6355"></xref></c>
        </texttable>

        <!-- Alternative, but multiple spaces are ignored
        <t>
        1    Link-layer address plus time<vspace blankLines='0'/>
        2    Vendor-assigned unique ID based on Enterprise Number<vspace blankLines='0'/>
        3    Link-layer address
        </t>
-->

        <!-- Altnerative, but results in blank lines between entries
        <t>
          <list hangIndent="12" style="hanging">
            <t hangText="1">Link-layer address plus time</t>
            <t hangText="2">Vendor-assigned unique ID based on Enterprise Number</t>
            <t hangText="3">Link-layer address</t>
          </list>
        </t>
-->

        <t>Formats for the variable field of the DUID for the first three of the
        above types are shown below. The fourth type, DUID-UUID <xref
        target="RFC6355"></xref>, can be used in situations where there is a
        UUID stored in a device's firmware settings.</t>
      </section>

      <!-- ends: "9.1 from line 953-->

      <section title="DUID Based on Link-layer Address Plus Time, DUID-LLT">
        <!-- 9.2, line 972-->

        <t>This type of DUID consists of a two octet type field containing the
        value 1, a two octet hardware type code, four octets containing a time
        value, followed by link-layer address of any one network interface
        that is connected to the DHCP device at the time that the DUID is
        generated. The time value is the time that the DUID is generated
        represented in seconds since midnight (UTC), January 1, 2000, modulo
        2^32. The hardware type MUST be a valid hardware type assigned by the
        IANA as described in <xref target="RFC0826"></xref>. Both the time and
        the hardware type are stored in network byte order. The link-layer
        address is stored in canonical form, as described in <xref
        target="RFC2464"></xref>.</t>

        <t>The following diagram illustrates the format of a DUID-LLT:</t>

        <figure align="center" anchor="FigDUIDLLT" title="DUID-LLT format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               1               |    hardware type (16 bits)    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        time (32 bits)                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .             link-layer address (variable length)              .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>The choice of network interface can be completely arbitrary, as
        long as that interface provides a globally unique link-layer address
        for the link type, and the same DUID-LLT SHOULD be used in configuring
        all network interfaces connected to the device, regardless of which
        interface's link-layer address was used to generate the DUID-LLT.</t>

        <t>Clients and servers using this type of DUID MUST store the DUID-LLT
        in stable storage, and MUST continue to use this DUID-LLT even if the
        network interface used to generate the DUID-LLT is removed. Clients
        and servers that do not have any stable storage MUST NOT use this type
        of DUID.</t>

        <t>Clients and servers that use this DUID SHOULD attempt to configure
        the time prior to generating the DUID, if that is possible, and MUST
        use some sort of time source (for example, a real-time clock) in
        generating the DUID, even if that time source could not be configured
        prior to generating the DUID. The use of a time source makes it
        unlikely that two identical DUID-LLTs will be generated if the network
        interface is removed from the client and another client then uses the
        same network interface to generate a DUID-LLT. A collision between two
        DUID-LLTs is very unlikely even if the clocks have not been configured
        prior to generating the DUID.</t>

        <t>This method of DUID generation is recommended for all general
        purpose computing devices such as desktop computers and laptop
        computers, and also for devices such as printers, routers, and so on,
        that contain some form of writable non-volatile storage.</t>

        <t>It is possible that this algorithm for
        generating a DUID could result in a client identifier collision. A
        DHCP client that generates a DUID-LLT using this mechanism MUST
        provide an administrative interface that replaces the existing DUID
        with a newly-generated DUID-LLT.</t>
      </section>

      <!-- ends: "9.2 from line 972-->

      <section title="DUID Assigned by Vendor Based on Enterprise Number, DUID-EN">
        <!-- 9.3, line 1038-->

        <t>This form of DUID is assigned by the vendor to the device. It
        consists of the vendor's registered Private Enterprise Number as
        maintained by IANA <xref target="IANA-PEN"></xref> followed by a
        unique identifier assigned by the vendor. The following diagram
        summarizes the structure of a DUID-EN:</t>

        <figure align="center" anchor="FigDUIDEN" title="DUID-EN format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               2               |       enterprise-number       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   enterprise-number (contd)   |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                           identifier                          .
   .                       (variable length)                       .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>The source of the identifier is left up to the vendor defining it,
        but each identifier part of each DUID-EN MUST be unique to the device
        that is using it, and MUST be assigned to the device no later than at
        the first usage and stored in some form of non-volatile storage. This
        typically means being assigned during manufacture process in case of
        physical devices or when the image is created or booted for the first
        time in case of virtual machines. The generated DUID SHOULD be
        recorded in non-erasable storage. The enterprise-number is the
        vendor's registered Private Enterprise Number as maintained by IANA
        <xref target="IANA-PEN"></xref>. The enterprise-number is stored as an
        unsigned 32 bit number.</t>

        <t>An example DUID of this type might look like this:</t>

        <figure align="center" anchor="FigDUIDENExample"
                title="DUID-EN example">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

   +---+---+---+---+---+---+---+---+
   | 0 | 2 | 0 | 0 | 0 |  9| 12|192|
   +---+---+---+---+---+---+---+---+
   |132|211| 3 | 0 | 9 | 18|
   +---+---+---+---+---+---+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>This example includes the two-octet type of 2, the Enterprise
        Number (9), followed by eight octets of identifier data
        (0x0CC084D303000912).</t>
      </section>

      <!-- ends: "9.3 from line 1038-->

      <section title="DUID Based on Link-layer Address, DUID-LL">
        <!-- 9.4, line 1084-->

        <t>This type of DUID consists of two octets containing the DUID type
        3, a two octet network hardware type code, followed by the link-layer
        address of any one network interface that is permanently connected to
        the client or server device. For example, a node that has a network
        interface implemented in a chip that is unlikely to be removed and
        used elsewhere could use a DUID-LL. The hardware type MUST be a valid
        hardware type assigned by the IANA, as described in <xref
        target="RFC0826"></xref>. The hardware type is stored in network byte
        order. The link-layer address is stored in canonical form, as
        described in <xref target="RFC2464"></xref>. The following diagram
        illustrates the format of a DUID-LL:</t>

        <figure align="center" anchor="FigDUIDLL" title="DUID-LL format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               3               |    hardware type (16 bits)    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .             link-layer address (variable length)              .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>The choice of network interface can be completely arbitrary, as
        long as that interface provides a unique link-layer address and is
        permanently attached to the device on which the DUID-LL is being
        generated. The same DUID-LL SHOULD be used in configuring all network
        interfaces connected to the device, regardless of which interface's
        link-layer address was used to generate the DUID.</t>

        <t>DUID-LL is recommended for devices that have a
        permanently-connected network interface with a link-layer address, and
        do not have nonvolatile, writable stable storage. DUID-LL SHOULD NOT be
        used by DHCP clients or servers that cannot tell whether or not a
        network interface is permanently attached to the device on which the
        DHCP client is running.</t>
      </section>

      <section title="DUID Based on Universally Unique IDentifier (UUID),
                      DUID-UUID">
        <t>This type of DUID consists of sixteen octets containing a 128-bit
        UUID. <xref target="RFC6355" /> details when to use this type, and
        how to pick an appropriate source of the UUID.
        </t>
        <figure align="center" anchor="FigDUIDUUID" title="DUID-UUID format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          DUID-Type (4)        |    UUID (128 bits)            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   |                                                               |
   |                                -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
          ]]></artwork>

          <postamble></postamble>
        </figure>
      </section>

      <!-- ends: "9.4 from line 1084-->
    </section>

    <!-- ends: "9 from line 921-->

    <section anchor="RFC3315-10" title="Identity Association">
      <!-- 10, line 1125-->

      <t>An "identity-association" (IA) is a construct through which a server
      and a client can identify, group, and manage a set of related IPv6
      addresses or delegated prefixes. Each IA consists of an IAID and
      associated configuration information.</t>

      <t>The IAID uniquely identifies the IA and MUST be chosen to be unique
      among the IAIDs for that IA type on the client (i.e., IA_NA with IAID 0 is
      unique from IA_TA with IAID 0). The IAID is chosen by
      the client. For any given use of an IA by the client, the IAID for that
      IA MUST be consistent across restarts of the DHCP client. The client may
      maintain consistency either by storing the IAID in non-volatile storage
      or by using an algorithm that will consistently produce the same IAID as
      long as the configuration of the client has not changed. There may be no
      way for a client to maintain consistency of the IAIDs if it does not
      have non-volatile storage and the client's hardware configuration
      changes. If the client uses only one IAID, it can use a well-known
      value, e.g., zero.</t>

      <t>If the client wishes to obtain a distinctly new address or prefix and
      deprecate the existing one, the client sends a Release message
      to the server for the IAs using the original IAID. Then the client creates
      a new IAID, to be used in future messages to obtain leases for the new IA.</t>

      <section anchor="RFC3315-10.1"
               title="Identity Associations for Address Assignment">
        <t>A client must associate at least one distinct IA with each of its
        network interfaces for which it is to request the assignment of IPv6
        addresses from a DHCP server. The client uses the IAs assigned to an
        interface to obtain configuration information from a server for that
        interface. Each IA must be associated with exactly one interface.</t>

        <t>The configuration information in an IA_NA consists of one or more IPv6
        addresses along with the T1 and T2 times for the IA. See <xref
        target="RFC3315-22.4"/> for the representation of an IA_NA in a
        DHCP message.</t>

        <t>The configuration information in an IA_TA consists of one or more IPv6
        addresses. See <xref target="RFC3315-22.5"/> for the representation of an
        IA_TA in a DHCP message.</t>

        <t>Each address in an IA has a preferred lifetime and a valid
        lifetime, as defined in <xref target="RFC4862"></xref>. The lifetimes
        are transmitted from the DHCP server to the client in the IA Address option.
        The lifetimes apply to the use of addresses, as described in
        section 5.5.4 of <xref target="RFC4862"></xref>.</t>
      </section>

      <section anchor="RFC3315-10.2"
               title="Identity Associations for Prefix Delegation">
        <t>An IA_PD is different from an IA for address assignment, in that it
        does not need to be associated with exactly one interface. One IA_PD
        can be associated with the client, with a set of interfaces
        or with exactly one interface. A client must create at
        least one distinct IA_PD. It may associate a distinct IA_PD with each
        of its downstream network interfaces and use that IA_PD to obtain a
        prefix for that interface from the server.</t>

        <t>The configuration information in an IA_PD consists of one or more
        prefixes along with the T1 and T2 times for the IA_PD. See <xref
        target="IA_PD-option"></xref> for the representation of an IA_PD in a
        DHCP message.</t>

        <t>Each delegated prefix in an IA has a preferred lifetime and a valid
        lifetime, as defined in <xref target="RFC4862"></xref>. The lifetimes
        are transmitted from the DHCP server to the client in the IA Prefix option.
        The lifetimes apply to the use of delegated prefixes, as described in
        section 5.5.4 of <xref target="RFC4862"></xref>.</t>
      </section>
    </section>

    <!-- ends: "10 from line 1125-->

    <section anchor="RFC3315-11" title="Assignment to an IA">
      <!-- 11, line 1159-->

      <section anchor="addr-assign-ia-na" title="Selecting Addresses for Assignment to an IA_NA">
        <t>A server selects addresses to be assigned to an IA_NA according to
        the address assignment policies determined by the server administrator
        and the specific information the server determines about the client
        from some combination of the following sources: <list hangIndent="3"
            style="hanging">
            <t hangText="-">The link to which the client is attached. The
            server determines the link as follows: <list hangIndent="3"
                style="hanging">
                <t hangText="*">If the server receives the message directly
                from the client and the source address in the IP datagram in
                which the message was received is a link-local address, then
                the client is on the same link to which the interface over
                which the message was received is attached.</t>

                <t hangText="*">If the server receives the message from a
                forwarding relay agent, then the client is on the same link as
                the one to which the interface, identified by the link-address
                field in the message from the relay agent, is attached.
                According to <xref target="RFC6221"></xref>, the server MUST
                ignore any link-address field whose value is zero. The
                link-address in this case may come from any of the
                Relay-forward messages encapsulated in the received
                Relay-forward, and in general the most encapsulated
                (closest Relay-forward to the client) has the most
                useful value.</t>

                <t hangText="*">If the server receives the message directly
                from the client and the source address in the IP datagram in
                which the message was received is not a link-local address,
                then the client is on the link identified by the source
                address in the IP datagram (note that this situation can occur
                only if the server has enabled the use of unicast message
                delivery by the client and the client has sent a message for
                which unicast delivery is allowed).</t>
              </list></t>

            <t hangText="-">The DUID supplied by the client.</t>

            <t hangText="-">Other information in options supplied by the
            client, e.g., IA Address options that include the client's requests
            for specific addresses.</t>

            <t hangText="-">Other information in options supplied by the relay
            agent.</t>
          </list></t>

        <t>By default, DHCP server implementations SHOULD NOT generate
        predictable addresses (<xref target="RFC7721"/>). Server
        implementers are encouraged to review <xref target="RFC4941"/>,
        <xref target="RFC7824"/>, and <xref target="RFC7707"/> as to
        possible considerations for how to generate addresses.</t>

        <t>A server MUST NOT assign an address that is otherwise reserved for
        some other purpose. For example, a server MUST NOT assign addresses
        that use a reserved IPv6 Interface Identifier (<xref target="RFC5453"/>,
        <xref target="RFC7136"/>, <xref target="IANA-RESERVED-IID"/>).</t>

        <t>See <xref target="RFC7969"></xref> for a more detailed
        discussion on how servers determine a client's location on the network.</t>
      </section>

      <section title="Assignment of Temporary Addresses">
        <t>A client may request the assignment of temporary addresses (see
        <xref target="RFC4941"></xref> for the definition of temporary
        addresses). DHCP handling of address assignment is no different for
        temporary addresses.</t>

        <t>Clients ask for temporary addresses and servers assign them.
        Temporary addresses are carried in the Identity Association for
        Temporary Addresses (IA_TA) option (see <xref
        target="RFC3315-22.5"></xref>). Each IA_TA option contains at lease one
        temporary address for each of the prefixes on the link to which the
        client is attached.</t>

        <t>The lifetime of the assigned temporary address is set in the IA
        Address option (see <xref target="RFC3315-22.6"></xref>) encapsulated in the
        IA_TA option. It is RECOMMENDED to set short lifetimes, typically
        shorter than TEMP_VALID_LIFETIME and TEMP_PREFERRED_LIFETIME (see
        Section 5, <xref target="RFC4941"/>).</t>

        <t>A DHCP server implementation MAY generate temporary addresses
        referring to the algorithm defined in Section 3.2.1, <xref
        target="RFC4941"></xref>, with additional condition that the new
        address is not duplicated with any assigned addresses.</t>

        <t>The server MAY update the DNS for a temporary address, as described
        in section 4 of <xref target="RFC4941"></xref>.</t>

        <t>On the clients, by default, temporary addresses are preferred in
        source address selection, according to Rule 7, <xref
        target="RFC6724"></xref>. However, this policy is overridable.</t>

        <t>One of the most important properties of temporary address is
        unlinkability of different actions over time. So, it is NOT
        RECOMMENDED for a client to renew expired temporary addresses, though
        DHCP provides such possibility (see <xref
        target="RFC3315-22.5"></xref>).</t>
      </section>

      <section title="Assignment of Prefixes for IA_PD">
        <t>The mechanism through which the server selects
        prefix(es) for delegation is not specified in this document. Examples
        of ways in which the server might select prefix(es) for a client
        include: static assignment based on subscription to an ISP; dynamic
        assignment from a pool of available prefixes; selection based on an
        external authority such as a RADIUS server using the
        Framed-IPv6-Prefix option as described in <xref pageno="false"
        target="RFC3162"></xref>.</t>
      </section>

    </section>

    <!-- ends: "12 from line 1217-->

    <section anchor="RFC3315-13" title="Transmission of Messages by a Client">
      <!-- 13, line 1239-->

      <t>Unless otherwise specified in this document, or in a document that
      describes how IPv6 is carried over a specific type of link (for link
      types that do not support multicast), a client sends DHCP messages to
      the All_DHCP_Relay_Agents_and_Servers multicast address.</t>

      <t>DHCP servers SHOULD NOT care if the layer-2 address used was
      multicast or not, as long as the layer-3 address was correct.</t>

      <t>A client uses multicast to reach all servers or an individual server.
      An individual server is indicated by specifying that server's DUID in a
      Server Identifier option (see <xref target="RFC3315-22.3"></xref>) in
      the client's message (all servers will receive this message but only the
      indicated server will respond). All servers are indicated by not
      supplying this option.</t>

      <t>A client may send some messages directly to a server using unicast,
      as described in <xref target="RFC3315-22.12"></xref>.</t>

      <section anchor="rate-limit" title="Rate Limiting">
        <t>In order to avoid prolonged message bursts that may be caused by
        possible logic loops, a DHCP client MUST limit the rate of DHCP
        messages it transmits. One example is that a client obtains an
        address or delegated prefix, but does not like the response; so it reverts back to Solicit
        procedure, discovers the same (sole) server, requests an address or delegated prefix and
        gets the same address or delegated prefix as before (as the server has this previously
        requested lease assigned to this client). This loop can repeat infinitely if
        there is not a quit/stop mechanism. Therefore, a client must not
        initiate transmissions too frequently.</t>

        <t>A recommended method for implementing the rate limiting function is
        a token bucket, limiting the average rate of transmission to a certain
        number in a certain time interval. This method of bounding burstiness also
        guarantees that the long-term transmission rate will not be exceeded.</t>

        <t><list hangIndent="11" style="hanging">
            <t hangText="   TRT">Transmission Rate Limit</t>
          </list> The Transmission Rate Limit parameter (TRT) SHOULD be
        configurable. A possible default could be 20 packets in 20
        seconds.</t>

        <t>For a device that has multiple interfaces, the limit MUST be
        enforced on a per interface basis.</t>

        <t>Rate limiting of forwarded DHCP messages and server-side messages
        are out of scope of this specification.</t>
      </section>

      <section anchor="t1-t2-0"
               title="Client Behavior when T1 and/or T2 are 0">
        <t>In certain cases, T1 and/or T2 time may be set to zero. Currently
        there are three such cases:
             
      <list hangIndent="6" style="hanging">
        <t hangText="1."> a client received an IA_NA option with a zero value,</t>
        <t hangText="2."> a client received an IA_PD option with a zero value, and</t>
        <t hangText="3."> a client received an IA_TA option (which does not
        contain T1 and T2 fields and are not generally renewed).</t>
      </list>
        This is an indication that the renew and rebind times are left
        at the client's discretion. However, they are not completely
        discretionary.</t>

        <t>When T1 and/or T2 times are set to zero, the client MUST choose a
        time to avoid packet storms. In particular, it MUST NOT transmit
        immediately. If the client received multiple IA containers, it SHOULD
        pick renew and/or rebind transmission times so all IA containers are
        handled in one exchange, if possible. The client MUST choose renew
        and rebind times to not violate rate limiting restrictions, defined
        in <xref target="rate-limit"/>.</t>
      </section>
    </section>

    <!-- ends: "13 from line 1239-->

    <section anchor="RFC3315-14"
             title="Reliability of Client Initiated Message Exchanges">
      <!-- 14, line 1258-->

      <t>DHCP clients are responsible for reliable delivery of messages in the
      client-initiated message exchanges described in <xref
      target="configuration-exchange"></xref>. If a DHCP client fails to
      receive an expected response from a server, the client must retransmit
      its message. This section describes the retransmission strategy to be
      used by clients in client-initiated message exchanges.</t>

      <t>Note that the procedure described in this section is slightly
      modified when used with the Solicit message. The modified procedure is
      described in <xref target="solicit-create-transmit"></xref>.</t>

      <t>The client begins the message exchange by transmitting a message to
      the server. The message exchange terminates when either the client
      successfully receives the appropriate response or responses from a
      server or servers, or when the message exchange is considered to have
      failed according to the retransmission mechanism described below.</t>

      <t>The client MUST update an "elapsed-time" value within an Elapsed
      Time option (see <xref target="RFC3315-22.9"/>) in the
      retransmitted message. In some cases, the client may also need to modify
      values in the IA Address or IA Prefix options if a valid lifetime for
      any of the client's leases expires before retransmission. Thus, whenever
      this document refers to a "retransmission" of a client's message, it
      refers to both modifying the original message and sending this new message
      instance to the server.</t>

      <t>The client retransmission behavior is controlled and described by the
      following variables: <list hangIndent="11" style="hanging">
          <t hangText="   RT">Retransmission timeout</t>

          <t hangText="   IRT">Initial retransmission time</t>

          <t hangText="   MRC">Maximum retransmission count</t>

          <t hangText="   MRT">Maximum retransmission time</t>

          <t hangText="   MRD">Maximum retransmission duration</t>

          <t hangText="   RAND">Randomization factor</t>
        </list></t>

      <t>With each message transmission or retransmission, the client sets RT
      according to the rules given below. If RT expires before the message
      exchange terminates, the client recomputes RT and retransmits the
      message.</t>

      <t>Each of the computations of a new RT include a randomization factor
      (RAND), which is a random number chosen with a uniform distribution
      between -0.1 and +0.1. The randomization factor is included to minimize
      synchronization of messages transmitted by DHCP clients.</t>

      <t>The algorithm for choosing a random number does not need to be
      cryptographically sound. The algorithm SHOULD produce a different
      sequence of random numbers from each invocation of the DHCP client.</t>

      <t>RT for the first message transmission is based on IRT:</t>

      <figure>
        <artwork><![CDATA[
   RT = IRT + RAND*IRT
      ]]></artwork>
      </figure>

      <t>RT for each subsequent message transmission is based on the previous
      value of RT:</t>

      <figure>
        <artwork><![CDATA[
   RT = 2*RTprev + RAND*RTprev
      ]]></artwork>
      </figure>

      <t>MRT specifies an upper bound on the value of RT (disregarding the
      randomization added by the use of RAND). If MRT has a value of 0, there
      is no upper limit on the value of RT. Otherwise:</t>

      <figure>
        <artwork><![CDATA[
   if (RT > MRT)
      RT = MRT + RAND*MRT
      ]]></artwork>
      </figure>

      <t>MRC specifies an upper bound on the number of times a client may
      retransmit a message. Unless MRC is zero, the message exchange fails
      once the client has transmitted the message MRC times.</t>

      <t>MRD specifies an upper bound on the length of time a client may
      retransmit a message. Unless MRD is zero, the message exchange fails
      once MRD seconds have elapsed since the client first transmitted the
      message.</t>

      <t>If both MRC and MRD are non-zero, the message exchange fails whenever
      either of the conditions specified in the previous two paragraphs are
      met.</t>

      <t>If both MRC and MRD are zero, the client continues to transmit the
      message until it receives a response.</t>

      <!-- New text from section 6 of RFC7083 -->

      <t>A client is not expected to listen for a response during the entire
      RT period and may turn off listening capabilities after a certain time
      due to power consumption saving or other reasons. Of course, a
      client MUST listen for a Reconfigure if it has negotiated for its use
      with the server.</t>
    </section>

    <!-- ends: "14 from line 1258-->

    <section anchor="RFC3315-15" title="Message Validation">
      <!-- 15, line 1345-->

      <t>This section describes which options are valid in which kinds of
      message types.  Should a client or server receive messages which
      contain known options which are invalid for the message, this section
      explains how to process it.
      For example, an IA option is not allowed to appear in an
      Information-request message.</t>

      <t>Clients and servers MAY choose either to extract information from
      such a message if the information is of use to the recipient, or to
      ignore such message completely and just discard it.</t>

      <t>If a server receives a message that it considers invalid, it
      MAY send a Reply (or Advertise as appropriate) with a Server Identifier
      option, a Client Identifier option if one was included in the message
      and a Status Code option with status UnspecFail.</t>

      <t>Clients, relay agents and servers MUST NOT discard messages that
      contain unknown options (or instances of vendor options with unknown
      enterprise-numbers). These should be ignored as if they were not
      present.  This is critical to provide for later extension of the DHCP
      protocol.</t>

      <t>A server MUST discard any Solicit, Confirm, Rebind or
      Information-request messages it receives with a layer-3 unicast
      destination address.</t>

      <!-- Applied text from Section 5 of RFC7283 -->

      <t>A client or server MUST discard any received DHCP messages
      with an unknown message type.</t>

      <section title="Use of Transaction IDs">
        <!-- 15.1, line 1370-->

        <t>The "transaction-id" field holds a value used by clients and
        servers to synchronize server responses to client messages. A client
        SHOULD generate a random number that cannot easily be guessed or
        predicted to use as the transaction ID for each new message it sends.
        Note that if a client generates easily predictable transaction
        identifiers, it may become more vulnerable to certain kinds of attacks
        from off-path intruders. A client MUST leave the transaction ID
        unchanged in retransmissions of a message.</t>
      </section>

      <!-- ends: "15.1 from line 1370-->

      <section title="Solicit Message">
        <!-- 15.2, line 1382-->

        <t>Clients MUST discard any received Solicit messages.</t>

        <t>Servers MUST discard any Solicit messages that do not include a
        Client Identifier option or that do include a Server Identifier
        option.</t>
      </section>

      <!-- ends: "15.2 from line 1382-->

      <section title="Advertise Message">
        <!-- 15.3, line 1391-->

        <t>Clients MUST discard any received Advertise message that meets any
        of the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the message does not include a Client Identifier
            option.</t>

            <t hangText="-">the contents of the Client Identifier option does
            not match the client's DUID.</t>

            <t hangText="-">the "transaction-id" field value does not match
            the value the client used in its Solicit message.</t>
          </list></t>

        <t>Servers and relay agents MUST discard any received Advertise
        messages.</t>
      </section>

      <!-- ends: "15.3 from line 1391-->

      <section title="Request Message">
        <!-- 15.4, line 1416-->

        <t>Clients MUST discard any received Request messages.</t>

        <t>Servers MUST discard any received Request message that meets any of
        the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the contents of the Server Identifier option do
            not match the server's DUID.</t>

            <t hangText="-">the message does not include a Client Identifier
            option.</t>
          </list></t>
      </section>

      <!-- ends: "15.4 from line 1416-->

      <section title="Confirm Message">
        <!-- 15.5, line 1436-->

        <t>Clients MUST discard any received Confirm messages.</t>

        <t>Servers MUST discard any received Confirm messages that do not
        include a Client Identifier option or that do include a Server
        Identifier option.</t>
      </section>

      <!-- ends: "15.5 from line 1436-->

      <section title="Renew Message">
        <!-- 15.6, line 1445-->

        <t>Clients MUST discard any received Renew messages.</t>

        <t>Servers MUST discard any received Renew message that meets any of
        the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the contents of the Server Identifier option does
            not match the server's identifier.</t>

            <t hangText="-">the message does not include a Client Identifier
            option.</t>
          </list></t>
      </section>

      <!-- ends: "15.6 from line 1445-->

      <section title="Rebind Message">
        <!-- 15.7, line 1465-->

        <t>Clients MUST discard any received Rebind messages.</t>

        <t>Servers MUST discard any received Rebind messages that do not
        include a Client Identifier option or that do include a Server
        Identifier option.</t>
      </section>

      <!-- ends: "15.7 from line 1465-->

      <section title="Decline Messages">
        <!-- 15.8, line 1474-->

        <t>Clients MUST discard any received Decline messages.</t>

        <t>Servers MUST discard any received Decline message that meets any of
        the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the contents of the Server Identifier option does
            not match the server's identifier.</t>

            <t hangText="-">the message does not include a Client Identifier
            option.</t>
          </list></t>
      </section>

      <!-- ends: "15.8 from line 1474-->

      <section title="Release Message">
        <!-- 15.9, line 1494-->

        <t>Clients MUST discard any received Release messages.</t>

        <t>Servers MUST discard any received Release message that meets any of
        the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the contents of the Server Identifier option does
            not match the server's identifier.</t>

            <t hangText="-">the message does not include a Client Identifier
            option.</t>
          </list></t>
      </section>

      <!-- ends: "15.9 from line 1494-->

      <section title="Reply Message">
        <!-- 15.10, line 1514-->

        <t>Clients MUST discard any received Reply message that meets any of
        the following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the "transaction-id" field in the message does not
            match the value used in the original message.</t>
          </list></t>

        <t>If the client included a Client Identifier option in the original
        message, the Reply message MUST include a Client Identifier option and
        the contents of the Client Identifier option MUST match the DUID of
        the client; OR, if the client did not include a Client Identifier
        option in the original message, the Reply message MUST NOT include a
        Client Identifier option.</t>

        <t>Servers and relay agents MUST discard any received Reply
        messages.</t>
      </section>

      <!-- ends: "15.10 from line 1514-->

      <section title="Reconfigure Message">
        <!-- 15.11, line 1538-->

        <t>Servers and relay agents MUST discard any received Reconfigure
        messages.</t>

        <t>Clients MUST discard any Reconfigure message that meets any of the
        following conditions: <list hangIndent="3" style="hanging">
            <t hangText="-">the message was not unicast to the client.</t>

            <t hangText="-">the message does not include a Server Identifier
            option.</t>

            <t hangText="-">the message does not include a Client Identifier
            option that contains the client's DUID.</t>

            <t hangText="-">the message does not include a Reconfigure Message
            option.</t>

            <t hangText="-">the Reconfigure Message option msg-type is not a
            valid value.</t>

            <t hangText="-">the message does not include DHCP authentication:
            <list hangIndent="3" style="hanging">
                <t hangText="*">the message does not include an Authentication
                option.</t>

                <t hangText="*">the message does not pass the authentication
                validation performed by the client.</t>
              </list></t>
          </list></t>
      </section>

      <!-- ends: "15.11 from line 1538-->

      <section title="Information-request Message">
        <!-- 15.12, line 1578-->

        <t>Clients MUST discard any received Information-request messages.</t>

        <t>Servers MUST discard any received Information-request message that
        meets any of the following conditions: <list hangIndent="3"
            style="hanging">
            <t hangText="-">The message includes a Server Identifier option
            and the DUID in the option does not match the server's DUID.</t>

            <t hangText="-">The message includes an IA option.</t>
          </list></t>
      </section>

      <!-- ends: "15.12 from line 1578-->

      <section title="Relay-forward Message">
        <!-- 15.13, line 1595-->

        <t>Clients MUST discard any received Relay-forward messages.</t>
      </section>

      <!-- ends: "15.13 from line 1595-->

      <section title="Relay-reply Message">
        <!-- 15.14, line 1600-->

        <t>Clients and servers MUST discard any received Relay-reply
        messages.</t>
      </section>

      <!-- ends: "15.14 from line 1600-->
    </section>

    <!-- ends: "15 from line 1345-->

    <section anchor="RFC3315-16" title="Client Source Address and Interface Selection">
      <!-- 16, line 1605-->

      <t>Client's behavior is different depending on the purpose of the
      configuration.</t>

      <section anchor="if-addr-sel-addr-assignment"
               title="Address, Interface Selection for Address Assignment">
        <t>When a client sends a DHCP message to the
        All_DHCP_Relay_Agents_and_Servers multicast address, it SHOULD send the message
        through the interface for which configuration information
        (including the addresses) is being
        requested. However, the client MAY send the message through another
        interface if the interface which configuration is being requested for 
        is a logical interface without direct link attachment or the client is 
        certain that two interfaces are attached to the same link. 

        <!-- tomek: ok, this is a bit confusing. The intention is to say:
        - if you want to configure interface X, send you packets over X
        - you may send it over Y, if you're sure X and Y are connected to the same
          link
        - if you're doing weird stuff with virtual interfaces, that's fine,
          just be careful, ok?
        --><!-- tomek: removed this sentence. Source address selection is not covered
        by DHCPv6. --><!-- The client MUST use a link-local address assigned to the interface
        for which it is requesting configuration information as the source
        address in the header of the IPv6 datagram. --></t>

        <t>When a client sends a DHCP message directly to a server using
        unicast (after receiving the Server Unicast option from that server),
        the source address in the header of the IPv6 datagram MUST be an
        address assigned to the interface for which the client is interested
        in obtaining configuration and which is suitable for use by the server
        in responding to the client.</t>
      </section>

      <section title="Address, Interface Selection for Prefix Delegation">
        <t>Delegated prefixes are not associated with a particular interface
        in the same way as addresses are for address assignment, as mentioned
        in <xref target="if-addr-sel-addr-assignment"/> above.</t>

        <t>When a client sends a DHCP message
        for the purpose of prefix delegation, it SHOULD be sent on the
        interface associated with the upstream router (ISP network). The
        upstream interface is typically determined by configuration. This rule
        applies even in the case where a separate IA_PD is used for each
        downstream interface.</t>

        <t>When a client sends a DHCP message directly to a
        server using unicast (after receiving the Server Unicast
        option from that server), the source address SHOULD be an
        address from the upstream interface and which is suitable for use by
        the server in responding to the client.</t>
      </section>
    </section>

    <!-- ends: "16 from line 1605-->

    <section anchor="configuration-exchange"
             title="DHCP Configuration Exchanges">
      <t>A client initiates a message exchange with a server or servers to
      acquire or update configuration information of interest. A client has
      many reasons to initiate the configuration exchange:
      <list hangIndent="6" style="hanging">
        <t hangText="1."> as part of the operating system configuration/bootstrap process,</t>
        <t hangText="2."> when requested to do so by the application layer (through an
        operating system specific API),</t>
        <t hangText="3."> when required by Stateless Address Autoconfiguration (as defined
        in <xref target="RFC2462"/> Section 5.2),</t>
        <t hangText="4."> as required to extend the lifetime of address(es) and/or
        delegated prefix(es), using Renew and Rebind messages,</t>
        <t hangText="4."> or when requested to do so by server - upon the receipt of a
        Reconfigure message.</t>
      </list>
      </t>

      <t>A DHCP client that does not need to have a DHCP server assign it IP
      addresses or delegated prefixes, can obtain configuration information
      such as a list of available DNS servers <xref target="RFC3646"/> or
      NTP servers <xref target="RFC4075"/> through a single message and
      reply exchange with a DHCP server.  To obtain configuration
      information the client first sends an Information-request message
      (see <xref target="RFC3315-18.1.5"/>) to the All_DHCP_Relay_Agents_and_Servers
      multicast address.  Servers respond with a Reply message containing
      the configuration information for the client (see <xref target="RFC3315-18.2.5"/>).</t>

      <t>To request the assignment of one or more addresses or delegated
      prefixes, a client first locates a DHCP server and then requests the
      assignment of addresses/prefixes and other configuration information from the
      server. The client does this by sending the Solicit message
      (see <xref target="solicit-create-transmit"></xref>) to the
      All_DHCP_Relay_Agents_and_Servers multicast address and collecting
      Advertise messages from the servers which respond to the client's
      message and selects a server from which it wants to obtain configuration
      information. This process is referred to as server discovery. When
      the client has selected the server it sends a Request
      message to this server as described in the <xref
      target="request-create-transmit"></xref>.</t>

      <t>A client willing to perform the Solicit/Reply message
      exchange described in <xref
      target="solicit-create-transmit"></xref> includes a Rapid
      Commit option (see <xref target="RFC3315-22.14"></xref>) in its
      Solicit message.</t>

      <t>The client has many reasons to initiate the configuration exchange:
      <list hangIndent="6" style="hanging">
        <t hangText="1."> as part of the operating system configuration/bootstrap process,</t>
        <t hangText="2."> when requested to do so by the application layer (through an
        operating system specific API),</t>
        <t hangText="3."> when required by Stateless Address Autoconfiguration (as defined
        in <xref target="RFC2462"/>)</t>
        <t hangText="4."> or as required to extend the lifetime of address(es) and/or
        delegated prefix(es), using Renew and Rebind messages.</t>
      </list>
      </t>

      <t>A server may initiate a message exchange with a client by sending a
      Reconfigure message to cause the client to send a Renew, Rebind or
      Information-request message to refresh its configuration information as
      soon as the Reconfigure message is received by the client.</t>

      <!-- The following paragraph has been moved from the 'DHCP Server Solicitation -->

      <t>The client is responsible for creating IAs and requesting that a
      server assign addresses and/or delegated prefixes to the IAs. The
      client first creates the IAs and assigns IAIDs to them. The client then
      transmits a Solicit message containing the IA options describing the
      IAs. The client MUST NOT be using any of the addresses or delegated
      prefixes for which it tries to obtain the bindings by sending the
      Solicit message. In particular, if the client had some valid bindings
      and has chosen to start the server discovery process to obtain the
      same bindings from a different server, the client MUST stop using the
      addresses and delegated prefixes for the bindings it had obtained from
      the previous server (see <xref target="RFC3315-18.1.6"/> for more details
      on what stop using means), and which it is now trying to obtain from a
      new server.</t>

      <t>Servers that can assign addresses or delegated prefixes to the IAs
      respond to the client with an Advertise message or Reply message if the
      client included a Rapid Commit option and the server is configured to
      accept it.</t>

      <t>If the server responds with an Advertise message, the client initiates
      a configuration exchange as described in
      <xref target="request-create-transmit"/>.</t>

      <t>A server may initiate a message exchange with a client by sending a
      Reconfigure message to cause the client to send a Renew, Rebind or
      Information-request message to refresh its configuration information as
      soon as the Reconfigure message is received by the client.</t>

      <t><xref target="FigMsgFlow"/> shows a timeline diagram of the
      messages exchanged between a client and two servers for the
      typical lifecycle of one or more leases. This is a combination
      of the 4-message exchange (to select a server and assign the
      lease(s) to the client) followed by two 2-message exchanges (to
      extend the lifetime on the lease(s) and eventually release the
      lease(s)).</t>

      <figure align="center" anchor="FigMsgFlow"
              title="Timeline diagram of the messages exchanged between
                     a client and two servers for the typical lifecycle
                     of one or more leases">

        <artwork align="left"><![CDATA[
             Server                          Server
         (not selected)      Client        (selected)

               v               v               v
               |               |               |
               |     Begins initialization     |
               |               |               |
  start of     | _____________/|\_____________ |
  4-message    |/ Solicit      | Solicit      \|
  exchange     |               |               |
           Determines          |          Determines
          configuration        |         configuration
               |               |               |
               |\              |  ____________/|
               | \________     | /Advertise    |
               | Advertise\    |/              |
               |           \   |               |
               |      Collects Advertises      |
               |             \ |               |
               |     Selects configuration     |
               |               |               |
               | _____________/|\_____________ |
               |/ Request      |  Request     \|
               |               |               |
               |               |     Commits configuration
               |               |               |
  end of       |               | _____________/|
  4-message    |               |/ Reply        |
  exchange     |               |               |
               |    Initialization complete    |
               |               |               |
               .               .               .
               .               .               .
               |   T1 (Renewal) Timer Expires  |
               |               |               |
  2-message    | _____________/|\_____________ |
  exchange     |/ Renew        |  Renew       \|
               |               |               |
               |               | Commits extended lease(s)
               |               |               |
               |               | _____________/|
               |               |/ Reply        |
               .               .               .
               .               .               .
               |               |               |
               |      Graceful shutdown        |
               |               |               |
  2-message    | _____________/|\_____________ |
  exchange     |/ Release      |  Release     \|
               |               |               |
               |               |         Discards lease(s)
               |               |               |
               |               | _____________/|
               |               |/ Reply        |
               |               |               |
               v               v               v
        ]]></artwork>
      </figure>

     <section title="A Single Exchange for Multiple IA Options">
     <t>The client and server use the IA_PD option
      to exchange information about prefix(es) in much the same way as IA_NA
      and IA_TA options are used for assigned addresses. Typically, a single
      DHCP session is used to exchange information about addresses and
      prefixes, i.e., IA_NA and IA_PD options are carried in the same
     message.</t>
     <t>Clients SHOULD use a single transaction for all of its IA
     options. Servers SHOULD assign the same T1/T2 values to all IA
     options configured for a client, so the client will generate a
     single transaction when renewing its leases.  For a rationale of
     this approach, see Section 4.2 of <xref target="RFC7550"/>.</t>
     </section>

      <section title="Client Behavior">
        <!-- 18.1, line 1953-->

        <t>A client uses the Solicit message to discover DHCP servers
        configured to assign leases or return other configuration parameters
        on the link to which the client is attached.</t>

        <t>A client uses Request, Renew, Rebind, Release and Decline messages
        during the normal life cycle of addresses and delegated prefixes. When
        a client detects it may have moved to a new link, it uses Confirm if
        it only has addresses and Rebind if it has delegated prefixes (and
        addresses). It uses Information-request messages when it needs
        configuration information but no addresses and no prefixes.</t>

        <!-- Ticket 160 text-->

        <t>When a client requests multiple IA option types or multiple
        instances of the same IA types in a Solicit, Request, Renew, or
        Rebind, it is possible
        that the available server(s) may only be configured to offer a subset
        of them. When possible, the client SHOULD use the best configuration
        available and continue to request the additional IAs in subsequent
        messages (<xref target="RFC7550"/>). This allows the client to maintain
        a single session and state machine. In practice, especially in the
        case of handling IA_NA and IA_PD requests (<xref target="RFC7084"/>),
        this situation should be rare or a result of a temporary operational
        error.
        Thus, it is more likely for the client to get all configuration if
        it continues, in each subsequent configuration exchange, to request
        all the configuration information it is programmed to try to obtain,
        including any stateful configuration options for which no results
        were returned in previous message exchanges.</t>

        <t>Upon receipt of a Reconfigure message from the server, a client
        responds with a Renew, Rebind or an Information-request message as
        indicated by the Reconfigure Message option.
        The client SHOULD be suspicious of the Reconfigure message (they
        may be faked), and it MUST NOT abandon any resources it might have
        already obtained.
        The client SHOULD treat the Reconfigure message as if the T1 timer
        had expired.  The client will expect the server to send IAs
        and/or other configuration information to the client in a Reply
        message.</t>

        <t>If the client has a source address of sufficient scope that can be
        used by the server as a return address, and the client has received a
        Server Unicast option (<xref target="RFC3315-22.12"></xref>) from the
        server, the client SHOULD unicast any Request, Renew, Release and
        Decline messages to the server.</t>


        <t>Use of unicast may avoid delays due to the relaying of messages
            by relay agents, as well as avoid overhead and duplicate responses
            by servers due to the delivery of client messages to multiple
            servers. However, requiring the client to relay all DHCP messages
            through a relay agent enables the inclusion of relay agent options
            in all messages sent by the client. The server should enable the
            use of unicast only when relay agent options will not be used.</t>

        <section anchor="solicit-create-transmit"
                 title="Creation and Transmission of Solicit Messages">
          <!-- 17.1.1, line 1651-->

          <t>The client sets the "msg-type" field to SOLICIT. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client includes IA options for any IAs to
          which it wants the server to assign leases.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client uses IA_NA options to request the assignment of
          non-temporary addresses, IA_TA options to request the assignment of
          temporary addresses, and IA_PD options to request prefix delegation.
          Either IA_NA, IA_TA or IA_PD options, or a combination of all, can
          be included in DHCP messages. In addition, multiple instances of any
          IA option type can be included.</t>

          <t>The client MAY include addresses in IA Address options encapsulated
          within IA_NA and IA_TA options as hints to the server about the
          addresses for which the client has a preference.</t>

          <t>The client MAY include values in IA Prefix options
          encapsulated within IA_PD options as hints for the delegated prefix
          and/or prefix length for which the client has a preference. See
          <xref target="RFC3315-18.1.3"/> for more on prefix length hints.</t>

          <t>The client MUST include an Option Request option (see <xref
          target="RFC3315-22.7"></xref>) to request the SOL_MAX_RT option (see
          <xref target="SOL_MAX_RT_option"></xref>) and any other options the
          client is interested in receiving. The client MAY additionally
          include instances of those options that are identified in the Option
          Request option, with data values as hints to the server about
          parameter values the client would like to have returned.</t>

          <t>The client includes a Reconfigure Accept option (see <xref
          target="RFC3315-22.20"></xref>) if the client is willing to accept
          Reconfigure messages from the server.</t>

          <t>The client MUST NOT include any other options in the Solicit
          message, except as specifically allowed in the definition of
          individual options.</t>

          <!-- ends: "17.1.1 from line 1651-->

          <!-- 17.1.2, line 1682-->

          <t>The first Solicit message from the client on the interface SHOULD
          be delayed by a random amount of time between 0 and SOL_MAX_DELAY.
          This mechanism is essential for devices that are not battery powered,
          as they may suffer from power failure. After recovering from a
          power outage, many devices may start their transmission at the same
          time. This is much less of a concern for battery powered devices.</t>

          <t>In the case of a Solicit message transmitted when DHCP is
          initiated,  the delay gives the amount of time to
          wait after IPv6 Neighbor Discovery causes the client to invoke the
          stateful address autoconfiguration protocol (see section 5.5.3 of
          <xref target="RFC2462"></xref>). This random delay desynchronizes
          clients which start at the same time (for example, after a power
          outage).</t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">SOL_TIMEOUT</t>

              <t hangText="   MRT">SOL_MAX_RT</t>

              <t hangText="   MRC">0</t>

              <t hangText="   MRD">0</t>
            </list></t>

            <t>A client that wishes to use the Rapid Commit 2-message exchange
            includes a Rapid Commit option in its Solicit message.
            The client may receive a number of different replies from
            different servers.  The client will make note of any valid Advertise
            messages that it receives.  The client will discard any Reply
            messages that do not contain the Rapid Commit option.
            </t>
            <t>Upon receipt of a valid Reply with the Rapid Commit option,
            the client processes the message as described in
            <xref target="RFC3315-18.1.8"></xref></t>
            <t>At the end of the first RT period, if no suitable Reply
            messages are received, but the client has valid Advertise
            messages, then the client processes the Advertise as
            described in <xref target="RFC3315-17.1.3"></xref>.</t>

          <t>If the client subsequently receives a valid Reply message that
          includes a Rapid Commit option, it either:</t>

          <t><list hangIndent="3" style="hanging">
              <t hangText="-">processes the Reply message as described in
              <xref target="RFC3315-18.1.8"></xref>, and discards any Reply
              messages received in response to the Request message, or</t>

              <t hangText="-">processes any Reply messages received in
              response to the Request message and discards the Reply message
              that includes the Rapid Commit option.</t>
            </list></t>

          <t>If the client is waiting for an Advertise message, the mechanism
          in <xref target="RFC3315-14"></xref> is modified as follows for use
          in the transmission of Solicit messages. The message exchange is not
          terminated by the receipt of an Advertise before the first RT has
          elapsed. Rather, the client collects valid Advertise messages until the
          first RT has elapsed. Also, the first RT MUST be selected to be
          strictly greater than IRT by choosing RAND to be strictly greater
          than 0.</t>

          <t>A client MUST collect valid Advertise messages for the first RT
          seconds, unless it receives a valid Advertise message with a preference
          value of 255. The preference value is carried in the Preference
          option (<xref target="RFC3315-22.8"></xref>). Any valid Advertise that
          does not include a Preference option is considered to have a
          preference value of 0. If the client receives a valid Advertise message
          that includes a Preference option with a preference value of 255,
          the client immediately begins a client-initiated message exchange
          (as described in <xref target="request-create-transmit"></xref>) by
          sending a Request message to the server from which the Advertise
          message was received. If the client receives a valid Advertise message
          that does not include a Preference option with a preference value of
          255, the client continues to wait until the first RT elapses. If the
          first RT elapses and the client has received a valid Advertise message,
          the client SHOULD continue with a client-initiated message exchange
          by sending a Request message.</t>

          <t>If the client does not receive any valid Advertise messages before the
          first RT has elapsed, it begins the retransmission mechanism
          described in <xref target="RFC3315-14"></xref>. The client
          terminates the retransmission process as soon as it receives any
          valid Advertise message, and the client acts on the received Advertise
          message without waiting for any additional Advertise messages.</t>

          <t>A DHCP client SHOULD choose MRC and MRD to be 0. If the DHCP
          client is configured with either MRC or MRD set to a value other
          than 0, it MUST stop trying to configure the interface if the
          message exchange fails. After the DHCP client stops trying to
          configure the interface, it SHOULD restart the reconfiguration
          process after some external event, such as user input, system
          restart, or when the client is attached to a new link.</t>

          <!-- ends: "17.1.2 from line 1682-->
        </section>

        <section anchor="request-create-transmit"
                 title="Creation and Transmission of Request Messages">
          <!-- 18.1.1, line 1981-->

          <t>The client uses a Request message to populate IAs with leases and
          obtain other configuration information. The client includes one or
          more IA options in the Request message. The server then returns
          leases and other information about the IAs to the client in IA
          options in a Reply message.</t>

          <t>The client generates a transaction ID and inserts this value in
          the "transaction-id" field.</t>

          <t>The client MUST include the identifier of the destination server in a
          Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client adds any other appropriate options,
          including one or more IA options.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client MUST include an Option Request option (see <xref
          target="RFC3315-22.7"></xref>) to request the SOL_MAX_RT option (see
          <xref target="SOL_MAX_RT_option"></xref>) and any other options the
          client is interested in receiving. The client MAY additionally
          include instances of those options that are identified in the Option
          Request option, with data values as hints to the server about
          parameter values the client would like to have returned.</t>

          <t>The client includes a Reconfigure Accept option (see <xref
          target="RFC3315-22.20"></xref>) if the client is willing to
          accept Reconfigure messages from the server.</t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">REQ_TIMEOUT</t>

              <t hangText="   MRT">REQ_MAX_RT</t>

              <t hangText="   MRC">REQ_MAX_RC</t>

              <t hangText="   MRD">0</t>
            </list></t>

          <t>If the message exchange fails, the client takes an action based
          on the client's local policy. Examples of actions the client might
          take include: <list hangIndent="3" style="hanging">
              <t hangText="-">Select another server from a list of servers
              known to the client; for example, servers that responded with an
              Advertise message.</t>

              <t hangText="-">Initiate the server discovery process described
              in <xref target="configuration-exchange"></xref>.</t>

              <t hangText="-">Terminate the configuration process and report
              failure.</t>
            </list></t>
        </section>

        <!-- ends: "18.1.1 from line 1981-->

        <section anchor="RFC3315-18.1.2"
                 title="Creation and Transmission of Confirm Messages">
          <!-- 18.1.2, line 2037-->

          <t>Whenever a client may have moved to a new link, the
          prefixes/addresses assigned to the interfaces on that link may no
          longer be appropriate for the link to which the client is attached.
          Examples of times when a client may have moved to a new link
          include: <list hangIndent="3" style="hanging">
              <t hangText="o">The client reboots (and has stable storage and
              persisted DHCP state).</t>

              <t hangText="o">The client is reconnected to a link on which
              it has obtained leases.</t>

              <t hangText="o">The client returns from sleep mode.</t>

              <t hangText="o">The client changes access points (such as if
              using a wireless technology).</t>
            </list></t>

          <t>In any situation when a client may have moved to a new link and
          the client does not have any delegated prefixes obtained from the
          DHCP server from which it has obtained the addresses, the client
          SHOULD initiate a Confirm/Reply message exchange. The client
          includes any IAs assigned to the interface that may have moved to a
          new link, along with the addresses associated with those IAs, in its
          Confirm message. Any responding servers will indicate whether those
          addresses are appropriate for the link to which the client is
          attached with the status in the Reply message it returns to the
          client.</t>

          <t>If the client has any valid delegated prefixes obtained from the
          DHCP server, the client MUST
          initiate a Rebind/Reply message exchange as described in <xref
          target="RFC3315-18.1.4"></xref>, with the exception that the
          retransmission parameters should be set as for the Confirm message
          as described below. The client includes IA_NAs, IA_TAs, and IA_PDs,
          along with the associated leases, in its Rebind message.</t>

          <t>The client sets the "msg-type" field to CONFIRM. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client includes IA options for all of the
          IAs assigned to the interface for which the Confirm message is being
          sent. The IA options include all of the addresses the client
          currently has associated with those IAs. The client SHOULD set the
          T1 and T2 fields in any IA_NA options and the preferred-lifetime and
          valid-lifetime fields in the IA Address options to 0, as the server
          will ignore these fields.</t>

          <t>The first Confirm message from the client on the interface MUST
          be delayed by a random amount of time between 0 and CNF_MAX_DELAY.
          The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">CNF_TIMEOUT</t>

              <t hangText="   MRT">CNF_MAX_RT</t>

              <t hangText="   MRC">0</t>

              <t hangText="   MRD">CNF_MAX_RD</t>
            </list></t>

          <t>If the client receives no responses before the message
          transmission process terminates, as described in <xref
          target="RFC3315-14"></xref>, the client SHOULD continue to use any
          leases, using the last known lifetimes for those leases,
          and SHOULD continue to use any other previously obtained
          configuration parameters.</t>
        </section>

        <!-- ends: "18.1.2 from line 2037-->

        <section anchor="RFC3315-18.1.3"
                 title="Creation and Transmission of Renew Messages">
          <!-- 18.1.3, line 2100-->

          <t>To extend the valid and preferred lifetimes for the leases
          assigned to the IAs and obtain new addresses or delegated prefixes
          for IAs, the client sends a Renew message to the server from which
          the leases were obtained, which includes IA options for the IAs
          whose lease lifetimes are to be extended. The client includes IA
          Address options within IA_NA and IA_TA options for the addresses
          assigned to the IAs. The client includes IA Prefix options within
          IA_PD options for the delegated prefixes assigned to the IAs.</t>

          <t>The server controls the time at which the client should contact the
          server to extend the lifetimes on assigned leases through the T1 and
          T2 parameters assigned to an IA. However, as the client
          Renews/Rebinds all IAs from the server at the same time, the client
          MUST select a T1 and T2 time from all IA options, which will
          guarantee that the client will send Renew/Rebind messages not later
          than at the T1/T2 times associated with any of the client's bindings
          (earliest T1/T2).</t>

          <t>At time T1, the client initiates a Renew/Reply message exchange
          to extend the lifetimes on any leases in the IA.</t>

          <t>A client MUST also initiate a Renew/Reply message exchange before
          time T1 if the client's link-local address used in previous
          interactions with the server is no longer valid and it is willing
          to receive Reconfigure messages.</t>

          <t>If T1 or T2 had been set to 0 by the server (for an IA_NA or
          IA_PD) or there are no T1 or T2 times (for an IA_TA) in a previous
          Reply, the client may send a Renew or Rebind message, respectively,
          at the client's discretion. The client MUST follow the rules defined
          in <xref target="t1-t2-0"></xref>.</t>

          <t>The client sets the "msg-type" field to RENEW. The client
          generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client MUST include a Server Identifier option in the Renew
          message, identifying the server with which the client most recently
          communicated.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server. The client adds any appropriate options,
          including one or more IA options.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>For IAs to which leases have been assigned, the client includes a
          corresponding IA option containing an IA Address option for each
          address assigned to the IA and IA Prefix option for each prefix
          assigned to the IA. The client MUST NOT include addresses and
          prefixes in any IA option that the client did not obtain from the
          server or that are no longer valid (that have a valid lifetime of
          0).</t>

          <t>The client MAY include an IA option for each binding it desires
          but has been unable to obtain. In this case, if the client includes
          the IA_PD option to request prefix delegation, the client MAY
          include the IA Prefix option encapsulated within the IA_PD option,
          with the IPv6-prefix field set to 0 and the "prefix-length" field
          set to the desired length of the prefix to be delegated. The server
          MAY use this value as a hint for the prefix length. The client
          SHOULD NOT include IA Prefix option with the IPv6-prefix field set
          to 0 unless it is supplying a hint for the prefix length.</t>

          <t>The client includes Option Request option
          (see <xref target="RFC3315-22.7"></xref>) to request the SOL_MAX_RT
          option (see <xref target="SOL_MAX_RT_option"></xref>) and any other
          options the client is interested in receiving. The client MAY
          include options with data values as hints to the server about
          parameter values the client would like to have returned.</t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="IRT">REN_TIMEOUT</t>

              <t hangText="MRT">REN_MAX_RT</t>

              <t hangText="MRC">0</t>

              <t hangText="MRD">Remaining time until earliest T2</t>
            </list></t>

          <t>The message exchange is terminated when earliest time T2 is
          reached. If the client is responding to a Reconfigure, the client
          ignores and discards the Reconfigure message. In this case, the
          client continues to operate as if Reconfigure message was not
          received, i.e., it uses T1/T2 times associated with the client's
          leases to determine when it should send Renew or Rebind to the
          server. If the terminated Renew exchange was not initiated as a
          result of receiving a Reconfigure message, the client begins a
          Rebind message exchange (see <xref target="RFC3315-18.1.4"></xref>)
          when the earliest time T2 is reached.</t>
        </section>

        <!-- ends: "18.1.3 from line 2100-->

        <section anchor="RFC3315-18.1.4"
                 title="Creation and Transmission of Rebind Messages">
          <!-- 18.1.4, line 2160-->

          <t>At time T2 (which will only be reached if the server to which the
          Renew message was sent starting at time T1 has not responded), the
          client initiates a Rebind/Reply message exchange with any available
          server.</t>

          <t>A Rebind is also used to verify delegated prefix bindings but
          with different retransmission parameters as described in
          <xref target="RFC3315-18.1.2"/>.</t>

          <t>The client constructs the Rebind message as described in <xref
          target="RFC3315-18.1.3"></xref> with the following differences:
          <list style="hanging">
              <t hangText="-">The client sets the "msg-type" field to
              REBIND.</t>

              <t hangText="-">The client does not include the Server
              Identifier option in the Rebind message.</t>
            </list></t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">REB_TIMEOUT</t>

              <t hangText="   MRT">REB_MAX_RT</t>

              <t hangText="   MRC">0</t>

              <t hangText="   MRD">Remaining time until valid lifetimes of all
              leases in all IAs have expired</t>
            </list></t>

          <t>If all leases for an IA have expired, the client may choose to
          include this IA in subsequent Rebind messages to indicate that the
          client is interested in assignment of the leases to this IA.</t>

          <t>The message exchange is terminated when the valid lifetimes of
          all leases across all IAs have expired, at which time the client
          uses the Solicit message to locate a new DHCP server and sends a
          Request for the expired IAs to the new server. If the terminated
          Rebind exchange was initiated as a result of receiving a Reconfigure
          message, the client ignores and discards the Reconfigure
          message.</t>
        </section>

        <!-- ends: "18.1.4 from line 2160-->

        <section anchor="RFC3315-18.1.5"
                 title="Creation and Transmission of Information-request Messages">
          <!-- 18.1.5, line 2215-->

          <t>The client uses an Information-request message to obtain
          configuration information without having addresses and/or delegated
          prefixes assigned to it.</t>

          <t>The client sets the "msg-type" field to INFORMATION-REQUEST. The
          client generates a transaction ID and inserts this value in the
          "transaction-id" field.</t>

          <t>The client SHOULD include a Client Identifier option to identify
          itself to the server (see section 4.3.1 of <xref target="RFC7844"/> for
          reasons why a client may not want to include this option). If the
          client does not include a Client
          Identifier option, the server will not be able to return any
          client-specific options to the client, or the server may choose not
          to respond to the message at all.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client MUST include an Option Request option (see <xref
          target="RFC3315-22.7"></xref>) to request the INF_MAX_RT option (see
          <xref target="INF_MAX_RT_option"></xref>), the Information
          Refresh Time option (see <xref target="RFC4242-Option"/>), and any other options the
          client is interested in receiving. The client MAY include options
          with data values as hints to the server about parameter values the
          client would like to have returned.</t>

          <t>When responding to a Reconfigure, the client includes a Server
          Identifier option with the identifier from the Reconfigure message
          to which the client is responding.</t>

          <t>The first Information-request message from the client on the
          interface MUST be delayed by a random amount of time between 0 and
          INF_MAX_DELAY. The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">INF_TIMEOUT</t>

              <t hangText="   MRT">INF_MAX_RT</t>

              <t hangText="   MRC">0</t>

              <t hangText="   MRD">0</t>
          </list></t>

        </section>

        <!-- ends: "18.1.5 from line 2215-->

        <section anchor="RFC3315-18.1.6"
                 title="Creation and Transmission of Release Messages">
          <!-- 18.1.6, line 2251-->

          <t>To release one or more leases, a client sends a Release message
          to the server.</t>

          <t>The client sets the "msg-type" field to RELEASE. The client
          generates a transaction ID and places this value in the
          "transaction-id" field.</t>

          <t>The client places the identifier of the server that allocated the
          lease(s) in a Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client includes options containing the IAs
          for the leases it is releasing in the "options" field. The leases to
          be released MUST be included in the IAs. Any leases for the IAs the
          client wishes to continue to use MUST NOT be added to the IAs.</t>

          <t>The client MUST stop using all of the leases being released
          before the client begins the Release message exchange process. For
          an address, this means the address MUST have been removed from the
          interface. For a delegated prefix, this means the prefix MUST have
          been advertised with a Preferred Lifetime and a Valid Lifetime of
          zero in a Router Advertisement message as described in Section
          5.5.3, (e) of <xref target="RFC4862"></xref> - also see L-13 in
          Section 4.3 of <xref target="RFC7084"></xref>.</t>

          <t>The client MUST NOT use any of the addresses it is releasing as
          the source address in the Release message or in any subsequently
          transmitted message.</t>

          <t>Because Release messages may be lost, the client should
          retransmit the Release if no Reply is received. However, there are
          scenarios where the client may not wish to wait for the normal
          retransmission timeout before giving up (e.g., on power down).
          Implementations SHOULD retransmit one or more times, but MAY choose
          to terminate the retransmission procedure early.</t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">REL_TIMEOUT</t>

              <t hangText="   MRT">0</t>

              <t hangText="   MRC">REL_MAX_RC</t>

              <t hangText="   MRD">0</t>
            </list></t>

          <t>If leases are released but the Reply from a DHCP server is lost,
          the client will retransmit the Release message, and the server may
          respond with a Reply indicating a status of NoBinding. Therefore,
          the client does not treat a Reply message with a status of NoBinding
          in a Release message exchange as if it indicates an error.</t>

          <t>Note that if the client fails to release the lease, each lease
          assigned to the IA will be reclaimed by the server when the valid
          lifetime of that lease expires.</t>
        </section>

        <!-- ends: "18.1.6 from line 2251-->

        <section anchor="RFC3315-18.1.7"
                 title="Creation and Transmission of Decline Messages">
          <!-- 18.1.7, line 2304-->

          <t>If a client detects that one or more addresses assigned to it by
          a server are already in use by another node, the client sends a
          Decline message to the server to inform it that the address is
          suspect.</t>

          <t>The Decline message is not used in prefix delegation and thus the
          client MUST NOT include IA_PD options in the Decline message.</t>

          <t>The client sets the "msg-type" field to DECLINE. The client
          generates a transaction ID and places this value in the
          "transaction-id" field.</t>

          <t>The client places the identifier of the server that allocated the
          address(es) in a Server Identifier option.</t>

          <t>The client MUST include a Client Identifier option to identify
          itself to the server.</t>

          <t>The client MUST include an Elapsed Time option (see
          <xref target="RFC3315-22.9"/>) to indicate how long the client has
          been trying to complete the current DHCP message exchange.</t>

          <t>The client includes options containing the IAs
          for the addresses it is declining in the "options" field. The
          addresses to be declined MUST be included in the IAs. Any addresses
          for the IAs the client wishes to continue to use should not be in
          added to the IAs.</t>

          <t>The client MUST NOT use any of the addresses it is declining as
          the source address in the Decline message or in any subsequently
          transmitted message.</t>

          <t>The client transmits the message according to <xref
          target="RFC3315-14"></xref>, using the following parameters: <list
              hangIndent="11" style="hanging">
              <t hangText="   IRT">DEC_TIMEOUT</t>

              <t hangText="   MRT">0</t>

              <t hangText="   MRC">DEC_MAX_RC</t>

              <t hangText="   MRD">0</t>
            </list></t>

          <t>If addresses are declined but the Reply from a DHCP server is
          lost, the client will retransmit the Decline message, and the server
          may respond with a Reply indicating a status of NoBinding.
          Therefore, the client does not treat a Reply message with a status
          of NoBinding in a Decline message exchange as if it indicates an
          error.</t>

          <!-- Added text from section 4.6 of RFC 7550 -->

          <t>The client SHOULD NOT send a Release message for other bindings
          it may have received just because it sent a Decline message. The
          client SHOULD retain the non-conflicting bindings. The client SHOULD
          treat the failure to acquire a binding as a result of the conflict,
          to be equivalent to not having received the binding, insofar as it
          behaves when sending Renew and Rebind messages.</t>
        </section>

        <!-- ends: "18.1.7 from line 2304-->

        <section anchor="RFC3315-17.1.3" title="Receipt of Advertise Messages">
          <!-- 17.1.3, line 1750-->

          <!-- The new paragraph to introduce the requirement stated in first
               paragraph of section 6. of RFC7083. -->

          <t>The client MUST process SOL_MAX_RT and INF_MAX_RT options in an
          Advertise message, even if the message contains a Status Code option
          indicating a failure, and the Advertise message will be discarded by
          the client. A client SHOULD only update its SOL_MAX_RT and INF_MAX_RT
          values if all received Advertise messages that contained the
          corresponding option specified the same value, otherwise it should
          use the default value (see <xref target="RFC3315-5.5"/>).</t>

          <!-- Change from RFC 7550 section 4.1/4.2 has been applied. 6/1/2015 -->

          <t>The client MUST ignore any Advertise message that contains no
          addresses (IA Address options encapsulated in IA_NA or IA_TA options)
          and no delegated prefixes (IA Prefix options encapsulated in IA_PD
          options) with the exception that the client: <list hangIndent="3"
              style="hanging">
              <t hangText="-">MUST process an included SOL_MAX_RT option
              and</t>

              <t hangText="-">MUST process an included INF_MAX_RT option.</t>
            </list></t>

          <t>A client can display any associated status message(s) to the user
          or activity log.</t>

          <t>The client ignoring this Advertise message MUST NOT restart the
          Solicit retransmission timer.</t>

          <t>Upon receipt of one or more valid Advertise messages, the client
          selects one or more Advertise messages based upon the following
          criteria. <list hangIndent="3" style="hanging">
              <t hangText="-">Those Advertise messages with the highest server
              preference value are preferred over all other Advertise
              messages.</t>

              <t hangText="-">Within a group of Advertise messages with the
              same server preference value, a client MAY select those servers
              whose Advertise messages advertise information of interest to
              the client.</t>

              <t hangText="-">The client MAY choose a less-preferred server if
              that server has a better set of advertised parameters, such as
              the available set of IAs, as well as the set of other
              configuration options advertised.</t>
            </list></t>

          <t>Once a client has selected Advertise message(s), the client will
          typically store information about each server, such as server
          preference value, addresses advertised, when the advertisement was
          received, and so on.</t>

          <t>In practice, this means that the client will maintain independent
          per-IA state machines per each selected server.</t>

          <t>If the client needs to select an alternate server in the case
          that a chosen server does not respond, the client chooses the next
          server according to the criteria given above.</t>
        </section>

        <!-- ends: "17.1.3 from line 1750-->

        <section anchor="RFC3315-18.1.8" title="Receipt of Reply Messages">
          <!-- 18.1.8, line 2345-->

          <t>Upon the receipt of a valid Reply message in response to a
          Solicit (with a Rapid Commit option), Request, Confirm, Renew,
          Rebind, or Information-request message, the client extracts the
          top-level Status Code option if present.</t>

          <t>The client MUST process SOL_MAX_RT and INF_MAX_RT options in an
          Reply message, even if the message contains a Status Code option
          indicating a failure.</t>

          <t>If the client receives a Reply message with a status code of
          UnspecFail, the server is indicating that it was unable to process
          the client's message due to an unspecified failure condition. If the
          client retransmits the original message to the same server to retry
          the desired operation, the client MUST limit the rate at which it
          retransmits the message and limit the duration of the time during
          which it retransmits the message (see <xref
          target="rate-limit"></xref>).</t>

          <t>If the client receives a Reply message with a status code of
          UseMulticast, the client records the receipt of the message and
          sends subsequent messages to the server through the interface on
          which the message was received using multicast. The client resends
          the original message using multicast.</t>

          <t>Otherwise (no status code or another status code), the client
          processes the Reply as described below based on the original message
          for which the Reply was received.</t>

          <t>The client MAY choose to report any status code or message from
          the Status Code option in the Reply message.</t>

          <section anchor="reply-solicit-request-renew-rebind"
                   title="Reply for Solicit (with Rapid Commit), Request, Renew or Rebind">
            <t>If the client receives a NotOnLink status from the server in
            response to a Solicit (with a Rapid Commit option) or a Request,
            the client can either re-issue the message without specifying any
            addresses or restart the DHCP server discovery process (see <xref
            target="configuration-exchange"></xref>).</t>

            <t>If the Reply was received in response to a Solicit (with a
            Rapid Commit option), Request, Renew, or Rebind message, the
            client updates the information it has recorded about IAs from the
            IA options contained in the Reply message: <list style="hanging">
                <t hangText="-">Record T1 and T2 times, if appropriate for the
                IA type.</t>

                <t hangText="-">Add any new leases in the IA option to the IA
                as recorded by the client.</t>

                <t hangText="-">Update lifetimes for any leases in the IA
                option that the client already has recorded in the IA.</t>

                <t hangText="-">Discard any leases from the IA, as recorded by
                the client, that have a valid lifetime of 0 in the IA Address
                or IA Prefix option.</t>

                <t hangText="-">Leave unchanged any information about leases
                the client has recorded in the IA but that were not included
                in the IA from the server.</t>
              </list></t>

            <t>If the client can operate with the addresses and/or prefixes
            obtained from the server: <list style="hanging">
                <t hangText="-">The client uses the addresses, delegated
                prefixes, and other information from any IAs that do not
                contain a Status Code option with the NoAddrsAvail or
                NoPrefixAvail status code. The client MAY include the IAs for
                which it received the NoAddrsAvail or NoPrefixAvail status
                code, with no addresses or prefixes, in subsequent Renew and
                Rebind messages sent to the server, to retry obtaining the
                addresses or prefixes for these IAs.</t>

                <t hangText="-">The client MUST perform duplicate address
                detection as per <xref target="RFC4862"/> Section 5.4, which
                does list some exceptions, on each of the
                received addresses in any IAs, on which it has not performed
                duplicate address detection during processing of any of the
                previous Reply messages from the server. The client performs
                the duplicate address detection before using the received
                addresses for any traffic. If any of the addresses are found
                to be in use on the link, the client sends a Decline message
                to the server for those addresses as described in <xref
                target="RFC3315-18.1.7"/>.</t>

                <t hangText="-">For each assigned address, which does not have any
                associated reachability information, in order to avoid the
                problems described in <xref target="RFC4943"></xref>, the client
                MUST NOT assume that any addresses are reachable on-link as a
                result of receiving an IA_NA or IA_TA. Addresses obtained from
                IA_NA or IA_TA MUST NOT be used to form an implicit prefix
                with a length other than 128.</t>

                <t hangText="-">For each delegated prefix, the client assigns a
                subnet to each of the links to which the associated interfaces are
                attached, with the following exception: the client MUST
                NOT advertise any delegated prefixes or subnets from the delegated
                prefix(es) to the link through which it received the DHCP message
                from the server (see <xref target="RFC6603"/> for exceptions).
                <vspace blankLines='1'/>
                When a client subnets a delegated prefix, it must assign
                additional bits to the prefix to generate unique, longer prefixes.
                For example, if the client in <xref target="FigISPNetwork"/> were delegated
                2001:db8:0::/48, it might generate 2001:db8:0:1::/64 and
                2001:db8:0:2::/64 for assignment to the two links in the subscriber
                network.  If the client were delegated 2001:db8:0::/48
                and 2001:db8:5::/48, it might assign 2001:db8:0:1::/64 and
                2001:db8:5:1::/64 to one of the links, and 2001:db8:0:2::/64 and
                2001:db8:5:2::/64 for assignment to the other link.
                <vspace blankLines='1'/>
                If the client assigns a delegated prefix to a link to
                which the router is attached, and begins to send router
                advertisements for the prefix on the link, the client MUST
                set the valid lifetime in those advertisements to be no later than
                the valid lifetime specified in the IA_PD option.  A
                client MAY use the preferred lifetime specified in the
                IA_PD option.</t>
              </list></t>

            <t>Management of the specific configuration information is
            detailed in the definition of each option in <xref
            target="RFC3315-22"></xref>.</t>

            <t>When a client receives a configuration option in an earlier
            Reply, then sends a Renew, Rebind or Information-request and
            the requested option is not present in the Reply, the client
            SHOULD stop using the previously received configuration
            information.  In other words, the client should behave as if
            it never received this configuration option and return to the
            relevant default state.  If there is no viable way to stop using
            the received configuration information, the values
            received/configured from the option MAY persist if there are
            no other sources for that data and they have no external impact.
            For example, a client that previously received a Client FQDN
            option and used it to set up its hostname is allowed to continue
            using it if there is no reasonable way for a node to unset its
            hostname and it has no external impact.  As a counter example,
            a client that previously received an NTP server address from
            the DHCP server and does not receive it any more, MUST stop
            using the configured NTP server address.  The client
            SHOULD be open to other sources of the same configuration
            information.  This behavior does not apply to any IA containers,
            as their processing is described in detail in other parts of
            this document.</t>

            <t>When a client receives a requested option that has an updated
            value from what was previously received, the client SHOULD make
            use of that updated value as soon as possible for its configuration
            information.</t>

            <t>If the Reply message contains any IAs, but the client finds no
            usable addresses and/or delegated prefixes in any of these IAs,
            the client may either try another server (perhaps restarting the
            DHCP server discovery process) or use the Information-request
            message to obtain other configuration information only.</t>

            <t>When the client receives a Reply message in response to a Renew
            or Rebind message, the client: <list style="hanging">
                <t hangText="-">Sends a Request message if any of the IAs in
                the Reply message contains the NoBinding status code to the
                server that responded. The client places IA options in this
                message for all IAs. The client continues to use other bindings
                for which the server did not return an error.</t>

                <t hangText="-">Sends a Renew/Rebind if any of the IAs are not
                in the Reply message, but in this case the client MUST limit
                the rate at which it sends these messages, to avoid the
                Renew/Rebind storm.</t>

                <t hangText="-">Otherwise accepts the information in the
                IA.</t>
              </list></t>

            <t>Whenever a client restarts the DHCP server discovery process or
            selects an alternate server, as described in <xref
            target="RFC3315-17.1.3"></xref>, the client SHOULD stop using all
            the addresses and delegated prefixes for which it has bindings and
            try to obtain all required leases from the new server. This
            facilitates the client using a single state machine for all
            bindings.</t>
          </section>

          <section anchor="reply-release-decline"
                   title="Reply for Release and Decline">
            <t>When the client receives a valid Reply message in response to a
            Release message, the client considers the Release event completed,
            regardless of the Status Code option(s) returned by the
            server.</t>

            <t>When the client receives a valid Reply message in response to a
            Decline message, the client considers the Decline event completed,
            regardless of the Status Code option(s) returned by the
            server.</t>
          </section>

          <section anchor="reply-confirm" title="Reply for Confirm">
            <t>If the client receives
            any Reply messages that indicate a success status (explicit or
            implicit), the client can use the addresses in the IA and ignore
            any messages that indicate a NotOnLink status. When the client
            only receives one or more Replies with the NotOnLink status in
            response to a Confirm message, the client performs DHCP server
            discovery as described in <xref target="configuration-exchange"/>.</t>
          </section>
             
          <section anchor="reply-inforequest" title="Reply for Information-request">
            <t>Refer to <xref target="RFC4242-Option"/> for details on how the
            Information Refresh Time option (whether or not present in the
            Reply) should be handled by the client.</t>
          </section>

        </section>

        <!-- ends: "18.1.8 from line 2345-->

        <section title="Receipt of Reconfigure Messages">
          <!-- 19.4.1, line 2871-->

          <t>A client receives Reconfigure messages sent to the UDP port 546
          on interfaces for which it has acquired configuration information
          through DHCP. These messages may be sent at any time. Since the
          results of a reconfiguration event may affect application layer
          programs, the client SHOULD log these events, and MAY notify these
          programs of the change through an implementation-specific
          interface.</t>

          <t>Upon receipt of a valid Reconfigure message, the client responds
          with either a Renew message, a Rebind message, or an
          Information-request message as indicated by the Reconfigure Message
          option (as defined in <xref target="RFC3315-22.19"></xref>). The
          client ignores the transaction-id field in the received Reconfigure
          message. While the transaction is in progress, the client discards
          any Reconfigure messages it receives.</t>

          <t>The Reconfigure message acts as a trigger that signals the
          client to complete a successful message exchange. Once the
          client has received a Reconfigure, the client proceeds with the
          message exchange (retransmitting the Renew, Rebind, or
          Information-request message if necessary); the client MUST ignore
          any additional Reconfigure messages until the exchange is
          complete. Subsequent Reconfigure messages cause the client to
          initiate a new exchange.</t>

          <t>Duplicate messages will be
          ignored because the client will begin the exchange after the
          receipt of the first Reconfigure. Retransmitted messages will
          either trigger the exchange (if the first Reconfigure was not
          received by the client) or will be ignored. The server MAY
          discontinue retransmission of Reconfigure messages to the client
          once the server receives the Renew, Rebind or
          Information-request message from the client.</t>

          <t>It might be possible for a duplicate or retransmitted
          Reconfigure to be sufficiently delayed (and delivered out of
          order) to arrive at the client after the exchange (initiated by
          the original Reconfigure) has been completed. In this case, the
          client would initiate a redundant exchange. The likelihood of
          delayed and out of order delivery is small enough to be ignored.
          The consequence of the redundant exchange is inefficiency rather
          than incorrect operation.</t>
        </section>

        <!-- ends: "19.4.1 from line 2871-->

      </section>

      <!-- ends: "18.1 from line 1953-->

      <section anchor="RFC3315-18.2" title="Server Behavior">
        <!-- 18.2, line 2455-->

        <t>For this discussion, the Server is assumed to have been configured
        in an implementation specific manner with configuration of interest to
        clients.</t>

        <t>A server sends an Advertise message in response to each valid Solicit
        message it receives to announce the availability of the server to the
        client.</t>

        <t>In most cases, the server will send a Reply in response to a
        Request, Confirm, Renew, Rebind, Decline, Release, and Information-request
        messages sent by a client. The server will also send a Reply in
        response to a Solicit with a Rapid Commit option, when the server is
        configured to respond with committed lease assignments.</t>

        <t>This Reply message MUST always contain the Server Identifier option
        containing the server's DUID and the Client Identifier option from the
        client message if one was present.</t>

        <t>In most response messages, the server includes options containing
        configuration information for the client. The server must be aware of
        the recommendations on packet sizes and the use of fragmentation in
        section 5 of <xref target="RFC2460"></xref>. If the client included an
        Option Request option in its message, the server includes options in
        the reply message containing configuration parameters for all of the
        options identified in the Option Request option that the server has
        been configured to return to the client. The server MAY return
        additional options to the client if it has been configured to do
        so.</t>

        <t>The server MAY initiate a configuration exchange, by sending
        Reconfigure messages, to cause DHCP clients to obtain new addresses,
        prefixes and other configuration information. For example, an
        administrator may use a server-initiated configuration exchange when
        links in the DHCP domain are to be renumbered. Other examples include
        changes in the location of directory servers, addition of new services
        such as printing, and availability of new software.</t>

        <t>When a client receives a Reconfigure message from the server, the
        client initiates sending a Renew, Rebind or Information-request message
        as indicated by msg-type in the Reconfigure Message option (as defined in
        <xref target="RFC3315-22.19"></xref>). The server sends IAs and/or
        other configuration information to the client in a Reply message. The
        server MAY include options containing the IAs and new values for other
        configuration parameters in the Reply message, even if those IAs and
        parameters were not requested in the client's message.</t>

        <section title="Receipt of Solicit Messages">
          <!-- 17.2.1, line 1823-->

          <t>The server determines the information about the client and its
          location as described in <xref target="RFC3315-11"></xref> and
          checks its administrative policy about responding to the client. If
          the server is not permitted to respond to the client, the server
          discards the Solicit message. For example, if the administrative
          policy for the server is that it may only respond to a client that
          is willing to accept a Reconfigure message, if the client does not
          include a Reconfigure Accept option (see <xref
          target="RFC3315-22.20"></xref>) in the Solicit message, the server
          discards the Solicit message.</t>

          <t>If the server is permitted to respond to the client, the client
          has not included a Rapid Commit option in the Solicit message or
          the server has not been configured to respond with committed assignment
          of leases and other resources, the server sends an Advertise
          message to the client as described in <xref target="RFC3315-17.2.2"/>.
          </t>

          <t>If the client has included a Rapid Commit option in the Solicit
          message and the server has been configured to respond with committed
          assignments of leases and other resources, the server responds to the
          Solicit with a Reply message. The server produces the Reply message
          as though it had received a Request message, as described in <xref
          target="RFC3315-18.2.1"></xref>. The server transmits the Reply
          message as described in <xref target="RFC3315-18.2.8"></xref>.
          The server MUST commit the assignment
          of any addresses and delegated prefixes or other configuration
          information before sending a Reply message to a client. In this case
          the server includes a Rapid Commit option in the Reply message to
          indicate that the Reply is in response to a Solicit message.</t>

          <t>DISCUSSION:</t>

          <t><list style="empty">
              <t>When using the Solicit/Reply message exchange, the server
              commits the assignment of any leases before sending the Reply
              message. The client can assume it has been assigned the leases
              in the Reply message and does not need to send a Request message
              for those leases.</t>

              <t>Typically, servers that are configured to use the
              Solicit/Reply message exchange will be deployed so that only one
              server will respond to a Solicit message. If more than one
              server responds, the client will only use the leases from one of
              the servers, while the leases from the other servers will be
              committed to the client but not used by the client.</t>
            </list></t>

        </section>

        <!-- ends: "17.2.1 from line 1823-->

        <section anchor="RFC3315-18.2.1" title="Receipt of Request Messages">
          <!-- 18.2.1, line 2477-->

          <t>When the server receives a Request message via unicast from a
          client to which the server has not sent a unicast option (or is not
          currently configured to send a unicast option to the client), the
          server discards the Request message and responds with a Reply
          message containing a Status Code option with the value UseMulticast,
          a Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>When the server receives a valid Request message, the server
          creates the bindings for that client according to the server's
          policy and configuration information and records the IAs and other
          information requested by the client.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Request
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Request
          message in the Reply message.</t>

          <t>The server examines all IAs in the message from the client.</t>

          <t>For each IA_NA and IA_TA in the Request message the server
          checks if the prefixes of included addresses are appropriate for
          the link to which the client is connected. If any of the prefixes of
          the included addresses is not appropriate for the link to which
          the client is connected, the server MUST return the IA to the client
          with a Status Code option with the value NotOnLink. If the server
          does not send the NotOnLink status code but it cannot assign any IP
          addresses to an IA, the server MUST return the IA option in the Reply
          message with no addresses in the IA and a Status Code option
          containing status code NoAddrsAvail in the IA.</t>

          <t>For any IA_PD in the Request message, to which the server cannot
          assign any delegated prefixes, the server MUST return the IA_PD
          option in the Reply message with no prefixes in the IA_PD and with a
          Status Code option containing status code NoPrefixAvail in the IA_PD.</t>

          <t>The server MAY assign different addresses and/or delegated prefixes
          to an IA than those included within the IA of the client's Request
          message.</t>

          <t>For all IAs to which the server can assign addresses or delegated
          prefixes, the server includes the IAs with addresses (for IA_NA and
          IA_TA), prefixes (for IA_PD) and other configuration parameters, and
          records the IA as a new client binding. The server MUST NOT include
          any addresses or delegated prefixes in the IA which the server does
          not assign to the client.</t>

          <!-- Ticket #61 - copied text from "Receipt of Renew Message -->
          <t>The T1/T2 times set in each applicable IA option for a Reply MUST
          be the same values across all IAs. The server MUST determine the
          T1/T2 times across all of the applicable client's bindings in the
          Reply. This facilitates the client being able to renew all of the
          bindings at the same time.</t>

          <t>The server SHOULD include a Reconfigure Accept option if the server
          policy enables reconfigure mechanism and the client supports it.
          Currently sending this option in Reply is technically redundant, as
          the use of the reconfiguration mechanism requires an authentication
          and currently the only defined one is Reconfigure Key Authentication
          Protocol (see <xref target="reconfigure-protocol"/> for details) and
          the presence or reconfigure key signals support for Reconfigure
          acceptance. However, there may be better security mechanisms defined
          in the future that would cause RKAP to not be used anymore. One of
          such mechanisms currently worked on in mentioned in <xref
          target="security"/>.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in <xref
          target="RFC3315-18.2"></xref>.</t>

          <t>If the server finds that the client has included an IA in the
          Request message for which the server already has a binding that
          associates the IA with the client, the server sends a Reply
          message with existing bindings, possibly with updated lifetimes. The
          server may update the bindings according to its local policies, but
          the server SHOULD generate the response again and not simply
          retransmit previously sent information, even if the transaction-id
          matches a previous transmission. The server MUST NOT cache its
          responses.</t>

          <!-- Explanation:
          <t>The reason why cached replies are bad is because their lifetimes
          are out of sync. If the client retransmits its REQUEST for 20
          seconds and finally gets the cached answer, its notion of the lease
          expiration moment would be 20 seconds later than the server's.
          So the server could think the lease has expired and reassign it,
          while the client would believe its lease is still valid for
          another 20 seconds. </t> -->
        </section>

        <!-- ends: "18.2.1 from line 2477-->

        <section title="Receipt of Confirm Messages">
          <!-- 18.2.2, line 2527-->

          <t>When the server receives a Confirm message, the server determines
          whether the addresses in the Confirm message are appropriate for the
          link to which the client is attached. If all of the addresses in the
          Confirm message pass this test, the server returns a status of
          Success. If any of the addresses do not pass this test, the server
          returns a status of NotOnLink. If the server is unable to perform
          this test (for example, the server does not have information about
          prefixes on the link to which the client is connected), or there
          were no addresses in any of the IAs sent by the client, the server
          MUST NOT send a Reply to the client.</t>

          <t>The server ignores the T1 and T2 fields in the IA options and the
          preferred-lifetime and valid-lifetime fields in the IA Address
          options.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Confirm
          message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Confirm
          message in the Reply message. The server includes a Status Code
          option indicating the status of the Confirm message.</t>
        </section>

        <!-- ends: "18.2.2 from line 2527-->

        <section anchor="RFC3315-18.2.3" title="Receipt of Renew Messages">
          <!-- 18.2.3, line 2554-->

          <t>When the server receives a Renew message via unicast from a
          client to which the server has not sent a unicast option (or is not
          currently configured to send a unicast option to the client), the
          server discards the Renew message and responds with a Reply message
          containing a Status Code option with the value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>For each IA in the Renew message from a client, the server
          locates the client's binding and verifies that the information in
          the IA from the client matches the information stored for that
          client.</t>

          <t>If the server finds the client entry for the IA, the server sends
          back the IA to the client with new lifetimes and, if applicable,
          T1/T2 times. If the server is unable to extend the lifetimes of an
          address or delegated prefix in the IA, the server MAY choose not to
          include the IA Address or IA Prefix option for this address or
          delegated prefix. If the server chooses to include the IA Address or
          IA Prefix option for such an address or delegated prefix, the server
          SHOULD set T1 and T2 to the valid lifetime for the IA option unless
          the server also includes other addresses or delegated prefixes which
          the server is able to extend for the IA. Setting T1 and T2
          to values equal to valid lifetime informs the client that the leases
          associated with said IA will not be extended, so there is no
          point in trying. Also, it avoids generating unnecessary
          traffic as the remaining lifetime approaches 0.</t>

          <t>The server may choose to change the list of addresses or
          delegated prefixes and the lifetimes in IAs that are returned to the
          client.</t>

          <t>If the server finds that any of the addresses in the IA are not
          appropriate for the link to which the client is attached, the server
          returns the address to the client with lifetimes of 0.</t>

          <t>If the server finds that any of the delegated prefixes in the IA
          are not appropriate for the link to which the client is attached,
          the server returns the delegated prefix to the client with lifetimes
          of 0.</t>

          <t>For each IA for which the server cannot find a client entry, the
          server has the following choices depending on the server's policy
          and configuration information: <list style="hanging">
              <t hangText="-">If the server is configured to create new
              bindings as a result of processing Renew messages, the server
              SHOULD create a binding and return the IA with assigned
              addresses or delegated prefixes with lifetimes and, if
              applicable, T1/T2 times and other information requested by the
              client. If the client included the IA Prefix option within the
              IA_PD option with zero value in the "IPv6 prefix" field and
              non-zero value in the "prefix-length" field, the server MAY use
              the "prefix-length" value as a hint for the length of the
              prefixes to be assigned (see <xref
              target="I-D.ietf-dhc-dhcpv6-prefix-length-hint-issue"></xref>
              for further details on prefix length hints).</t>

              <t hangText="-">If the server is configured to create new
              bindings as a result of processing Renew messages, but the
              server will not assign any leases to an IA, the server returns
              the IA option containing a Status Code option with the
              NoAddrsAvail or NoPrefixAvail status code and a status message
              for a user.</t>

              <t hangText="-">If the server does not support creation of new
              bindings for the client sending a Renew message, or if this
              behavior is disabled according to the server's policy or
              configuration information, the server returns the IA option
              containing a Status Code option with the NoBinding status code
              and a status message for a user.</t>
            </list></t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY and copying the transaction ID from the Renew message
          into the "transaction-id" field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Renew
          message in the Reply message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in <xref
          target="RFC3315-18.2"></xref>.</t>

          <t>The server MAY include options containing the IAs and values for
          other configuration parameters, even if those parameters were not
          requested in the Renew message.</t>

          <t>The T1/T2 times set in each applicable IA option for a Reply MUST
          be the same values across all IAs. The server MUST determine the
          T1/T2 times across all of the applicable client's bindings in the
          Reply. This facilitates the client being able to renew all of the
          bindings at the same time.</t>
        </section>

        <!-- ends: "18.2.3 from line 2554-->

        <section anchor="RFC3315-18.2.4" title="Receipt of Rebind Messages">
          <!-- 18.2.4, line 2594-->

          <t>When the server receives a Rebind message via unicast, the
          server discards the Rebind message and responds with a Reply
          message containing a Status Code option with the value UseMulticast,
          a Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>When the server receives a Rebind message that contains an IA
          option from a client, it locates the client's binding and verifies
          that the information in the IA from the client matches the
          information stored for that client.</t>

          <t>If the server finds the client entry for the IA and the server
          determines that the addresses or delegated prefixes in the IA are
          appropriate for the link to which the client's interface is attached
          according to the server's explicit configuration information, the
          server SHOULD send back the IA to the client with new lifetimes and,
          if applicable, T1/T2 times. If the server is unable to extend the
          lifetimes of an address in the IA, the server MAY choose not to
          include the IA Address option for this address. If the server is
          unable to extend the lifetimes of a delegated prefix in the IA, the
          server MAY choose not to include the IA Prefix option for this
          prefix.</t>

          <t>If the server finds that the client entry for the IA and any of
          the addresses or delegated prefixes are no longer appropriate for
          the link to which the client's interface is attached according to
          the server's explicit configuration information, the server returns
          the address or delegated prefix to the client with lifetimes of
          0.</t>

          <t>If the server cannot find a client entry for the IA, the server
          checks if the IA contains addresses (for IA_NA and IA_TA) or
          delegated prefixes (for IA_PD). The server checks if the addresses
          and delegated prefixes are appropriate for the link to which the
          client's interface is attached according to the server's explicit
          configuration information. For any address which is not appropriate
          for the link to which the client's interface is attached, the server
          MAY include the IA Address option with the lifetimes of 0. For any
          delegated prefix which is not appropriate for the link to which the
          client's interface is attached, the server MAY include the IA Prefix
          option with the lifetimes of 0. The Reply with lifetimes of 0
          constitutes an explicit notification to the client that the specific
          addresses and delegated prefixes are no longer valid and MUST NOT be
          used by the client. If the server chooses to not include any IAs
          containing IA Address or IA Prefix options with lifetimes of 0 and
          the server does not include any other IAs with leases and/or status
          codes, the server does not send a Reply message. In this situation
          the server discards the Rebind message.</t>

          <t>Otherwise, for each IA for which the server cannot find a client
          entry, the server has the following choices depending on the
          server's policy and configuration information: <list style="hanging">
              <t hangText="-">If the server is configured to create new
              bindings as a result of processing Rebind messages (also see the
              note about the Rapid Commit option below), the server SHOULD
              create a binding and return the IA with allocated leases with
              lifetimes and, if applicable, T1/T2 times and other information
              requested by the client. The server MUST NOT return any
              addresses or delegated prefixes in the IA which the server does
              not assign to the client.</t>

              <t hangText="-">If the server is configured to create new
              bindings as a result of processing Rebind messages, but the
              server will not assign any leases to an IA, the server returns
              the IA option containing a Status Code option with the
              NoAddrsAvail or NoPrefixAvail status code and a status message
              for a user.</t>

              <t hangText="-">If the server does not support creation of new
              bindings for the client sending a Rebind message, or if this
              behavior is disabled according to the server's policy or
              configuration information, the server returns the IA option
              containing a Status Code option with the NoBinding status code
              and a status message for a user.</t>
            </list></t>

          <t>When the server creates new bindings for the IA, it is possible
          that other servers also create bindings as a result of receiving the
          same Rebind message. This is the same issue as in the Discussion
          under "Rapid Commit Option"; see <xref
          target="RFC3315-22.14"></xref>. Therefore, the server SHOULD only
          create new bindings during processing of a Rebind message if the
          server is configured to respond with a Reply message to a Solicit
          message containing the Rapid Commit option.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY and copying the transaction ID from the Rebind
          message into the "transaction-id" field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID and the Client Identifier option from the Rebind
          message in the Reply message.</t>

          <t>The server includes other options containing configuration
          information to be returned to the client as described in <xref
          target="RFC3315-18.2"></xref>.</t>

          <t>The server MAY include options containing the IAs and values for
          other configuration parameters, even if those IAs and parameters
          were not requested in the Rebind message.</t>

          <t>The T1/T2 times set in each applicable IA option for a Reply MUST
          be the same values across all IAs. The server MUST determine the
          T1/T2 times across all of the applicable client's bindings in the
          Reply. This facilitates the client being able to renew all of the
          bindings at the same time.</t>
        </section>

        <!-- ends: "18.2.4 from line 2594-->

        <section anchor="RFC3315-18.2.5"
                 title="Receipt of Information-request Messages">
          <!-- 18.2.5, line 2634-->

          <t>When the server receives an Information-request message, the
          client is requesting configuration information that does not include
          the assignment of any leases. The server determines all
          configuration parameters appropriate to the client, based on the
          server configuration policies known to the server.</t>

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the
          Information-request message into the transaction-id field.</t>

          <t>The server MUST include a Server Identifier option containing the
          server's DUID in the Reply message. If the client included a Client
          Identification option in the Information-request message, the server
          copies that option to the Reply message.</t>

          <t>The server includes options containing configuration information
          to be returned to the client as described in <xref
          target="RFC3315-18.2"></xref>. The server MAY include additional
          options that were not requested by the client in the
          Information-request message.</t>

          <t>If the Information-request message received from the client did
          not include a Client Identifier option, the server SHOULD respond
          with a Reply message containing any configuration parameters that
          are not determined by the client's identity. If the server chooses
          not to respond, the client may continue to retransmit the
          Information-request message indefinitely.</t>
        </section>

        <!-- ends: "18.2.5 from line 2634-->

        <section title="Receipt of Release Messages">
          <!-- 18.2.6, line 2663-->

          <t>The server constructs a Reply message by setting the "msg-type"
          field to REPLY, and copying the transaction ID from the Release
          message into the transaction-id field.</t>

          <t>When the server receives a Release message via unicast from a
          client to which the server has not sent a unicast option (or is not
          currently configured to send a unicast option to the client), the
          server discards the Release message and responds with a Reply
          message containing a Status Code option with value UseMulticast, a
          Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>Upon the receipt of a valid Release message, the server examines
          the IAs and the leases in the IAs for validity. If the IAs in the
          message are in a binding for the client, and the leases in the IAs
          have been assigned by the server to those IAs, the server deletes
          the leases from the IAs and makes the leases available for
          assignment to other clients. The server ignores leases not assigned
          to the IA, although it may choose to log an error.</t>

          <t>After all the leases have been processed, the server generates a
          Reply message and includes a Status Code option with value Success,
          a Server Identifier option with the server's DUID, and a Client
          Identifier option with the client's DUID. For each IA in the Release
          message for which the server has no binding information, the server
          adds an IA option using the IAID from the Release message, and
          includes a Status Code option with the value NoBinding in the IA
          option. No other options are included in the IA option.</t>

          <t>A server may choose to retain a record of assigned leases and IAs
          after the lifetimes on the leases have expired to allow the server
          to reassign the previously assigned leases to a client.</t>
        </section>

        <!-- ends: "18.2.6 from line 2663-->

        <section title="Receipt of Decline Messages">
          <!-- 18.2.7, line 2694-->

          <t>When the server receives a Decline message via unicast from a
          client to which the server has not sent a unicast option (or is not
          currently configured to send a unicast option to the client), the
          server discards the Decline message and responds with a Reply
          message containing a Status Code option with the value UseMulticast,
          a Server Identifier option containing the server's DUID, the Client
          Identifier option from the client message, and no other options.</t>

          <t>Upon the receipt of a valid Decline message, the server examines
          the IAs and the addresses in the IAs for validity. If the IAs in the
          message are in a binding for the client, and the addresses in the
          IAs have been assigned by the server to those IAs, the server
          deletes the addresses from the IAs. The server ignores addresses not
          assigned to the IA (though it may choose to log an error if it finds
          such an address).</t>

          <t>The client has found any addresses in the Decline messages to be
          already in use on its link. Therefore, the server SHOULD mark the
          addresses declined by the client so that those addresses are not
          assigned to other clients, and MAY choose to make a notification
          that addresses were declined. Local policy on the server determines
          when the addresses identified in a Decline message may be made
          available for assignment.</t>

          <t>After all the addresses have been processed, the server generates
          a Reply message by setting the "msg-type" field to REPLY, and
          copying the transaction ID from the Decline message into the
          transaction-id field. The client includes a Status Code option with
          the value Success, a Server Identifier option with the server's
          DUID, and a Client Identifier option with the client's DUID. For
          each IA in the Decline message for which the server has no binding
          information, the server adds an IA option using the IAID from the
          Decline message and includes a Status Code option with the value
          NoBinding in the IA option. No other options are included in the IA
          option.</t>
        </section>

        <!-- ends: "18.2.7 from line 2694-->

        <section anchor="RFC3315-17.2.2"
                 title="Creation and Transmission of Advertise Messages">
          <!-- 17.2.2, line 1844-->

          <t>The server sets the "msg-type" field to ADVERTISE and copies the
          contents of the transaction-id field from the Solicit message
          received from the client to the Advertise message. The server
          includes its server identifier in a Server Identifier option and
          copies the Client Identifier option from the Solicit message into
          the Advertise message.</t>

          <t>The server MAY add a Preference option to carry the preference
          value for the Advertise message. The server implementation SHOULD
          allow the setting of a server preference value by the administrator.
          The server preference value MUST default to zero unless otherwise
          configured by the server administrator.</t>

          <t>The server includes a Reconfigure Accept option if the server
          wants to indicate it supports Reconfigure mechanism. This
          information may be used by the client during the server
          selection process.</t>

          <t>The server includes the options the server will return to the client
          in a subsequent Reply message. The information in these options may
          be used by the client in the selection of a server if the client
          receives more than one Advertise message. The server MUST include
          options in the Advertise message containing configuration parameters
          for all of the options identified in the Option Request option in the Solicit message
          that the server has been configured to return to the client.  If the
          Option Request option includes a container option the server MUST include all
          the options that are eligible to be encapsulated in the container. The Option
          Request option MAY be used to signal support for a feature even when that option is
          encapsulated as in the case of the Prefix Exclude option <xref target="RFC6603"/>.
          In this case, special processing is required by the server.
          The server MAY return additional options to the client if it has been
          configured to do so. The server must be aware of the recommendations
          on packet sizes and the use of fragmentation in section 5 of <xref
          target="RFC2460"></xref>.</t>

          <t>The server MUST include IA options in the Advertise message
          containing any addresses and/or delegated prefixes that would be
          assigned to IAs contained in the Solicit message from the client. If
          the client has included addresses in the IA in the Solicit message,
          the server MAY use those addresses as hints about the addresses that
          the client would like to receive. If the client has included IA
          Prefix option in the IA_PD, the server MAY use the prefix contained
          in the IPv6-prefix field and/or the prefix length contained in the
          "prefix-length" field as a hints about the prefixes the client would
          like to receive. If the server is not going to assign an address or
          delegated prefix received as a hint in the Solicit message, the
          server MUST NOT include this address or delegated prefix in the
          Advertise message.</t>

          <!-- This paragraph has been updated with the changes from section
               6 of RFC7083 -->

          <!-- Also, partially applied RFC3315 errata 2472, to include other IA
               options if NoAddrsAvail status code is sent. Do not apply the part
               of errata that mandates sending NoAddrsAvail encapsulated in IA -->

          <!-- Change from RFC 7550 section 4.1 has been applied. 6/1/2015 -->

          <t>If the server will not assign any addresses to an IA (IA_NA or
          IA_TA) in subsequent Request from the client, the server MUST
          include the IA in the Advertise message with no addresses in the IA
          and a Status Code option encapsulated in the IA containing status
          code NoAddrsAvail.</t>

          <t>If the server will not assign any prefixes to an IA_PD in
          subsequent Request from the client, the server MUST include the
          IA_PD in the Advertise message with no prefixes in the IA and a
          Status Code option encapsulated in the IA_PD containing status code
          NoPrefixAvail.</t>

          <t>If the Solicit message was received directly by the server, the
          server unicasts the Advertise message directly to the client using
          the address in the source address field from the IP datagram in
          which the Solicit message was received. The Advertise message MUST
          be unicast on the link from which the Solicit message was
          received.</t>

          <t>If the Solicit message was received in a Relay-forward message,
          the server constructs a Relay-reply message with the Advertise
          message in the payload of a "relay-message" option. If the
          Relay-forward messages included an Interface-id option, the server
          copies that option to the Relay-reply message. The server unicasts
          the Relay-reply message directly to the relay agent using the
          address in the source address field from the IP datagram in which
          the Relay-forward message was received.</t>
        </section>

        <!-- ends: "17.2.2 from line 1844-->

        <section anchor="RFC3315-18.2.8"
                 title="Transmission of Reply Messages">
          <!-- 18.2.8, line 2729-->

          <t>If the original message was received directly by the server, the
          server unicasts the Reply message directly to the client using the
          address in the source address field from the IP datagram in which
          the original message was received. The Reply message MUST be unicast
          through the interface on which the original message was
          received.</t>

          <t>If the original message was received in a Relay-forward message,
          the server constructs a Relay-reply message with the Reply message
          in the payload of a Relay Message option (see <xref
          target="RFC3315-22.10"></xref>). If the Relay-forward messages
          included an Interface-id option, the server copies that option to
          the Relay-reply message. The server unicasts the Relay-reply message
          directly to the relay agent using the address in the source address
          field from the IP datagram in which the Relay-forward message was
          received.</t>
        </section>

        <!-- ends: "18.2.8 from line 2729-->

        <section anchor="reconfigure-transmission"
                 title="Creation and Transmission of Reconfigure Messages">
          <!-- 19.1.1, line 2769-->

          <t>The server sets the "msg-type" field to RECONFIGURE. The server
          sets the transaction-id field to 0. The server includes a Server
          Identifier option containing its DUID and a Client Identifier option
          containing the client's DUID in the Reconfigure message.</t>

          <t>Because of the risk of denial of service attacks against DHCP
          clients, the use of a security mechanism is mandated in Reconfigure
          messages. The server MUST use DHCP authentication in the Reconfigure
          message.</t>

          <t>The server MUST include a Reconfigure Message option (defined in
          <xref target="RFC3315-22.19"></xref>) to select whether the client
          responds with a Renew message, a Rebind message, or an
          Information-request message.</t>

          <t>The server MUST NOT include any other options in the Reconfigure
          except as specifically allowed in the definition of individual
          options.</t>

          <t>A server sends each Reconfigure message to a single DHCP client,
          using an IPv6 unicast address of sufficient scope belonging to the
          DHCP client. If the server does not have an address to which it can
          send the Reconfigure message directly to the client, the server uses
          a Relay-reply message (as described in <xref
          target="RFC3315-20.3"></xref>) to send the Reconfigure message to a
          relay agent that will relay the message to the client. The server
          may obtain the address of the client (and the appropriate relay
          agent, if required) through the information the server has about
          clients that have been in contact with the server, or through some
          external agent.</t>

          <t>To reconfigure more than one client, the server unicasts a
          separate message to each client. The server may initiate the
          reconfiguration of multiple clients concurrently; for example, a
          server may send a Reconfigure message to additional clients while
          previous reconfiguration message exchanges are still in
          progress.</t>

          <t>The Reconfigure message causes the client to initiate a
          Renew/Reply, a Rebind/Reply, or Information-request/Reply message
          exchange with the server. The server interprets the receipt of a
          Renew, a Rebind, or Information-request message (whichever was
          specified in the original Reconfigure message) from the client as
          satisfying the Reconfigure message request.</t>

          <t>If the server does not receive a Renew, Rebind, or
          Information-request message from the client in REC_TIMEOUT
          milliseconds, the server retransmits the Reconfigure message,
          doubles the REC_TIMEOUT value and waits again. The server continues
          this process until REC_MAX_RC unsuccessful attempts have been made,
          at which point the server SHOULD abort the reconfigure process for
          that client.</t>

          <t>Default and initial values for REC_TIMEOUT and REC_MAX_RC are
          documented in <xref target="RFC3315-5.5"></xref>.</t>
        </section>

        <!-- ends: "19.1.1 from line 2769-->
      </section>

      <!-- ends: "18.2 -->
    </section>

    <!-- ends: "18 from line 1942-->

    <section anchor="RFC3315-20" title="Relay Agent Behavior">
      <!-- 20, line 2950-->

      <t>The relay agent SHOULD be configured to use a list of destination
      addresses, which include unicast addresses. The list of destination addresses
      MAY include the All_DHCP_Servers multicast address or other addresses selected by the network
      administrator. If the relay agent has not been explicitly configured, it
      MUST use the All_DHCP_Servers multicast address as the default.</t>

      <t>If the relay agent relays messages to the All_DHCP_Servers multicast
      address or other multicast addresses, it sets the Hop Limit field to
      32.</t>

      <!-- Applied text from Section 4.2 of RFC7283 -->

      <t>If the relay agent receives a message other than Relay-forward and
      Relay-reply and the relay agent does not recognize its message type, it
      MUST forward them as described in <xref
      target="relaying-from-client"></xref>.</t>

      <section title="Relaying a Client Message or a Relay-forward Message">
        <!-- 20.1, line 2964-->

        <t>A relay agent relays both messages from clients and Relay-forward
        messages from other relay agents. When a relay agent receives a valid
        message (for a definition of a valid message, see Section 4.1 of <xref
        target="RFC7283"></xref>) to be relayed, it constructs a new
        Relay-forward message. The <!-- Applied text from Section 4.1 of RFC7283 -->
        relay agent copies the source address from the header of the IP
        datagram in which the message was received into the peer-address field
        of the Relay-forward message. The relay agent copies the received DHCP
        message (excluding any IP or UDP headers) into a Relay Message option
        in the new message. The relay agent adds to the Relay-forward message
        any other options it is configured to include.</t>

        <t><xref target="RFC6221"></xref> defines a Lightweight DHCPv6 Relay
        Agent (LDRA) that allows Relay Agent Information to be inserted by an
        access node that performs a link-layer bridging (i.e., non-routing)
        function.</t>

        <section anchor="relaying-from-client"
                 title="Relaying a Message from a Client">
          <!-- 20.1.1, line 2979-->

          <t>If the relay agent received the message to be relayed from a
          client, the relay agent places a global or unique local <xref
          target="RFC4193"/> address with a prefix
          assigned to the link on which the client should be assigned
          leases into the link-address field. If such an address is not
          available, the relay agent may set the link-address field
          to a link-local address from the interface the original message
          was received on. That is not recommended as it may require additional
          information to be provided in the server configuration. See Section
          3.2 of <xref target="RFC7969"></xref> for a detailed
          discussion.</t>

          <t>This address will be used by the server to determine the link
          from which the client should be assigned leases and other
          configuration information. The hop-count in the Relay-forward
          message is set to 0.</t>

          <t>If the relay agent cannot use the address in the link-address
          field to identify the interface through which the response to the
          client will be relayed, the relay agent MUST include an Interface-id
          option (see <xref target="RFC3315-22.18"></xref>) in the
          Relay-forward message. The server will include the Interface-id
          option in its Relay-reply message. The relay agent sets the
          link-address field as described in the earlier paragraphs regardless
          of whether the relay agent includes an Interface-id option in the
          Relay-forward message.</t>
        </section>

        <!-- ends: "20.1.1 from line 2979-->

        <section title="Relaying a Message from a Relay Agent">
          <!-- 20.1.2, line 2999-->

          <t>If the message received by the relay agent is a Relay-forward
          message and the hop-count in the message is greater than or equal to
          HOP_COUNT_LIMIT, the relay agent discards the received message.</t>

          <t>The relay agent copies the source address from the IP datagram in
          which the message was received from the relay agent into the
          peer-address field in the Relay-forward message and sets the
          hop-count field to the value of the hop-count field in the received
          message incremented by 1.</t>

          <t>If the source address from the IP datagram header of the received
          message is a global or unique local address, the relay
          agent sets the link-address field to 0; otherwise the relay agent
          sets the link-address field to a global or unique local address
          assigned to the interface on which the message was received, or
          includes an Interface-ID option to identify the interface on which
          the message was received.</t>
        </section>

        <!-- ends: "20.1.2 from line 2999-->

        <!-- begins: RFC3633 Section 14: Relay agent behavior -->

        <section title="Relay Agent Behavior with Prefix Delegation">
          <t>A relay agent forwards messages containing Prefix Delegation
          options in the same way as described earlier in this section.</t>

          <t>If a server communicates with a client through a relay agent
          about delegated prefixes, the server may need a protocol or
          other out-of-band communication to configure routing information for
          delegated prefixes on any router through which the client
          may forward traffic.</t>
        </section>

        <!-- ends: RFC3633 Section 14: Relay agent behavior -->
      </section>

      <!-- ends: "20.1 from line 2964-->

      <section title="Relaying a Relay-reply Message">
        <!-- 20.2, line 3021-->

        <t>The relay agent processes any options included in the Relay-reply
        message in addition to the Relay Message option.</t>

        <t>The relay agent extracts the message from the Relay Message option
        and relays it to the address contained in the peer-address field of
        the Relay-reply message. Relay agents MUST NOT modify the message.</t>

        <t>If the Relay-reply message includes an Interface-id option, the
        relay agent relays the message from the server to the client on the
        link identified by the Interface-id option. Otherwise, if the
        link-address field is not set to zero, the relay agent relays the
        message on the link identified by the link-address field.</t>

        <!-- Applied text from Section 4.3 of RFC7283 -->

        <t>If the relay agent receives a Relay-reply message, it MUST process
        the message as defined above, regardless of the type of message
        encapsulated in the Relay Message option.</t>
      </section>

      <!-- ends: "20.2 from line 3021-->

      <section anchor="RFC3315-20.3"
               title="Construction of Relay-reply Messages">
        <!-- 20.3, line 3040-->

        <t>A server uses a Relay-reply message to return a response to a
        client if the original message from the client was relayed to the
        server in a Relay-forward message or to send a Reconfigure message to
        a client if the server does not have an address it can use to send the
        message directly to the client.</t>

        <t>A response to the client MUST be relayed through the same relay
        agents as the original client message. The server causes this to
        happen by creating a Relay-reply message that includes a Relay Message
        option containing the message for the next relay agent in the return
        path to the client. The contained Relay-reply message contains another
        Relay Message option to be sent to the next relay agent, and so on.
        The server must record the contents of the peer-address fields in the
        received message so it can construct the appropriate Relay-reply
        message carrying the response from the server.</t>

        <t>For example, if client C sent a message that was relayed by relay
        agent A to relay agent B and then to the server, the server would send
        the following Relay-reply message to relay agent B:</t>

        <figure align="center" anchor="FigRelayExample"
                title="Relay-reply Example">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

   msg-type:       RELAY-REPLY
   hop-count:      1
   link-address:   0
   peer-address:   A
   Relay Message option, containing:
     msg-type:     RELAY-REPLY
     hop-count:    0
     link-address: address from link to which C is attached
     peer-address: C
     Relay Message option: <response from server>

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>When sending a Reconfigure message to a client through a relay
        agent, the server creates a Relay-reply message that includes a Relay
        Message option containing the Reconfigure message for the next relay
        agent in the return path to the client. The server sets the
        peer-address field in the Relay-reply message header to the address of
        the client, and sets the link-address field as required by the relay
        agent to relay the Reconfigure message to the client. The server
        obtains the addresses of the client and the relay agent through prior
        interaction with the client or through some external mechanism.</t>
      </section>

      <!-- ends: "20.3 from line 3040-->
    </section>

    <!-- ends: "20 from line 2950-->

    <section anchor="RFC3315-21" title="Authentication of DHCP Messages">
      <!-- 21, line 3092-->

      <t>Within this document, two security mechanisms are introduced for the
      authentication of DHCP messages: authentication (and encryption) of messages
      sent between servers and relay agents using IPsec, and protection against
      misconfiguration of a client caused by a Reconfigure message sent by a
      malicious DHCP server.</t>

      <t>The delayed authentication protocol, defined in
      <xref target="RFC3315"></xref>, has been obsoleted by this document
      (see <xref target="obsolete"/>).</t>

      <section anchor="RFC3315-21.1"
               title="Security of Messages Sent Between Servers and Relay Agents">
        <!-- 21.1, line 3108-->

        <t>Relay agents and servers that exchange messages can use
        IPsec as detailed in <xref target="I-D.ietf-dhc-relay-server-security"/>.
        </t>

      </section>

      <!-- ends: "21.1 from line 3108-->

      <section title="Summary of DHCP Authentication">
        <!-- 21.2, line 3172-->

        <t>Authentication of DHCP messages is accomplished through the use of
        the Authentication option (see <xref target="RFC3315-22.11"></xref>).
        The authentication information carried in the Authentication option
        can be used to reliably identify the source of a DHCP message and to
        confirm that the contents of the DHCP message have not been tampered
        with.</t>

        <t>The Authentication option provides a framework for multiple
        authentication protocols. One such protocol, the Reconfigure key
        authentication protocol, is defined in <xref
        target="reconfigure-protocol"></xref>. Other protocols defined in the future
        will be specified in separate documents.</t>

        <t>Any DHCP message MUST NOT include more than one Authentication
        option.</t>

        <t>The protocol field in the Authentication option identifies the
        specific protocol used to generate the authentication information
        carried in the option. The algorithm field identifies a specific
        algorithm within the authentication protocol; for example, the
        algorithm field specifies the hash algorithm used to generate the
        message authentication code (MAC) in the authentication option. The
        replay detection method (RDM) field specifies the type of replay
        detection used in the replay detection field.</t>

      </section>

      <!-- ends: "21.2 from line 3172-->

      <section title="Replay Detection">
        <!-- 21.3, line 3198-->

        <t>The Replay Detection Method (RDM) field determines the type of
        replay detection used in the Replay Detection field.</t>

        <t>If the RDM field contains 0x00, the replay detection field MUST be
        set to the value of a strictly monotonically increasing counter. Using
        a counter value, such as the current time of day (for example, an
        NTP-format timestamp <xref target="RFC5905"></xref>), can reduce the
        danger of replay attacks. This method MUST be supported by all
        protocols.</t>
      </section>

      <!-- ends: "21.3 from line 3198-->

      <section anchor="reconfigure-protocol"
               title="Reconfigure Key Authentication Protocol">
        <!-- 21.5, line 3446-->

        <t>The Reconfigure key authentication protocol provides protection
        against misconfiguration of a client caused by a Reconfigure message
        sent by a malicious DHCP server. In this protocol, a DHCP server sends
        a Reconfigure Key to the client in the initial exchange of DHCP
        messages. The client records the Reconfigure Key for use in
        authenticating subsequent Reconfigure messages from that server. The
        server then includes an HMAC computed from the Reconfigure Key in
        subsequent Reconfigure messages.</t>

        <t>Both the Reconfigure Key sent from the server to the client and the
        HMAC in subsequent Reconfigure messages are carried as the
        Authentication information in an Authentication option. The format of
        the Authentication information is defined in the following
        section.</t>

        <t>The Reconfigure Key protocol is used (initiated by the server) only
        if the client and server are not using any other authentication
        protocol and the client and server have negotiated to use Reconfigure
        messages.</t>

        <section title="Use of the Authentication Option in the Reconfigure Key Authentication Protocol">
          <!-- 21.5.1, line 3470-->

          <t>The following fields are set in an Authentication option for the
          Reconfigure Key Authentication Protocol: <list hangIndent="14"
              style="hanging">
              <t hangText="   protocol">3</t>

              <t hangText="   algorithm">1</t>

              <t hangText="   RDM">0</t>
            </list></t>

          <t>The format of the Authentication information for the Reconfigure
          Key Authentication Protocol is:</t>

          <figure align="center" anchor="FigRKAPAuthInfo"
                  title="RKAP Authentication Information">
            <preamble></preamble>

            <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Type      |                 Value (128 bits)              |
   +-+-+-+-+-+-+-+-+                                               |
   .                                                               .
   .                                                               .
   .                                               +-+-+-+-+-+-+-+-+
   |                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            ]]></artwork>

            <postamble></postamble>
          </figure>

          <t><list hangIndent="20" style="hanging">
              <t hangText="   Type">Type of data in Value field carried in
              this option: <list hangIndent="8" style="hanging">
                  <t hangText="   1">Reconfigure Key value (used in Reply
                  message).</t>

                  <t hangText="   2">HMAC-MD5 digest of the message (used in
                  Reconfigure message).</t>
                </list></t>

              <t hangText="   Value">Data as defined by the Type field.</t>
            </list></t>
        </section>

        <!-- ends: "21.5.1 from line 3470-->

        <section title="Server Considerations for Reconfigure Key Authentication Protocol">
          <!-- 21.5.2, line 3508-->

          <t>The server selects a Reconfigure Key for a client during the
          Request/Reply, Solicit/Reply or Information-request/Reply message
          exchange. The server records the Reconfigure Key and transmits that
          key to the client in an Authentication option in the Reply
          message.</t>

          <t>The Reconfigure Key is 128 bits long, and MUST be a
          cryptographically strong random or pseudo-random number that cannot
          easily be predicted.</t>

          <t>To provide authentication for a Reconfigure message, the server
          selects a replay detection value according to the RDM selected by
          the server, and computes an HMAC-MD5 of the Reconfigure message
          using the Reconfigure Key for the client. The server computes the
          HMAC-MD5 over the entire DHCP Reconfigure message, including the
          Authentication option; the HMAC-MD5 field in the Authentication
          option is set to zero for the HMAC-MD5 computation. The server
          includes the HMAC-MD5 in the authentication information field in an
          Authentication option included in the Reconfigure message sent to
          the client.</t>
        </section>

        <!-- ends: "21.5.2 from line 3508-->

        <section title="Client Considerations for Reconfigure Key Authentication Protocol">
          <!-- 21.5.3, line 3532-->

          <t>The client will receive a Reconfigure Key from the server in the
          initial Reply message from the server. The client records the
          Reconfigure Key for use in authenticating subsequent Reconfigure
          messages.</t>

          <t>To authenticate a Reconfigure message, the client computes an
          HMAC-MD5 over the DHCP Reconfigure message, using the Reconfigure
          Key received from the server. If this computed HMAC-MD5 matches the
          value in the Authentication option, the client accepts the
          Reconfigure message.</t>
        </section>

        <!-- ends: "21.5.3 from line 3532-->
      </section>

      <!-- ends: "21.5 from line 3446-->
    </section>

    <!-- ends: "21 from line 3092-->

    <section anchor="RFC3315-22" title="DHCP Options">
      <!-- 22, line 3547-->

      <t>Options are used to carry additional information and parameters in
      DHCP messages. Every option shares a common base format, as described in
      <xref target="RFC3315-22.1"></xref>. All values in options are
      represented in network byte order.</t>

      <t>This document describes the DHCP options defined as part of the base
      DHCP specification. Other options may be defined in the future in
      separate documents. See <xref target="RFC7227"/> for guidelines regarding
      new options definition. See <xref target="iana"/> for additional
      information about a registry maintained by IANA.</t>

      <t>Unless otherwise noted, each option may appear only in the options
      area of a DHCP message and may appear only once. If an option does
      appear multiple times, each instance is considered separate and the data
      areas of the options MUST NOT be concatenated or otherwise combined.</t>

      <t>Options that are allowed to appear only once are called singleton
      options. The only non-singleton options defined in this document are
      IA_NA (see <xref target="RFC3315-22.4"></xref>), IA_TA (see <xref
      target="RFC3315-22.5"></xref>), Vendor Class (see <xref target="RFC3315-22.16"/>,
      Vendor-specific Information (see <xref target="RFC3315-22.17"/>),
      and IA_PD (see <xref
      target="IA_PD-option"></xref>) options. Also, IA Address (see <xref
      target="RFC3315-22.6"></xref>) and IA Prefix (see <xref
      target="IAPREFIX-option"></xref>) may appear in their respective IA
      options more than once.</t>

      <section anchor="RFC3315-22.1" title="Format of DHCP Options">
        <!-- 22.1, line 3566-->

        <t>The format of DHCP options is:</t>

        <figure align="center" anchor="FigOptions" title="Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          option-data                          |
   |                      (option-len octets)                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">An unsigned integer identifying the
            specific option type carried in this option.</t>

            <t hangText="   option-len">An unsigned integer giving the length
            of the option-data field in this option in octets.</t>

            <t hangText="   option-data">The data for the option; the format
            of this data depends on the definition of the option.</t>
          </list></t>

        <t>DHCP options are scoped by using encapsulation. Some options
        apply generally to the client, some are specific to an IA, and some
        are specific to the addresses within an IA. These latter two cases are
        discussed in <xref target="RFC3315-22.4"></xref> and <xref
        target="RFC3315-22.6"></xref>.</t>
      </section>

      <!-- ends: "22.1 from line 3566-->

      <section anchor="RFC3315-22.2" title="Client Identifier Option">
        <!-- 22.2, line 3597-->

        <t>The Client Identifier option is used to carry a DUID (see <xref
        target="RFC3315-9"></xref>) identifying a client between a client and
        a server. The format of the Client Identifier option is:</t>

        <figure align="center" anchor="FigOption1"
                title="Client Identifier Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |        OPTION_CLIENTID        |          option-len           |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  .                                                               .
  .                              DUID                             .
  .                        (variable length)                      .
  .                                                               .
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_CLIENTID (1).</t>

            <t hangText="   option-len">Length of DUID in octets.</t>

            <t hangText="   DUID">The DUID for the client.</t>
          </list></t>
      </section>

      <!-- ends: "22.2 from line 3597-->

      <section anchor="RFC3315-22.3" title="Server Identifier Option">
        <!-- 22.3, line 3623-->

        <t>The Server Identifier option is used to carry a DUID (see <xref
        target="RFC3315-9"></xref>) identifying a server between a client and
        a server. The format of the Server Identifier option is:</t>

        <figure align="center" anchor="FigOption2"
                title="Server Identifier Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        OPTION_SERVERID        |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                              DUID                             .
   .                        (variable length)                      .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_SERVERID (2).</t>

            <t hangText="   option-len">Length of DUID in octets.</t>

            <t hangText="   DUID">The DUID for the server.</t>
          </list></t>
      </section>

      <!-- ends: "22.3 from line 3623-->

      <section anchor="RFC3315-22.4"
               title="Identity Association for Non-temporary Addresses Option">
        <!-- 22.4, line 3649-->

        <t>The Identity Association for Non-temporary Addresses option (IA_NA
        option) is used to carry an IA_NA, the parameters associated with the
        IA_NA, and the non-temporary addresses associated with the IA_NA.</t>

        <t>Addresses appearing in an IA_NA option are not temporary addresses
        (see <xref target="RFC3315-22.5"></xref>).</t>

        <t>The format of the IA_NA option is:</t>

        <figure align="center" anchor="FigOption3"
                title="Identity Association for Non-temporary Addresses Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IA_NA         |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        IAID (4 octets)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T1                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T2                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                         IA_NA-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_IA_NA (3).</t>

            <t hangText="   option-len">12 + length of IA_NA-options
            field.</t>

            <t hangText="   IAID">The unique identifier for this IA_NA; the
            IAID must be unique among the identifiers for all of this client's
            IA_NAs. The number space for IA_NA IAIDs is separate from the
            number space for other IA option types (i.e., IA_TA and IA_PD).</t>

            <t hangText="   T1">The time at which the client should contact the
            server from which the addresses in the IA_NA were obtained to
            extend the lifetimes of the addresses assigned to the IA_NA; T1 is
            a time duration relative to the current time expressed in units of
            seconds.</t>

            <t hangText="   T2">The time at which the client should contact any
            available server to extend the lifetimes of the addresses assigned
            to the IA_NA; T2 is a time duration relative to the current time
            expressed in units of seconds.</t>

            <t hangText="   IA_NA-options">Options associated with this
            IA_NA.</t>
          </list></t>

        <t>The IA_NA-options field encapsulates those options that are
        specific to this IA_NA. For example, all of the IA Address options
        carrying the addresses associated with this IA_NA are in the
        IA_NA-options field.</t>

        <t>Each IA_NA carries one "set" of non-temporary addresses;
        "it is up to the server policy to determine how many addresses are
        assigned, but typically at most one address from each prefix assigned
        to the link the client is attached to.</t>

        <t>An IA_NA option may only appear in the options area of a DHCP
        message. A DHCP message may contain multiple IA_NA options.</t>

        <t>The status of any operations involving this IA_NA is indicated in a
        Status Code option in the IA_NA-options field.</t>

        <t>Note that an IA_NA has no explicit "lifetime" or "lease length" of
        its own. When the valid lifetimes of all of the addresses in an IA_NA
        have expired, the IA_NA can be considered as having expired. T1 and T2
        are included to give servers explicit control over when a client
        recontacts the server about a specific IA_NA.</t>

        <t>In a message sent by a client to a server, the T1 and T2 fields
        SHOULD be set to 0. The server MUST ignore any values in these fields
        in messages received from a client.</t>

        <t>In a message sent by a server to a client, the client MUST use the
        values in the T1 and T2 fields for the T1 and T2 parameters, unless
        those values in those fields are 0. The values in the T1 and T2 fields
        are the number of seconds until T1 and T2.</t>

        <t>The server selects the T1 and T2 times to allow the client to
        extend the lifetimes of any addresses in the IA_NA before the
        lifetimes expire, even if the server is unavailable for some short
        period of time. Recommended values for T1 and T2 are .5 and .8 times
        the shortest preferred lifetime of the addresses in the IA that the
        server is willing to extend, respectively. If the "shortest" preferred
        lifetime is 0xffffffff ("infinity"), the recommended T1 and T2 values
        are also 0xffffffff. If the time at which the addresses in an IA_NA
        are to be renewed is to be left to the discretion of the client, the
        server sets T1 and T2 to 0. The client MUST follow the rules defined
        in <xref target="t1-t2-0"></xref>.</t>

        <t>If a client receives an IA_NA with T1 greater than T2, and both T1
        and T2 are greater than 0, the client discards the IA_NA option and
        processes the remainder of the message as though the server had not
        included the invalid IA_NA option.</t>

        <t>As per <xref target="RFC3315-5.6"/>, the value 0xffffffff is taken to
        ("infinity") and should be used carefully. </t>
      </section>

      <!-- ends: "22.4 from line 3649-->

      <section anchor="RFC3315-22.5"
               title="Identity Association for Temporary Addresses Option">
        <!-- 22.5, line 3761-->

        <t>The Identity Association for the Temporary Addresses (IA_TA) option
        is used to carry an IA_TA, the parameters associated with the IA_TA
        and the addresses associated with the IA_TA. All of the addresses in
        this option are used by the client as temporary addresses, as defined
        in <xref target="RFC4941"></xref>. The format of the IA_TA option
        is:</t>

        <figure align="center" anchor="FigOption4"
                title="Identity Association for Temporary Addresses Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IA_TA         |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        IAID (4 octets)                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                         IA_TA-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_IA_TA (4).</t>

            <t hangText="   option-len">4 + length of IA_TA-options field.</t>

            <t hangText="   IAID">The unique identifier for this IA_TA; the
            IAID must be unique among the identifiers for all of this client's
            IA_TAs. The number space for IA_TA IAIDs is separate from the
            number space for other IA option types (i.e., IA_NA and IA_PD).</t>

            <t hangText="   IA_TA-options">Options associated with this
            IA_TA.</t>
          </list></t>

        <t>The IA_TA-Options field encapsulates those options that are
        specific to this IA_TA. For example, all of the IA Address options
        carrying the addresses associated with this IA_TA are in the
        IA_TA-options field.</t>

        <t>Each IA_TA carries one "set" of temporary addresses. It is
        up to the server policy to determine how many addresses are
        assigned.</t>

        <t>An IA_TA option may only appear in the options area of a DHCP
        message. A DHCP message may contain multiple IA_TA options.</t>

        <t>The status of any operations involving this IA_TA is indicated in a
        Status Code option in the IA_TA-options field.</t>

        <t>Note that an IA has no explicit "lifetime" or "lease length" of its
        own. When the valid lifetimes of all of the addresses in an IA_TA have
        expired, the IA can be considered as having expired.</t>

        <t>An IA_TA option does not include values for T1 and T2. A client MAY
        request that valid lifetime on temporary addresses be extended by
        including the addresses in a IA_TA option sent in a Renew or Rebind
        message to a server. For example, a client would request an extension
        on the valid lifetime of a temporary address to allow an application to
        continue to use an established TCP connection. Extending only
        valid, but not preferred lifetime means the address will end up
        in deprecated state eventually. Existing connections could continue, but
        no new ones would be created using that address.</t>

        <t>The client obtains new temporary addresses by sending an IA_TA
        option with a new IAID to a server. Requesting new temporary addresses
        from the server is the equivalent of generating new temporary
        addresses as described in <xref target="RFC4941"></xref>. The server
        will generate new temporary addresses and return them to the client.
        The client should request new temporary addresses before the lifetimes
        on the previously assigned addresses expire.</t>

        <t>A server MUST return the same set of temporary address for the same
        IA_TA (as identified by the IAID) as long as those addresses are still
        valid. After the lifetimes of the addresses in an IA_TA have expired,
        the IAID may be reused to identify a new IA_TA with new temporary
        addresses.</t>
      </section>

      <!-- ends: "22.5 from line 3761-->

      <section anchor="RFC3315-22.6" title="IA Address Option">
        <!-- 22.6, line 3840-->

        <t>The IA Address option is used to specify an address associated
        with an IA_NA or an IA_TA. The IA Address option must be encapsulated
        in the Options field of an IA_NA or IA_TA option. The Options fields
        of the IA_NA or IA_TA option encapsulates those options that are
        specific to this address.</t>

        <t>The format of the IA Address option is:</t>

        <figure align="center" anchor="FigOption5"
                title="IA Address Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_IAADDR        |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                         IPv6-address                          |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      preferred-lifetime                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        valid-lifetime                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                        IAaddr-options                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_IAADDR (5).</t>

            <t hangText="   option-len">24 + length of IAaddr-options
            field.</t>

            <t hangText="   IPv6-address">An IPv6 address. A client MUST NOT
            form an implicit prefix with a length other than 128 for this
            address. And, a client MUST NOT assume any length of prefix that
            matches this address is on-link (see <xref target="RFC7421"/>).</t>

            <t hangText="   preferred-lifetime">The preferred lifetime for the
            address in the option, expressed in units of seconds.</t>

            <t hangText="   valid-lifetime">The valid lifetime for the
            address in the option, expressed in units of seconds.</t>

            <t hangText="   IAaddr-options">Options associated with this
            address.</t>
          </list></t>

        <t>In a message sent by a client to a server, the preferred and valid
        lifetime fields SHOULD be set to 0. The server MUST ignore any
        received values.</t>

        <t>The client SHOULD NOT send the IA Address option with unspecified
        address (::).</t>

        <t>In a message sent by a server to a client, the client MUST use the
        values in the preferred and valid lifetime fields for the preferred
        and valid lifetimes. The values in the preferred and valid lifetimes
        are the number of seconds remaining in each lifetime.</t>

        <t>A client discards any addresses for which the preferred lifetime is
        greater than the valid lifetime.</t>

        <t>As per <xref target="RFC3315-5.6"/>, the valid lifetime of an address
        0xffffffff is taken to mean "infinity" and should be used carefully.</t>

        <t>More than one IA Address option can appear in an IA_NA option or an
        IA_TA option.</t>

        <t>The status of any operations involving this IA Address is indicated
        in a Status Code option in the IAaddr-options field, as specified in
        <xref target="RFC3315-22.13"></xref>.</t>
      </section>

      <!-- ends: "22.6 from line 3840-->

      <section anchor="RFC3315-22.7" title="Option Request Option">
        <!-- 22.7, line 3912-->

        <t>The Option Request option is used to identify a list of options in
        a message between a client and a server. The format of the Option
        Request option is:</t>

        <figure align="center" anchor="FigOption6"
                title="Option Request Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           OPTION_ORO          |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    requested-option-code-1    |    requested-option-code-2    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              ...                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_ORO (6).</t>

            <t hangText="   option-len">2 * number of requested options.</t>

            <t hangText="   requested-option-code-n">The option code for an
            option requested by the client.</t>
          </list></t>

        <t>A client MUST include an Option Request option in a Solicit,
        Request, Renew, Rebind, or Information-request message to
        inform the server about options the client wants the server to send to
        the client.</t>

        <t>The Option Request option MUST NOT include the
        following options: Server Identifier, Client Identifier, IA_NA, IA_PD, IA_TA,
        IA Address, IA Prefix, Option Request, Elapsed Time, Preference, Relay Message, Authentication,
        Server Unicast, Rapid Commit, User Class, Vendor Class, Interface-Id, Reconfigure Message, and
        Reconfigure Accept.  Other top-level options MUST appear in the Option Request
        option or they will not be sent by the server.  Only container options MUST appear
        in the Option Request, options encapsulated in the container MUST NOT be in the
        Option Request, see <xref target="RFC7598"/> as an example of container options.
        The exception to this is the Option Request option MAY be used to signal support
        for a feature even when that option is encapsulated as in the case of the
        Prefix Exclude option <xref target="RFC6603"/>. See <xref target="option_update_table"/>.
        </t>

      </section>

      <!-- ends: "22.7 from line 3912-->

      <section anchor="RFC3315-22.8" title="Preference Option">
        <!-- 22.8, line 3945-->

        <t>The Preference option is sent by a server to a client to affect the
        selection of a server by the client.</t>

        <t>The format of the Preference option is:</t>

        <figure align="center" anchor="FigOption7"
                title="Preference Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_PREFERENCE       |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  pref-value   |
   +-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_PREFERENCE (7).</t>

            <t hangText="   option-len">1.</t>

            <t hangText="   pref-value">The preference value for the server in
            this message.</t>
          </list></t>

        <t>A server MAY include a Preference option in an Advertise message to
        control the selection of a server by the client. See <xref
        target="RFC3315-17.1.3"></xref> for the use of the Preference option
        by the client and the interpretation of Preference option data
        value.</t>
      </section>

      <!-- ends: "22.8 from line 3945-->

      <section anchor="RFC3315-22.9" title="Elapsed Time Option">
        <!-- 22.9, line 3974-->

        <figure align="center" anchor="FigOption8"
                title="Elapsed Time Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_ELAPSED_TIME      |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          elapsed-time         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_ELAPSED_TIME (8).</t>

            <t hangText="   option-len">2.</t>

            <t hangText="   elapsed-time">The amount of time since the client
            began its current DHCP transaction. This time is expressed in
            hundredths of a second (10^-2 seconds).</t>
          </list></t>

        <t>A client MUST include an Elapsed Time option in messages to
        indicate how long the client has been trying to complete a DHCP
        message exchange. The elapsed time is measured from the time at which
        the client sent the first message in the message exchange, and the
        elapsed-time field is set to 0 in the first message in the message
        exchange. Servers and Relay Agents use the data value in this option
        as input to policy controlling how a server responds to a client
        message. For example, the elapsed time option allows a secondary DHCP
        server to respond to a request when a primary server has not answered
        in a reasonable time. The elapsed time value is an unsigned, 16 bit
        integer. The client uses the value 0xffff to represent any elapsed
        time values greater than the largest time value that can be
        represented in the Elapsed Time option.</t>
      </section>

      <!-- ends: "22.9 from line 3974-->

      <section anchor="RFC3315-22.10" title="Relay Message Option">
        <!-- 22.10, line 4009-->

        <t>The Relay Message option carries a DHCP message in a Relay-forward
        or Relay-reply message.</t>

        <t>The format of the Relay Message option is:</t>

        <figure align="center" anchor="FigOption9"
                title="Relay Message Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        OPTION_RELAY_MSG       |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                       DHCP-relay-message                      .
   .                                                               .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_RELAY_MSG (9)</t>

            <t hangText="   option-len">Length of DHCP-relay-message</t>

            <t hangText="   DHCP-relay-message">In a Relay-forward message,
            the received message, relayed verbatim to the next relay agent or
            server; in a Relay-reply message, the message to be copied and
            relayed to the relay agent or client whose address is in the
            peer-address field of the Relay-reply message</t>
          </list></t>
      </section>

      <!-- ends: "22.10 from line 4009-->

      <section anchor="RFC3315-22.11" title="Authentication Option">
        <!-- 22.11, line 4042-->

        <t>The Authentication option carries authentication information to
        authenticate the identity and contents of DHCP messages. The use of
        the Authentication option is described in <xref
        target="RFC3315-21"></xref>. The delayed authentication protocol,
        defined in <xref target="RFC3315"></xref>, has been obsoleted by this
        document, due to lack of usage. The format of the Authentication
        option is:</t>

        <figure align="center" anchor="FigOption11"
                title="Authentication Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_AUTH          |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   protocol    |   algorithm   |      RDM      |               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
   |                                                               |
   |          replay detection (64 bits)           +-+-+-+-+-+-+-+-+
   |                                               |   auth-info   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
   .                   authentication information                  .
   .                       (variable length)                       .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_AUTH (11).</t>

            <t hangText="   option-len">11 + length of authentication
            information field.</t>

            <t hangText="   protocol">The authentication protocol used in this
            authentication option.</t>

            <t hangText="   algorithm">The algorithm used in the
            authentication protocol.</t>

            <t hangText="   RDM">The replay detection method used in this
            authentication option.</t>

            <t hangText="   Replay detection">The replay detection information
            for the RDM.</t>

            <t hangText="   authentication information">The authentication
            information, as specified by the protocol and algorithm used in
            this authentication option.</t>
          </list></t>
      </section>

      <!-- ends: "22.11 from line 4042-->

      <section anchor="RFC3315-22.12" title="Server Unicast Option">
        <!-- 22.12, line 4089-->

        <t>The server sends this option to a client to indicate to the client
        that it is allowed to unicast messages to the server. The format of
        the Server Unicast option is:</t>

        <figure align="center" anchor="FigOption12"
                title="Server Unicast Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          OPTION_UNICAST       |        option-len             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                       server-address                          |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_UNICAST (12).</t>

            <t hangText="   option-len">16.</t>

            <t hangText="   server-address">The address to which the client
            should send messages delivered using unicast.</t>
          </list></t>

        <t>The server specifies the address to which the client is to
        send unicast messages in the server-address field. When a client
        receives this option, where permissible and appropriate, the client
        sends messages directly to the server using the address specified
        in the server-address field of the option.</t>

        <t>When the server sends a Unicast option to the client, some messages
        from the client will not be relayed by Relay Agents, and will not
        include Relay Agent options from the Relay Agents. Therefore, a server
        should only send a Unicast option to a client when Relay Agents are
        not sending Relay Agent options. A DHCP server rejects any messages
        sent inappropriately using unicast to ensure that messages are relayed
        by Relay Agents when Relay Agent options are in use.</t>

        <t>Details about when the client may send messages to the server using
        unicast are in <xref target="configuration-exchange"></xref>.</t>
      </section>

      <!-- ends: "22.12 from line 4089-->

      <section anchor="RFC3315-22.13" title="Status Code Option">
        <!-- 22.13, line 4134-->

        <t>This option returns a status indication related to the DHCP message
        or option in which it appears. The format of the Status Code option
        is:</t>

        <figure align="center" anchor="FigOption13"
                title="Status Code Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_STATUS_CODE      |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          status-code          |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   .                                                               .
   .                        status-message                         .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_STATUS_CODE (13).</t>

            <t hangText="   option-len">2 + length of status-message.</t>

            <t hangText="   status-code">The numeric code for the status
            encoded in this option.</t>

            <t hangText="   status-message">A UTF-8 encoded text string
            suitable for display to an end user, which MUST NOT be
            null-terminated.</t>
          </list></t>

        <t>A Status Code option may appear in the options field of a DHCP
        message and/or in the options field of another option. If the Status
        Code option does not appear in a message in which the option could
        appear, the status of the message is assumed to be Success.</t>

        <t>The status-code values previously defined by <xref
        target="RFC3315"></xref> and <xref target="RFC3633"></xref> are:</t>

        <texttable>
          <ttcol>Name</ttcol>

          <ttcol align="right">Code</ttcol>

          <ttcol>Description</ttcol>

          <c>Success</c>

          <c>0</c>

          <c>Success.</c>

          <c>UnspecFail</c>

          <c>1</c>

          <c>Failure, reason unspecified; this status code is sent by either a
          client or a server to indicate a failure not explicitly specified in
          this document.</c>

          <c>NoAddrsAvail</c>

          <c>2</c>

          <c>Server has no addresses available to assign to the IA(s).</c>

          <c>NoBinding</c>

          <c>3</c>

          <c>Client record (binding) unavailable.</c>

          <c>NotOnLink</c>

          <c>4</c>

          <c>The prefix for the address is not appropriate for the link to
          which the client is attached.</c>

          <c>UseMulticast</c>

          <c>5</c>

          <c>Sent by a server to a client to force the client to send messages
          to the server using the All_DHCP_Relay_Agents_and_Servers multicast
          address.</c>

          <c>NoPrefixAvail</c>

          <c>6</c>

          <c>Server has no prefixes available to assign to the
          IA_PD(s).</c>
        </texttable>

        <t>See <xref target="iana"/> for additional information about the
        registry maintained by IANA with the complete list of status codes.</t>
      </section>

      <!-- ends: "22.13 from line 4134-->

      <section anchor="RFC3315-22.14" title="Rapid Commit Option">
        <!-- 22.14, line 4172-->

        <t>The Rapid Commit option is used to signal the use of the two
        message exchange for address assignment. The format of the Rapid
        Commit option is:</t>

        <figure align="center" anchor="FigOption14"
                title="Rapid Commit Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_RAPID_COMMIT      |               0               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_RAPID_COMMIT (14).</t>

            <t hangText="   option-len">0.</t>
          </list></t>

        <t>A client MAY include this option in a Solicit message if the client
        is prepared to perform the Solicit/Reply message exchange described in
        <xref target="solicit-create-transmit"></xref>.</t>

        <t>A server MUST include this option in a Reply message sent in
        response to a Solicit message when completing the Solicit/Reply
        message exchange.</t>

        <t>DISCUSSION:</t>

        <t><list style="empty">
            <t>Each server that responds with a Reply to a Solicit that
            includes a Rapid Commit option will commit the leases
            in the Reply message to the client, and will not receive any
            confirmation that the client has received the Reply message.
            Therefore, if more than one server responds to a Solicit that
            includes a Rapid Commit option, some servers will commit leases
            that are not actually used by the client, which could result in
            bad information in the DNS server if the DHCP server updates DNS
            (<xref target="RFC4704"/>) or in response to leasequery requests
            (<xref target="RFC5007"/>).</t>

            <t>The problem of unused leases can be minimized, for example,
            by designing the DHCP service so that only one server responds to
            the Solicit or by using relatively short lifetimes for newly assigned
            leases, or the DHCP client initiatively releases unused
            leases by using the Release message.</t>
          </list></t>
      </section>

      <!-- ends: "22.14 from line 4172-->

      <section title="User Class Option">
        <!-- 22.15, line 4217-->

        <t>The User Class option is used by a client to identify the type or
        category of user or applications it represents.</t>

        <t>The format of the User Class option is:</t>

        <figure align="center" anchor="FigOption15"
                title="User Class Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       OPTION_USER_CLASS       |          option-len           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          user-class-data                      .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_USER_CLASS (15).</t>

            <t hangText="   option-len">Length of user class data field.</t>

            <t hangText="   user-class-data">The user classes carried by the
            client.</t>
          </list></t>

        <t>The information contained in the data area of this option is
        contained in one or more opaque fields that represent the user class
        or classes of which the client is a member. A server selects
        configuration information for the client based on the classes
        identified in this option. For example, the User Class option can be
        used to configure all clients of people in the accounting department
        with a different printer than clients of people in the marketing
        department. The user class information carried in this option MUST be
        configurable on the client.</t>

        <t>The data area of the user class option MUST contain one or more
        instances of user class data. Each instance of the user class data is
        formatted as follows:</t>

        <figure align="center" anchor="FigOption15Data"
                title="User Class Data Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
   |        user-class-len         |          opaque-data          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>The user-class-len is two octets long and specifies the length of
        the opaque user class data in network byte order.</t>

        <t>A server interprets the classes identified in this option according
        to its configuration to select the appropriate configuration
        information for the client. A server may use only those user classes
        that it is configured to interpret in selecting configuration
        information for a client and ignore any other user classes. In
        response to a message containing a User Class option, a server
        includes a User Class option containing those classes that were
        successfully interpreted by the server, so that the client can be
        informed of the classes interpreted by the server.</t>
      </section>

      <!-- ends: "22.15 from line 4217-->

      <section anchor="RFC3315-22.16" title="Vendor Class Option">
        <!-- 22.16, line 4276-->

        <t>This option is used by a client to identify the vendor that
        manufactured the hardware on which the client is running. The
        information contained in the data area of this option is contained in
        one or more opaque fields that identify details of the hardware
        configuration. The format of the Vendor Class option is:</t>

        <figure align="center" anchor="FigOption16"
                title="Vendor Class Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_VENDOR_CLASS      |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       enterprise-number                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                       vendor-class-data                       .
   .                             . . .                             .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_VENDOR_CLASS (16).</t>

            <t hangText="   option-len">4 + length of vendor class data
            field.</t>

            <t hangText="   enterprise-number">The vendor's registered
            Enterprise Number as registered with IANA <xref
            target="IANA-PEN"></xref>.</t>

            <t hangText="   vendor-class-data">The hardware configuration of
            the node on which the client is running.</t>
          </list></t>

        <t>The vendor-class-data is composed of a series of separate items,
        each of which describes some characteristic of the client's hardware
        configuration. Examples of vendor-class-data instances might include
        the version of the operating system the client is running or the
        amount of memory installed on the client.</t>

        <t>Each instance of the vendor-class-data is formatted as follows:</t>

        <figure align="center" anchor="FigOption16Data"
                title="Vendor Class Data Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
   |       vendor-class-len        |          opaque-data          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t>The vendor-class-len is two octets long and specifies the length of
        the opaque vendor class data in network byte order.</t>

        <t>Servers and clients MUST NOT include more than one instance of
        OPTION_VENDOR_CLASS with the same Enterprise Number. Each instance of
        OPTION_VENDOR_CLASS can carry multiple sub-options.</t>
      </section>

      <!-- ends: "22.16 from line 4276-->

      <section anchor="RFC3315-22.17" title="Vendor-specific Information Option">
        <!-- 22.17, line 4325-->

        <t>This option is used by clients and servers to exchange
        vendor-specific information.</t>

        <t>The format of the Vendor-specific Information option is:</t>

        <figure align="center" anchor="FigOption17"
                title="Vendor-specific Information Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_VENDOR_OPTS       |           option-len          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       enterprise-number                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          option-data                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_VENDOR_OPTS (17).</t>

            <t hangText="   option-len">4 + length of option-data field.</t>

            <t hangText="   enterprise-number">The vendor's registered
            Enterprise Number as registered with IANA <xref
            target="IANA-PEN"></xref>.</t>

            <t hangText="   option-data">An opaque object, interpreted by
            vendor-specific code on the clients and servers.</t>
          </list></t>

        <t>The definition of the information carried in this option is vendor
        specific. The vendor is indicated in the enterprise-number field. Use
        of vendor-specific information allows enhanced operation, utilizing
        additional features in a vendor's DHCP implementation. A DHCP client
        that does not receive requested vendor-specific information will still
        configure the node device's IPv6 stack to be functional.</t>

        <t>The encapsulated vendor-specific options field MUST be encoded as a
        sequence of code/length/value fields of identical format to the DHCP
        options field. The option codes are defined by the vendor identified
        in the enterprise-number field and are not managed by IANA. Each of
        the encapsulated options is formatted as follows:</t>

        <figure align="center" anchor="FigOption17Data"
                title="Vendor-specific Options Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          opt-code             |             option-len        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          option-data                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   opt-code">The code for the encapsulated
            option.</t>

            <t hangText="   option-len">An unsigned integer giving the length
            of the option-data field in this encapsulated option in
            octets.</t>

            <t hangText="   option-data">The data area for the encapsulated
            option.</t>
          </list></t>

        <t>Multiple instances of the Vendor-specific Information option may
        appear in a DHCP message. Each instance of the option is interpreted
        according to the option codes defined by the vendor identified by the
        Enterprise Number in that option. Servers and clients MUST NOT send
        more than one instance of Vendor-specific Information option with the
        same Enterprise Number. Each instance of Vendor-specific Information
        option MAY contain multiple encapsulated options.</t>

        <t>A client that is interested in receiving a Vendor-specific
        Information option:</t>

        <t><list hangIndent="3" style="hanging">
            <t hangText="-">MUST specify the Vendor-specific Information
            option in an Option Request option.</t>

            <t hangText="-">MAY specify an associated Vendor Class option.</t>

            <t hangText="-">MAY specify the Vendor-specific Information option
            with appropriate data.</t>
          </list></t>

        <t>Servers only return the Vendor-specific Information options if
        specified in Option Request options from clients and:</t>

        <t><list hangIndent="3" style="hanging">
            <t hangText="-">MAY use the Enterprise Numbers in the associated
            Vendor Class options to restrict the set of Enterprise Numbers in
            the Vendor-specific Information options returned.</t>

            <t hangText="-">MAY return all configured Vendor-specific
            Information options.</t>

            <t hangText="-">MAY use other information in the packet or in its
            configuration to determine which set of Enterprise Numbers in the
            Vendor-specific Information options to return.</t>
          </list></t>
      </section>

      <!-- ends: "22.17 from line 4325-->

      <section anchor="RFC3315-22.18" title="Interface-Id Option">
        <!-- 22.18, line 4396-->

        <t>The relay agent MAY send the Interface-id option to identify the
        interface on which the client message was received. If a relay agent
        receives a Relay-reply message with an Interface-id option, the relay
        agent relays the message to the client through the interface
        identified by the option.</t>

        <t>The format of the Interface ID option is:</t>

        <figure align="center" anchor="FigOption18"
                title="Interface-ID Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_INTERFACE_ID      |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                         interface-id                          .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_INTERFACE_ID (18).</t>

            <t hangText="   option-len">Length of interface-id field.</t>

            <t hangText="   interface-id">An opaque value of arbitrary length
            generated by the relay agent to identify one of the relay agent's
            interfaces.</t>
          </list></t>

        <t>The server MUST copy the Interface-Id option from the Relay-forward
        message into the Relay-reply message the server sends to the relay
        agent in response to the Relay-forward message. This option MUST NOT
        appear in any message except a Relay-forward or Relay-reply
        message.</t>

        <t>Servers MAY use the Interface-ID for parameter assignment policies.
        The Interface-ID SHOULD be considered an opaque value, with policies
        based on exact match only; that is, the Interface-ID SHOULD NOT be
        internally parsed by the server. The Interface-ID value for an
        interface SHOULD be stable and remain unchanged, for example, after
        the relay agent is restarted; if the Interface-ID changes, a server
        will not be able to use it reliably in parameter assignment
        policies.</t>
      </section>

      <!-- ends: "22.18 from line 4396-->

      <section anchor="RFC3315-22.19" title="Reconfigure Message Option">
        <!-- 22.19, line 4440-->

        <t>A server includes a Reconfigure Message option in a Reconfigure
        message to indicate to the client whether the client responds with a
        Renew message, a Rebind message, or an Information-request message.
        The format of this option is:</t>

        <figure align="center" anchor="FigOption19"
                title="Reconfigure Message Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      OPTION_RECONF_MSG        |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    msg-type   |
   +-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_RECONF_MSG (19).</t>

            <t hangText="   option-len">1.</t>

            <t hangText="   msg-type">5 for Renew message, 6 for Rebind, 11
            for Information-request message.</t>
          </list></t>

        <t>The Reconfigure Message option can only appear in a Reconfigure
        message.</t>
      </section>

      <!-- ends: "22.19 from line 4440-->

      <section anchor="RFC3315-22.20" title="Reconfigure Accept Option">
        <!-- 22.20, line 4468-->

        <t>A client uses the Reconfigure Accept option to announce to the
        server whether the client is willing to accept Reconfigure messages,
        and a server uses this option to tell the client whether or not to
        accept Reconfigure messages. The default behavior, in the absence of
        this option, means unwillingness to accept Reconfigure messages, or
        instruction not to accept Reconfigure messages, for the client and
        server messages, respectively. The following figure gives the format
        of the Reconfigure Accept option:</t>

        <figure align="center" anchor="FigOption20"
                title="Reconfigure Accept Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     OPTION_RECONF_ACCEPT      |               0               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_RECONF_ACCEPT (20).</t>

            <t hangText="   option-len">0.</t>
          </list></t>
      </section>

      <!-- ends: "22.20 from line 4468-->

      <!-- begins: merged section 9. and 10. from RFC3633 -->

      <section anchor="IA_PD-option"
               title="Identity Association for Prefix Delegation Option">
        <t>The IA_PD option is used to carry a prefix delegation identity
        association, the parameters associated with the IA_PD and the prefixes
        associated with it.</t>

        <figure align="center" anchor="FigOption25"
                title="Identity Association for Prefix Delegation Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         OPTION_IA_PD          |         option-length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         IAID (4 octets)                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T1                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              T2                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .                                                               .
   .                          IA_PD-options                        .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_IA_PD (25).</t>

            <t hangText="   option-length">12 + length of IA_PD-options
            field.</t>

            <t hangText="   IAID">The unique identifier for this IA_PD; the
            IAID must be unique among the identifiers for all of this
            client's IA_PDs. The number space for IA_PD IAIDs is separate from
            the number space for other IA option types (i.e., IA_NA and IA_TA).</t>

            <t hangText="   T1">The time at which the client should
            contact the server from which the prefixes in the IA_PD
            were obtained to extend the lifetimes of the prefixes delegated to
            the IA_PD; T1 is a time duration relative to the current time
            expressed in units of seconds.</t>

            <t hangText="   T2">The time at which the client should
            contact any available server to extend the lifetimes of
            the prefixes assigned to the IA_PD; T2 is a time duration relative
            to the current time expressed in units of seconds.</t>

            <t hangText="   IA_PD-options">Options associated with this
            IA_PD.</t>
          </list></t>

        <t>The IA_PD-options field encapsulates those options that are
        specific to this IA_PD. For example, all of the IA Prefix options
        carrying the prefixes associated with this IA_PD are in the
        IA_PD-options field.</t>

        <t>An IA_PD option may only appear in the options area of a DHCP
        message. A DHCP message may contain multiple IA_PD options.</t>

        <t>The status of any operations involving this IA_PD is indicated in a
        Status Code option in the IA_PD-options field.</t>

        <t>Note that an IA_PD has no explicit "lifetime" or "lease length" of
        its own. When the valid lifetimes of all of the prefixes in a IA_PD
        have expired, the IA_PD can be considered as having expired. T1 and T2
        are included to give the server explicit control over when a
        client should contact the server about a
        specific IA_PD.</t>

        <t>In a message sent by a client to a server,
        the T1 and T2 fields SHOULD be set to 0. The server MUST
        ignore any values in these fields in messages received from a
        client.</t>

        <t>In a message sent by a server to a client,
        the server MUST use the values in the T1 and T2 fields for
        the T1 and T2 parameters, unless those values in those fields are 0.
        The values in the T1 and T2 fields are the number of seconds until T1
        and T2.</t>

        <t>The server selects the T1 and T2 times to allow the
        client to extend the lifetimes of any prefixes in the IA_PD
        before the lifetimes expire, even if the server is
        unavailable for some short period of time. Recommended values for T1
        and T2 are .5 and .8 times the shortest preferred lifetime of the
        prefixes in the IA_PD that the server is willing to extend,
        respectively. If the time at which the prefixes in an IA_PD are to be
        renewed is to be left to the discretion of the client, the
        server sets T1 and T2 to 0. The client MUST
        follow the rules defined in <xref target="t1-t2-0"></xref>.</t>

        <t>If a client receives an IA_PD with T1 greater than T2,
        and both T1 and T2 are greater than 0, the client discards
        the IA_PD option and processes the remainder of the message as though
        the client had not included the IA_PD option.</t>
      </section>

      <section anchor="IAPREFIX-option" title="IA Prefix Option">
        <t>The IA Prefix option is used to specify a prefix
        associated with an IA_PD. The IA Prefix option must be encapsulated
        in the IA_PD-options field of an IA_PD option.</t>

        <figure align="center" anchor="FigOption26"
                title="IA Prefix Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        OPTION_IAPREFIX        |         option-length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      preferred-lifetime                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        valid-lifetime                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | prefix-length |                                               |
   +-+-+-+-+-+-+-+-+          IPv6-prefix                          |
   |                           (16 octets)                         |
   |                                                               |
   |                                                               |
   |                                                               |
   |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |                                               .
   +-+-+-+-+-+-+-+-+                                               .
   .                       IAprefix-options                        .
   .                                                               .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_IAPREFIX (26).</t>

            <t hangText="   option-length">25 + length of IAprefix-options
            field.</t>

            <t hangText="   preferred-lifetime">The recommended preferred
            lifetime for the prefix in the option, expressed in units of
            seconds. A value of 0xFFFFFFFF represents infinity.</t>

            <t hangText="   valid-lifetime">The valid lifetime for the
            prefix in the option, expressed in units of seconds. A value of
            0xFFFFFFFF represents infinity.</t>

            <t hangText="   prefix-length">Length for this prefix in bits.</t>

            <t hangText="   IPv6-prefix">An IPv6 prefix.</t>

            <t hangText="   IAprefix-options">Options associated with this
            prefix.</t>
          </list></t>

        <t>In a message sent by a client to a server,
        the preferred and valid lifetime fields SHOULD be set to 0. The server
        MUST ignore any received values in these lifetime fields.</t>

        <t>A client may set the IPv6-prefix field to zero and a
        given value in the prefix-length field to indicate a preference for
        the size of the prefix to be delegated.</t>

        <t>A client discards any prefixes for which the preferred
        lifetime is greater than the valid lifetime.</t>

        <t>The values in the preferred and valid lifetimes are the number of
        seconds remaining for each lifetime.</t>

        <t>As per <xref target="RFC3315-5.6"/>, the preferred and valid lifetime values of
        0xffffffff is taken to mean "infinity" and should be used carefully.</t>

        <t>An IA Prefix option may appear only in an IA_PD option. More
        than one IA Prefix option can appear in a single IA_PD option.</t>

        <t>The status of any operations involving this IA Prefix option is
        indicated in a Status Code option in the IAprefix-options field.</t>
      </section>

      <!-- ends: merged section 9. and 10. from RFC3633 -->

      <!-- begin text from RFC4242 -->

     <section anchor="RFC4242-Option" title="Information Refresh Time Option">
        <t>This option is requested by clients and returned by servers to
        specify an upper bound for how long a client should wait before
        refreshing information retrieved
        from a DHCP server. It is only used in Reply messages in response to
        Information-request messages. In other messages there will usually
        be other information that indicates when the client should contact the
        server, e.g., T1/T2 times and lifetimes. This option is useful
        when the configuration parameters change or during renumbering event as
        clients running in the stateless mode will be able to update their
        configuration.</t>

        <t>The format of the Information Refresh Time option is:</t>

        <figure align="center" anchor="FigOption32"
                title="Information Refresh Time Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |OPTION_INFORMATION_REFRESH_TIME|         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   information-refresh-time                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_INFORMATION_REFRESH_TIME (32).</t>

            <t hangText="   option-len">4.</t>

            <t hangText="   information-refresh-time">Time duration relative to
             the current time, expressed in units of seconds.</t>
          </list></t>

        <!-- The following paragraphs have been adapted from RFC 4242 -->

        <t>A DHCP client MUST request this option in the Option Request option
        (see <xref target="RFC3315-22.7"/>) when sending Information-request
        messages. A client MUST NOT request this option in the ORO in any other
        messages.</t>

        <t>A server sending a Reply to an Information-Request message SHOULD
        include this option if it is requested in the ORO of the Information-
        Request. The option value MUST NOT be smaller than IRT_MINIMUM. This
        option MUST only appear in the top-level option area of Reply messages.</t>

        <t>If the Reply to an Information-request message does not contain this
        option, the client MUST behave as if the option with value IRT_DEFAULT
        was provided.</t>

        <t>A client MUST use the refresh time IRT_MINIMUM if it receives the
        option with a value less than IRT_MINIMUM.</t>

        <t>As per <xref target="RFC3315-5.6"/>, the value 0xffffffff is taken to
        mean "infinity" and implies that the client should not refresh its
        configuration data without some other trigger (such as detecting
        movement to a new link).</t>

        <t>If a client contacts the server to obtain new data or refresh some
        existing data before the refresh time expires, then it SHOULD also
        refresh all data covered by this option.</t>

        <t>When the client detects that the refresh time has expired, it SHOULD
        try to update its configuration data by sending an Information-
        Request as specified in <xref target="RFC3315-18.1.5"/>, except that the
        client MUST delay sending the first Information-request by a random
        amount of time between 0 and INF_MAX_DELAY.</t>

        <t>A client MAY have a maximum value for the refresh time, where that
        value is used whenever the client receives this option with a value
        higher than the maximum.  This also means that the maximum value is
        used when the received value is "infinity".  A maximum value might
        make the client less vulnerable to attacks based on forged DHCP
        messages.  Without a maximum value, a client may be made to use wrong
        information for a possibly infinite period of time.  There may
        however be reasons for having a very long refresh time, so it may be
        useful for this maximum value to be configurable.</t>

      </section>

      <!-- Merging section 4. from RFC7083 (SOL_MAX_RT option) -->

      <section anchor="SOL_MAX_RT_option" title="SOL_MAX_RT Option">
        <t>A DHCP server sends the SOL_MAX_RT option to a client to override
        the default value of SOL_MAX_RT. The value of SOL_MAX_RT in the option
        replaces the default value defined in <xref
        target="RFC3315-5.5"></xref>. One use for the SOL_MAX_RT option is to
        set a longer value for SOL_MAX_RT, which reduces the Solicit traffic
        from a client that has not received a response to its Solicit
        messages.</t>

        <t>The format of the SOL_MAX_RT option is:</t>

        <figure align="center" anchor="FigOption82"
                title="SOL_MAX_RT Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       SOL_MAX_RT value                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_SOL_MAX_RT (82).</t>

            <t hangText="   option-len">4.</t>

            <t hangText="   SOL_MAX_RT value">Overriding value for SOL_MAX_RT
            in seconds; MUST be in range: 60 &lt;= "value" &lt;= 86400 (1
            day).</t>
          </list></t>

        <!-- The following paragraphs have been merged from section 7 and 8
             of RFC7083 -->

        <t>A DHCP client MUST include the SOL_MAX_RT option code in any Option
        Request option (see <xref target="RFC3315-22.7"></xref>) it sends.</t>

        <t>The DHCP server MAY include the SOL_MAX_RT option in any response
        it sends to a client that has included the SOL_MAX_RT option code in
        an Option Request option. The SOL_MAX_RT option is sent in the main
        body of the message to client, not as an encapsulated option in, e.g.,
        an IA_NA, IA_TA, or IA_PD option.</t>

        <t>A DHCP client MUST ignore any SOL_MAX_RT option values that are
        less than 60 or more than 86400.</t>

        <t>If a DHCP client receives a message containing a SOL_MAX_RT option
        that has a valid value for SOL_MAX_RT, the client MUST set its
        internal SOL_MAX_RT parameter to the value contained in the SOL_MAX_RT
        option. This value of SOL_MAX_RT is then used by the retransmission
        mechanism defined in <xref target="RFC3315-14"></xref> and <xref
        target="solicit-create-transmit"></xref>.</t>

        <t>The purpose of this mechanism is to give network
        administrator a way to avoid large DHCP traffic if all DHCP
        servers become unavailable. Therefore this value is expected
        to be retained for as long as practically possible.</t>

        <t>Updated SOL_MAX_RT value applies only to the network interface on
        which the client received SOL_MAX_RT option.</t>

        <t>The requirement for the client to request SOL_MAX_RT serves
        two purposes. First, it distinguishes between legacy and
        modern clients. Second, it allows modern clients to take
        advantage of the configurable SOL_MAX_RT values, even if the
        server is a legacy one.</t>
      </section>

      <!-- ends: merged section 4. from RFC7083 -->

      <section anchor="INF_MAX_RT_option" title="INF_MAX_RT Option">
        <t>A DHCP server sends the INF_MAX_RT option to a client to override
        the default value of INF_MAX_RT. The value of INF_MAX_RT in the option
        replaces the default value defined in <xref
        target="RFC3315-5.5"></xref>. One use for the INF_MAX_RT option is to
        set a longer value for INF_MAX_RT, which reduces the
        Information-request traffic from a client that has not received a
        response to its Information-request messages.</t>

        <t>The format of the INF_MAX_RT option is:</t>

        <figure align="center" anchor="FigOption83"
                title="INF_MAX_RT Option Format">
          <preamble></preamble>

          <artwork align="left"><![CDATA[

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          option-code          |         option-len            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       INF_MAX_RT value                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          ]]></artwork>

          <postamble></postamble>
        </figure>

        <t><list hangIndent="24" style="hanging">
            <t hangText="   option-code">OPTION_INF_MAX_RT (83).</t>

            <t hangText="   option-len">4.</t>

            <t hangText="   SOL_MAX_RT value">Overriding value for INF_MAX_RT
            in seconds; MUST be in range: 60 &lt;= "value" &lt;= 86400 (1
            day).</t>
          </list></t>

        <!-- The following paragraphs have been merged from section 7 of RFC7083 -->

        <t>A DHCP client MUST include the INF_MAX_RT option code in any Option
        Request option (see <xref target="RFC3315-22.7"></xref>) it sends.</t>

        <t>The DHCP server MAY include the INF_MAX_RT option in any response
        it sends to a client that has included the INF_MAX_RT option code in
        an Option Request option. The INF_MAX_RT option is sent in the main
        body of the message to client, not as an encapsulated option in, e.g.,
        an IA_NA, IA_TA, or IA_PD option.</t>

        <t>A DHCP client MUST ignore any INF_MAX_RT option values that are
        less than 60 or more than 86400.</t>

        <t>If a DHCP client receives a message containing an INF_MAX_RT option
        that has a valid value for INF_MAX_RT, the client MUST set its
        internal INF_MAX_RT parameter to the value contained in the INF_MAX_RT
        option. This value of INF_MAX_RT is then used by the retransmission
        mechanism defined in <xref target="RFC3315-14"></xref> and <xref
        target="RFC3315-18.1.5"></xref>.</t>

        <t>Updated INF_MAX_RT value applies only to the network interface on
        which the client received INF_MAX_RT option.</t>
      </section>

      <!-- ends: merged section 5. from RFC7083 -->
    </section>

    <!-- ends: "22 from line 3547-->

    <section anchor="security" title="Security Considerations">
      <!-- 23, line 4492-->

      <t>This section discusses security considerations that are not related
      to privacy. For dedicated privacy discussion, see <xref
      target="privacy"></xref>. The work in progress
      <xref target="I-D.ietf-dhc-sedhcpv6"/> document provides additional
      analysis of the security issues and specifies a secure client and
      server communication mechanism.</t>

      <t>The threat to DHCP is inherently an insider threat (assuming a
      properly configured network where DHCP ports are blocked on the
      perimeter gateways of the enterprise). Regardless of the gateway
      configuration, however, the potential attacks by insiders and outsiders
      are the same.</t>

      <t>One attack specific to a DHCP client is the establishment of a
      malicious server with the intent of providing incorrect configuration
      information to the client. The motivation for doing so may be to mount a
      "man in the middle" attack that causes the client to communicate with a
      malicious server instead of a valid server for some service such as DNS
      or NTP. The malicious server may also mount a denial of service attack
      through misconfiguration of the client that causes all network
      communication from the client to fail.</t>

      <!-- Merged from the section 10 of RFC7083. -->

      <t>A malicious DHCP server might cause a client to set its SOL_MAX_RT
      and INF_MAX_RT parameters to an unreasonably high value with the
      SOL_MAX_RT and INF_MAX_RT options, which may cause an undue delay in a
      client completing its DHCP protocol transaction in the case no other
      valid response is received. Assuming the client also receives a response
      from a valid DHCP server, large values for SOL_MAX_RT and INF_MAX_RT
      will not have any effect.</t>

      <t>There is another threat to DHCP clients from mistakenly or
      accidentally configured DHCP servers that answer DHCP client requests
      with unintentionally incorrect configuration parameters.</t>

      <t>A DHCP client may also be subject to attack through the receipt of a
      Reconfigure message from a malicious server that causes the client to
      obtain incorrect configuration information from that server. Note that
      although a client sends its response (Renew, Rebind, or Information-request
      message) through a relay agent and, therefore, that response will only
      be received by servers to which DHCP messages are relayed, a malicious
      server could send a Reconfigure message to a client, followed (after an
      appropriate delay) by a Reply message that would be accepted by the
      client. Thus, a malicious server that is not on the network path between
      the client and the server may still be able to mount a Reconfigure
      attack on a client. The use of transaction IDs that are
      cryptographically sound and cannot easily be predicted will also reduce
      the probability that such an attack will be successful.</t>

      <t>Because of the opportunity for attack through the Reconfigure
      message, a DHCP client MUST discard any Reconfigure message that does
      not include authentication or that does not pass the validation process
      for the authentication protocol.</t>

      <t>The Reconfigure Key protocol described in <xref
      target="reconfigure-protocol"></xref> provides protection against the use of a
      Reconfigure message by a malicious DHCP server to mount a denial of
      service or man-in-the-middle attack on a client. This protocol can be
      compromised by an attacker that can intercept the initial message in
      which the DHCP server sends the key "in plain text" to the client.</t>

      <t>Many of these rogue server attacks can be mitigated by making use of
      the mechanism described in <xref target="RFC7610"/>.</t>

      <t>The threat specific to a DHCP server is an invalid client
      masquerading as a valid client. The motivation for this may be for theft
      of service, or to circumvent auditing for any number of nefarious
      purposes.</t>

      <t>The threat common to both the client and the server is the resource
      "denial of service" (DoS) attack. These attacks typically involve the
      exhaustion of available assigned address or delegatable prefixes, or
      the exhaustion of CPU or network bandwidth, and are present anytime
      there is a shared resource. Some forms of these exhaustion attacks can
      be partially mitigated by appropriate server policy, e.g., limiting
      the maximum number of leases any one client can get.</t>

      <t>The messages exchanged between relay agents and servers may be used
      to mount a "man in the middle" or denial of service attack. Communication
      between a server and a relay agent, and communication between relay agents,
      can be authenticated and encrypted through the use of IPsec, as
      described in <xref target="I-D.ietf-dhc-relay-server-security"/>.</t>

      <t>However, the use of manually configured pre-shared keys for IPsec between
      relay agents and servers does not defend against replayed DHCP messages.
      Replayed messages can represent a DOS attack through exhaustion of
      processing resources, but not through mis-configuration or exhaustion of
      other resources such as assignable address and delegatable prefixes.</t>

      <t>Networks configured with delegated prefixes should be configured to
      preclude intentional or inadvertent inappropriate advertisement of these
      prefixes.</t>

    </section>

    <!-- ends: "23 from line 4492-->

    <section anchor="privacy" title="Privacy Considerations">
      <t>This section focuses on the server considerations. For extended
      discussion about privacy considerations for the client, see <xref
      target="RFC7824"></xref>. In particular, Section 3
      of said document discusses various identifiers that could be misused to
      track the client. Section 4 discusses existing mechanisms that may have
      an impact on client's privacy. Finally, Section 5 discusses potential
      attack vectors. For recommendations how to address or mitigate those
      issues, see <xref target="RFC7844"></xref>.</t>

      <t>This specification does not define any allocation strategies.
      Implementers are expected to develop their own algorithm for the server
      to choose a resource out of the available pool. Several possible
      allocation strategies are mentioned in Section 4.3 of <xref
      target="RFC7824"></xref>. Please keep in mind that
      this list is not exhaustive and there are certainly other possible
      strategies. Readers are also encouraged to read <xref
      target="RFC7707"/>, in particular Section 4.1.2 that discusses
      the problems with certain allocation strategies.</t>

      <!-- Christian's suggestion was also to include the following text:

      Using memory-less random allocation schemes fails to maintain enough
      stability for many applications; The algorithm presented in [RFC7217]
      provides a solution to this problem for nodes using IPv6 Stateless
      Address Autoconfiguration. Similar algorithms could be used by DHCPv6
      servers to avoid the aforementioned issues.

      I (tomek) chose not to do this, because DHC had a similar proposal, and
      after a long deliberation, decided to drop it. This mail summarises the issues:
      https://mailarchive.ietf.org/arch/msg/dhcwg/iQKRFN2iRx4zqkyijBub9X-4Byg -->
    </section>

    <section anchor="iana" title="IANA Considerations">
      <!-- 24, line 4595-->

      <t>This document does not define any new DHCP name spaces or
      definitions.</t>

      <t>The publication of this document does not change the
      assignment rules for new values for message types, option codes,
      DUID types or status codes.</t>

      <t>The list of assigned values used in DHCPv6 is available at
      http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xml</t>

      <t>IANA is requested to update the
      http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml
      page to add a reference to this document for definitions previously
      created by <xref target="RFC3315"/>, <xref target="RFC3633"/>,
      <xref target="RFC4242"/> and <xref target="RFC7083"/>.</t>

      <t>IANA is requested to add a column to the DHCPv6 Option table at
      http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml
      to indicate which options are allowed to appear in the ORO option.  See Section 20.7.</t>
         
      <t>IANA is requested to add two columns to the DHCPv6 Option table at
      http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml
      to indicate which options are allowed to appear in a client's ORO option
      (see <xref target="RFC3315-22.7"/>) and which options are singleton
      options (only allowed to appear once as a top-level or encapsulated
      option - see Section 16 of <xref target="RFC7227"/>).
      <xref target="option_update_table"/> provides the data for the options
      assigned by IANA at the time of writing.</t>

<texttable anchor="option_update_table" title="Updated Options Table">
<ttcol align='right'>Option</ttcol>
<ttcol align='left'>Option Name (OPTION prefix removed)</ttcol>
<ttcol align='left'>Client ORO (1)</ttcol>
<ttcol align='left'>Singleton Option</ttcol>
<c>1</c><c>CLIENTID</c><c>No</c><c>Yes</c>
<c>2</c><c>SERVERID</c><c>No</c><c>Yes</c>
<c>3</c><c>IA_NA</c><c>No</c><c>No</c>
<c>4</c><c>IA_TA</c><c>No</c><c>No</c>
<c>5</c><c>IAADDR</c><c>No</c><c>No</c>
<c>6</c><c>ORO</c><c>No</c><c>Yes</c>
<c>7</c><c>PREFERENCE</c><c>No</c><c>Yes</c>
<c>8</c><c>ELAPSED_TIME</c><c>No</c><c>Yes</c>
<c>9</c><c>RELAY_MSG</c><c>No</c><c>Yes</c>
<c>11</c><c>AUTH</c><c>No</c><c>Yes</c>
<c>12</c><c>UNICAST</c><c>Yes</c><c>Yes</c>
<c>13</c><c>STATUS_CODE</c><c>No</c><c>Yes</c>
<c>14</c><c>RAPID_COMMIT</c><c>No</c><c>Yes</c>
<c>15</c><c>USER_CLASS</c><c>No</c><c>Yes</c>
<c>16</c><c>VENDOR_CLASS</c><c>No</c><c>No (2)</c>
<c>17</c><c>VENDOR_OPTS</c><c>Optional</c><c>No (2)</c>
<c>18</c><c>INTERFACE_ID</c><c>No</c><c>Yes</c>
<c>19</c><c>RECONF_MSG</c><c>No</c><c>Yes</c>
<c>20</c><c>RECONF_ACCEPT</c><c>No</c><c>Yes</c>
<c>21</c><c>SIP_SERVER_D</c><c>Yes</c><c>Yes</c>
<c>22</c><c>SIP_SERVER_A</c><c>Yes</c><c>Yes</c>
<c>23</c><c>DNS_SERVERS</c><c>Yes</c><c>Yes</c>
<c>24</c><c>DOMAIN_LIST</c><c>Yes</c><c>Yes</c>
<c>25</c><c>IA_PD</c><c>No</c><c>No</c>
<c>26</c><c>IAPREFIX</c><c>No</c><c>No</c>
<c>27</c><c>NIS_SERVERS</c><c>Yes</c><c>Yes</c>
<c>28</c><c>NISP_SERVERS</c><c>Yes</c><c>Yes</c>
<c>29</c><c>NIS_DOMAIN_NAME</c><c>Yes</c><c>Yes</c>
<c>30</c><c>NISP_DOMAIN_NAME</c><c>Yes</c><c>Yes</c>
<c>31</c><c>SNTP_SERVERS</c><c>Yes</c><c>Yes</c>
<c>32</c><c>INFORMATION_REFRESH_TIME</c><c>Required for Information-request</c><c>Yes</c>
<c>33</c><c>BCMCS_SERVER_D</c><c>Yes</c><c>Yes</c>
<c>34</c><c>BCMCS_SERVER_A</c><c>Yes</c><c>Yes</c>
<c>36</c><c>GEOCONF_CIVIC</c><c>Yes</c><c>Yes</c>
<c>37</c><c>REMOTE_ID</c><c>No</c><c>Yes</c>
<c>38</c><c>SUBSCRIBER_ID</c><c>No</c><c>Yes</c>
<c>39</c><c>CLIENT_FQDN</c><c>Yes</c><c>Yes</c>
<c>40</c><c>PANA_AGENT</c><c>Yes</c><c>Yes</c>
<c>41</c><c>NEW_POSIX_TIMEZONE</c><c>Yes</c><c>Yes</c>
<c>42</c><c>NEW_TZDB_TIMEZONE</c><c>Yes</c><c>Yes</c>
<c>43</c><c>ERO</c><c>No</c><c>Yes</c>
<c>44</c><c>LQ_QUERY</c><c>No</c><c>Yes</c>
<c>45</c><c>CLIENT_DATA</c><c>NO</c><c>Yes</c>
<c>46</c><c>CLT_TIME</c><c>No</c><c>Yes</c>
<c>47</c><c>LQ_RELAY_DATA</c><c>No</c><c>Yes</c>
<c>48</c><c>LQ_CLIENT_LINK</c><c>No</c><c>Yes</c>
<c>49</c><c>MIP6_HNIDF</c><c>Yes</c><c>Yes</c>
<c>50</c><c>MIP6_VDINF</c><c>Yes</c><c>Yes</c>
<c>51</c><c>V6_LOST</c><c>Yes</c><c>Yes</c>
<c>52</c><c>CAPWAP_AC_V6</c><c>Yes</c><c>Yes</c>
<c>53</c><c>RELAY_ID</c><c>No</c><c>Yes</c>
<c>54</c><c>OPTION-IPv6_Address-MoS</c><c>Yes</c><c>Yes</c>
<c>55</c><c>OPTION-IPv6_FQDN-MoS</c><c>Yes</c><c>Yes</c>
<c>56</c><c>NTP_SERVER</c><c>Yes</c><c>Yes</c>
<c>57</c><c>V6_ACCESS_DOMAIN</c><c>Yes</c><c>Yes</c>
<c>58</c><c>SIP_UA_CS_LIST</c><c>Yes</c><c>Yes</c>
<c>59</c><c>OPT_BOOTFILE_URL</c><c>Yes</c><c>Yes</c>
<c>60</c><c>OPT_BOOTFILE_PARAM</c><c>Yes</c><c>Yes</c>
<c>61</c><c>CLIENT_ARCH_TYPE</c><c>No</c><c>Yes</c>
<c>62</c><c>NII</c><c>Yes</c><c>Yes</c>
<c>63</c><c>GEOLOCATION</c><c>Yes</c><c>Yes</c>
<c>64</c><c>AFTR_NAME</c><c>Yes</c><c>Yes</c>
<c>65</c><c>ERP_LOCAL_DOMAIN_NAME</c><c>Yes</c><c>Yes</c>
<c>66</c><c>RSOO</c><c>No</c><c>Yes</c>
<c>67</c><c>PD_EXCLUDE</c><c>Yes</c><c>Yes</c>
<c>68</c><c>VSS</c><c>No</c><c>Yes</c>
<c>69</c><c>MIP6_IDINF</c><c>Yes</c><c>Yes</c>
<c>70</c><c>MIP6_UDINF</c><c>Yes</c><c>Yes</c>
<c>71</c><c>MIP6_HNP</c><c>Yes</c><c>Yes</c>
<c>72</c><c>MIP6_HAA</c><c>Yes</c><c>Yes</c>
<c>73</c><c>MIP6_HAF</c><c>Yes</c><c>Yes</c>
<c>74</c><c>RDNSS_SELECTION</c><c>Yes</c><c>No</c>
<c>75</c><c>KRB_PRINCIPAL_NAME</c><c>Yes</c><c>Yes</c>
<c>76</c><c>KRB_REALM_NAME</c><c>Yes</c><c>Yes</c>
<c>77</c><c>KRB_DEFAULT_REALM_NAME</c><c>Yes</c><c>Yes</c>
<c>78</c><c>KRB_KDC</c><c>Yes</c><c>Yes</c>
<c>79</c><c>CLIENT_LINKLAYER_ADDR</c><c>No</c><c>Yes</c>
<c>80</c><c>LINK_ADDRESS</c><c>No</c><c>Yes</c>
<c>81</c><c>RADIUS</c><c>No</c><c>Yes</c>
<c>82</c><c>SOL_MAX_RT</c><c>Required for Solicit</c><c>Yes</c>
<c>83</c><c>INF_MAX_RT</c><c>Required for Information-request</c><c>Yes</c>
<c>84</c><c>ADDRSEL</c><c>Yes</c><c>Yes</c>
<c>85</c><c>ADDRSEL_TABLE</c><c>Yes</c><c>Yes</c>
<c>86</c><c>V6_PCP_SERVER</c><c>Yes</c><c>No</c>
<c>87</c><c>DHCPV4_MSG</c><c>No</c><c>Yes</c>
<c>88</c><c>DHCP4_O_DHCP6_SERVER</c><c>Yes</c><c>Yes</c>
<c>89</c><c>S46_RULE</c><c>No</c><c>No - See RFC</c>
<c>90</c><c>S46_BR</c><c>No</c><c>No</c>
<c>91</c><c>S46_DMR</c><c>No</c><c>Yes</c>
<c>92</c><c>S46_V4V6BIND</c><c>No</c><c>Yes</c>
<c>93</c><c>S46_PORTPARAMS</c><c>No</c><c>Yes</c>
<c>94</c><c>S46_CONT_MAPE</c><c>Yes</c><c>No</c>
<c>95</c><c>S46_CONT_MAPT</c><c>Yes</c><c>Yes</c>
<c>96</c><c>S46_CONT_LW</c><c>Yes</c><c>Yes</c>
<c>97</c><c>4RD</c><c>Yes</c><c>Yes</c>
<c>98</c><c>4RD_MAP_RULE</c><c>Yes</c><c>Yes</c>
<c>99</c><c>4RD_NON_MAP_RULE</c><c>Yes</c><c>Yes</c>
<c>100</c><c>LQ_BASE_TIME</c><c>No</c><c>Yes</c>
<c>101</c><c>LQ_START_TIME</c><c>No</c><c>Yes</c>
<c>102</c><c>LQ_END_TIME</c><c>No</c><c>Yes</c>
<c>103</c><c>DHCP Captive-Portal</c><c>Yes</c><c>Yes</c>
<c>104</c><c>MPL_PARAMETERS</c><c>Yes</c><c>Yes</c>
<c>105</c><c>ANI_ATT</c><c>No</c><c>Yes</c>
<c>106</c><c>ANI_NETWORK_NAME</c><c>No</c><c>Yes</c>
<c>107</c><c>ANI_AP_NAME</c><c>No</c><c>Yes</c>
<c>108</c><c>ANI_AP_BSSID</c><c>No</c><c>Yes</c>
<c>109</c><c>ANI_OPERATOR_ID</c><c>No</c><c>Yes</c>
<c>110</c><c>ANI_OPERATOR_REALM</c><c>No</c><c>Yes</c>
<c>111</c><c>S46_PRIORITY</c><c>Yes</c><c>Yes</c>
<c>112</c><c>MUD_URL_V6 (TEMPORARY)</c><c>No</c><c>Yes</c>
<c>113</c><c>V6_PREFIX64</c><c>Yes</c><c>No</c>
<c>114-132</c><c>Failover Options</c><c>No</c><c>See RFC</c>
<c>143</c><c>IPv6_ADDRESS-ANDSF</c><c>Yes</c><c>Yes</c>
</texttable>

<t>Notes for <xref target="option_update_table"/>:
<list hangIndent="6" style="hanging">
    <t hangText="(1)"> For the "Client ORO" column: a "Yes" for an option
     means that the client includes this option number if it desires
     that configuration information; a "No" means that the option MUST
     NOT be included (and servers SHOULD silently ignore that option
     if it appears).</t>

    <t hangText="(2)"> For each enterprise-number, there MUST only be
    a single instance.</t>
</list></t>

      <t>IANA is requested to update the All_DHCP_Relay_Agents_and_Servers
      (FF02::1:2) and All_DHCP_Servers (FF05::1:3)
      table entries in the IPv6 multicast address space registry at
      http://www.iana.org/assignments/ipv6-multicast-addresses/ipv6-multicast-addresses.xhtml
      to reference this document instead of <xref target="RFC3315"/>.</t>

      <t>IANA is requested to update the
      http://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml#authentication-protocol-id
      page to add an "Obsolete" annotation into the "DHCPv6 Delayed
      Authentication" entity in the "Authentication Suboption (value 8) -
      Protocol identifier values" registry, and
      https://www.iana.org/assignments/auth-namespaces/auth-namespaces.xhtml
      page to add an "Obsolete" annotation into the "Delayed Authentication"
      entity in the "Protocol Name Space Values" registry. IANA is also
      requested to update these pages to reference this document
      instead of <xref target="RFC3315"/>.
      </t>

    </section>

    <!-- ends: "24 from line 4595-->

    <section anchor="obsolete" title="Obsoleted Mechanisms">
      <t>This specification is mostly a corrected and cleaned up version
      of the original specification, <xref target="RFC3315"></xref>, along with
      numerous additions from later RFCs. However, there are a small number of
      mechanisms that were not widely deployed, were
      underspecified or had other operational issues. Those mechanisms are now
      considered deprecated. Legacy implementations MAY support them, but
      implementations conformant to this document MUST NOT rely on them.</t>

      <t>The following mechanisms are now obsolete:</t>

      <t>Delayed Authentication. This mechanism was underspecified and had
      significant operational burden. As a result, after 10 years its adoption
      was extremely limited at best.</t>

      <t>Lifetime hints sent by a client. Clients used to be allowed to send
      lifetime values as hints. This mechanism was not widely implemented and
      there were known misimplementations that sent the remaining lifetimes rather
      than total desired lifetimes. That in turn was sometimes misunderstood by
      servers as a request for ever decreasing lease lifetimes, which caused
      issues when values started approaching zero. Clients now SHOULD set
      lifetimes to 0 in IA Address and IA Prefix options, and servers MUST
      ignore any requested lifetime value.</t>

      <t>T1/T2 hints sent by a client. These had similar issues to the
      lifetime hints. Clients now SHOULD set the T1/T2 values to 0 in IA_NA and
      IA_PD options, and servers MUST ignore any client supplied T1/T2
      values.</t>

    </section>

    <section title="Acknowledgments">
      <!-- 25, line 4764-->

      <t>This document is merely a refinement of earlier work by the
      authors of RFC3315 (Ralph Droms, Jim Bound, Bernie Volz,
      Ted Lemon, Charles Perkins, and Mike Carney) RFC3633 (Ole Troan
      and Ralph Droms), RFC3736 (Ralph Droms), RFC4242 (Stig Venaas,
      Tim Chown, and Bernie Volz), RFC7083 (Ralph Droms), and RFC7550
      (Ole Troan, Bernie Volz, and Marcin Siodelski) and would not be
      possible without their original work.</t>

      <t>A number of additional people have contributed to identifying issues
      with RFC3315 and RFC3633 and proposed resolutions to these issues as
      reflected in this document (in no particular order): Ole Troan, Robert
      Marks, Leaf Yeh, Michelle Cotton, Pablo Armando, John Brzozowski,
      Suresh Krishnan, Hideshi Enokihara, Alexandru Petrescu,
      Yukiyo Akisada, Tatuya Jinmei, Fred Templin and Christian Huitema.</t>

      <t>We also thank the following, not otherwise acknowledged and in no
      particular order, for their review comments: Jeremy Reed, Francis Dupont,
      Tatuya Jinmei, Lorenzo Colitti, Tianxiang Li, Ian Farrer, Yogendra Pal,
      Kim Kinnear, Shawn Routhier, Tim Chown, and Michayla Newcombe.</t>

      <t>And, special thanks to Ralph Droms for answering many questions related
      to the original RFC3315 and RFC3633 work and for being the document
      shepherd.</t>
    </section>

    <!-- ends: "25 from line 4764-->
  </middle>

  <back>
    <references title="Normative References">

      <?rfc include='reference.RFC.0768'?>

      <!-- Postel, J., "User Datagram Protocol", STD 6, RFC 768, August 1980. -->

      <?rfc include='reference.RFC.1035'?>

      <!-- Mockapetris, P., "Domain names - implementation andspecification", RFC 1035, November 1987. -->

      <?rfc include='reference.RFC.2119'?>

      <!--  Bradner, S., "Key words for use in RFCs to Indicate RequirementLevels", BCP 14, RFC 2119, March 1997. -->

      <?rfc include='reference.RFC.2460'?>

      <!--  Deering, S. and R. Hinden, "Internet Protocol, Version 6 (IPv6)Specification", RFC 2460, December 1998. -->

      <?rfc include='reference.RFC.4291'?>

      <!--  Hinden, R. and S. Deering, "IP Version 6 Addressing Architecture", RFC 4291, February 2006. -->

      <?rfc include='reference.RFC.4861'?>

      <!-- Narten, T., Nordmark, E. and W. Simpson, "Neighbor Discovery forIP Version 6 (IPv6)", RFC 4861, September 2007. -->

      <?rfc include='reference.RFC.4862'?>

      <!-- Thomson, S. and T. Narten, "IPv6 Stateless AddressAutoconfiguration", RFC 4862, September 2007. -->

      <?rfc include='reference.RFC.6221'?>

      <?rfc include='reference.RFC.6355'?>

      <?rfc include='reference.RFC.7083'?>

      <?rfc include='reference.RFC.7283'?>

    </references>

    <references title="Informative References">

      <reference anchor="IANA-PEN">
        <front>
          <title>Private Enterprise Numbers registry
          http://www.iana.org/assignments/enterprise-numbers</title>

          <author>
            <organization>IANA</organization>
          </author>

          <date />
        </front>
      </reference>

       <reference anchor="IANA-RESERVED-IID">
        <front>
          <title>
              Reserved IPv6 Interface Identifiers
              http://www.iana.org/assignments/ipv6-interface-ids/ipv6-interface-ids.xml
              </title>

          <author>
            <organization>IANA</organization>
          </author>

          <date />
        </front>
      </reference>

      <?rfc include='reference.RFC.0826'?>

      <?rfc include='reference.RFC.2131'?>
      <?rfc include='reference.RFC.2132'?>
      <?rfc include='reference.RFC.2462'?>
      <?rfc include='reference.RFC.2464'?>

      <?rfc include='reference.RFC.3041'?>
      <?rfc include='reference.RFC.3162'?>
      <?rfc include='reference.RFC.3315'?>
      <?rfc include='reference.RFC.3633'?>
      <?rfc include='reference.RFC.3646'?>
      <?rfc include='reference.RFC.3736'?>
      <?rfc include='reference.RFC.3769'?>

      <?rfc include='reference.RFC.4075'?>
      <?rfc include='reference.RFC.4193'?>
      <?rfc include='reference.RFC.4242'?>
      <?rfc include='reference.RFC.4477'?>
      <?rfc include='reference.RFC.4704'?>
      <?rfc include='reference.RFC.4941'?>
      <?rfc include='reference.RFC.4943'?>

      <?rfc include='reference.RFC.5007'?>
      <?rfc include='reference.RFC.5374'?>
      <?rfc include='reference.RFC.5453'?>
      <?rfc include='reference.RFC.5460'?>
      <?rfc include='reference.RFC.5905'?>

      <?rfc include='reference.RFC.6603'?>
      <?rfc include='reference.RFC.6724'?>
      <?rfc include='reference.RFC.6879'?>
      <?rfc include='reference.RFC.6939'?>
      <?rfc include='reference.RFC.6977'?>

      <?rfc include='reference.RFC.7084'?>
      <?rfc include='reference.RFC.7136'?>
      <?rfc include='reference.RFC.7227'?>
      <?rfc include='reference.RFC.7341'?>
      <?rfc include='reference.RFC.7368'?>
      <?rfc include='reference.RFC.7421'?>
      <?rfc include='reference.RFC.7550'?>
      <?rfc include='reference.RFC.7563'?>
      <?rfc include='reference.RFC.7598'?>
      <?rfc include='reference.RFC.7610'?>
      <?rfc include='reference.RFC.7707'?>
      <?rfc include='reference.RFC.7721'?>
      <?rfc include='reference.RFC.7824'?>
      <?rfc include='reference.RFC.7844'?>
      <?rfc include='reference.RFC.7969'?>

      <?rfc include='reference.I-D.ietf-dhc-dhcpv6-prefix-length-hint-issue'?>
         
      <?rfc include='reference.I-D.ietf-dhc-relay-server-security'?>

      <?rfc include='reference.I-D.ietf-dhc-sedhcpv6'?>

      <reference anchor="TR-187"
                 target="https://www.broadband-forum.org/technical/download/TR-187_Issue-2.pdf">
        <front>
          <title>TR-187 - IPv6 for PPP Broadband Access</title>
          <author>
            <organization>Broadband Forum</organization>
          </author>

          <date year="2013" month="February" />
        </front>
      </reference>

    </references>

    <!-- Let's briefly document relevant changes against 3315 here -->

    <section anchor="ChangeSummary" title="Summary of Changes">

      <t>This appendix provides a summary of the significant changes made
      to this updated DHCPv6 specification.</t>

      <t><list style="numbers">
<t>The Introduction <xref target="intro-and-overview"/> was reorganized and
updated. In particular, the client/server message exchanges were moved into
a new (and expanded) section on their own (see 
<xref target="Client-Server-Exchanges"/>). And, new sections were added to
discuss the relation to previous DHCPv6 documents and also to DHCPv4.</t>

<t>The Requirements <xref target="requirements"/> and Background
<xref target="background"/> had very minor edits.</t>

<t>The Terminology <xref target="terminology"/> had minor edits.</t>

<t>The DHCP Terminology <xref target="dhcp-terminology"/> was expanded to
incorporate definitions from RFC3633, add T1/T2 definitions, 
add a few new definitions useful in a document that combined address and prefix 
delegation assignments, and improve some existing definitions.</t>

<t>The Client-Server Exchanges <xref target="Client-Server-Exchanges"/> was
added from material previously in the Introduction Section 1 of RFC3315 and
was expanded.</t>

<t>The Operational Models <xref target="OpModes"/> is new and provides
information on the kinds of DHCP clients and how they operate.</t>

<t>The DHCP Constants <xref target="dhcp-constants"/> was primarily updated
to add constants from RFC4242 and RFC7083.</t>

<t>The Client/Server Message Formats <xref target="RFC3315-6"/>, Relay
Agent/Server Message Formats <xref target="RFC3315-7"/>, and Representation and
Use of Domain Names <xref target="RFC3315-8"/> had only very minor changes.</t>

<t>The DHCP Unique Identifier (DUID) <xref target="RFC3315-9"/> now discourages,
rather than disallows, a server to parse the DUID, now includes some information
on the DUID-UUID (RFC6355), and has other minor edits.</t>

<t>The Identity Association <xref target="RFC3315-10"/> was expanded to better
explain the concept and also included prefix delegation.</t>

<t>The Assignment to an IA <xref target="RFC3315-11"/> incorporates material from
two sections (11 and 12) of RFC3315 and also includes a section on
prefix delegation.</t>

<t>The Transmission of Messages by a Client <xref target="RFC3315-13"/> was
expanded to include rate limiting by clients and how clients should handle T1
or T2 values of 0.</t>

<t>The Reliability of Client Initiated Message Exchanges <xref target="RFC3315-14"/>
was expanded to clarify that the Elapsed Time option must be updated in
retransmitted messages and that a client is not required to listen for DHCP
traffic for the entire retransmission period.</t>

<t>The Message Validation <xref target="RFC3315-15"/> had minor edits.</t>

<t>The Client Source Address and Interface Selection <xref target="RFC3315-16"/>
was expanded to include prefix delegation.</t>

<t>The DHCP Configuration Exchanges <xref target="configuration-exchange"/>
consolidates what used to be in the RFC3315 DHCP Server Solicitation Section
17, DHCP Client-Initiated Configuration Exchange Section 18, and
DHCP Server-Initiated Configuration Exchange Section 19. This material was
reorganized and enhanced, and incorporates prefix delegation from RFC3633
and other changes from RFC4242, RFC7083, and RFC7550. A few changes of note:
     <list>
               <t>The Option Request option is no longer optional for some
               messages (Solicit and Information-request) as RFC7083 requires
               clients to request SOL_MAX_RT or INF_MAX_RT options.</t>
               <t>The Reconfigure message should no longer contain
               IA_NA/IA_PD, ORO, or other options to indicate to the
               client what was reconfigured. The client should request
               everything it needs in the response to the Reconfigure.</t>
               <t>Lifetime and T1/T2 hints should not be sent by a client
               (it should send 0 values in these fields) and any non-zero
               values should be ignored by the server.</t>
               <t>Clarified that a server may return different addresses
               in the Reply than requested by a client in the Request message.
               Also clarified that a server must not include addresses that it
               will not assign.</t>
     </list></t>

<t>The Relay Agent Behavior <xref target="RFC3315-20"/> had minor edits.</t>

<t>The Authentication of DHCP Messages <xref target="RFC3315-21"/> had
significant changes: IPsec materials were mostly removed and replaced
with a reference to <xref target="I-D.ietf-dhc-relay-server-security"/>, and the
Delay Authentication Protocol was removed (see <xref target="obsolete"/>).
Note that the Reconfigure Key Authentication Protocol is retained. In
addition, the length of the "key ID" field was defined and the "DHCP
realm" was clarified to be a domain name encoded as per
<xref target="RFC3315-8"/>.</t>

<t>The DHCP Options <xref target="RFC3315-22"/> was expanded to incorporate
the prefix delegation options from RFC3633, the Information Refresh Time
option from RFC4242, and the SOL_MAX_RT and INF_MAX_RT options from RFC7083.
In addition, some additional edits were made to clarify option handling,
such as which options should not be in an Option Request option.</t>

<t>The Security Considerations <xref target="security"/> were updated to
expand the discussion of security threats and incorporate material from the
incorporated documents, primarily RFC3633.</t>

<t>The new Privacy Considerations <xref target="privacy"/> was added to
consider privacy issues.</t>

<t>The IANA Considerations <xref target="iana"/> was rewritten to reflect
the changes requested for this document as other documents have already
made the message, option, DUID, and status code assignments and
this document does not add any new assignments.</t>

<t>The new Obsoleted Mechanisms <xref target="obsolete"/> documents what
this specification obsoletes.</t>

<t>The Appearance of Options in Message Types <xref target="RFC3315-A"/>
and Appearance of Options in the Options Field of DHCP
<xref target="RFC3315-B"/> were updated to reflect the incorporated
options from RFC3633, RFC4242, and RFC7083.</t>

<t>Where appropriate, informational references have been added to
provide further background and guidance throughout the document (as
can be noted by the vast increase in references).</t>

<t>General changes to other IPv6 specifications, such as removing
the use of site-local unicast addresses and adding unique local addresses,
were made to the document. Note that in a few places, older obsoleted RFCs
(such as RFC2462 related to M and O bit handling) are still referenced as
the material cited was not added in the replacement RFC.</t>
   
<t>It should be noted that this document does not refer to all DHCPv6
functionality and specifications. Readers of this specification should
visit http://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xml
and https://datatracker.ietf.org/wg/dhc/ to learn of the RFCs that define 
DHCPv6 messages, options, status-codes, and more.</t>
     
     </list></t>
    </section>

    <!-- ** This should be an appendix tag but that does not yet seem to work! -->

    <!-- tomek: I managed to get it work. The trick was to move section from <middle>
     to <back> -->

    <section anchor="RFC3315-A" title="Appearance of Options in Message Types">
      <t>The following table indicates with a "*" the options are allowed in
      each DHCP message type:</t>

      <figure>
        <artwork><![CDATA[
        Client Server IA_NA/                  Elap. Relay       Server
          ID     ID   IA_TA IA_PD  ORO   Pref Time   Msg. Auth. Unicast
Solicit   *             *     *     *           *
Advert.   *      *      *     *           *
Request   *      *      *     *     *           *
Confirm   *             *                       *
Renew     *      *      *     *     *           *
Rebind    *             *     *     *           *
Decline   *      *      *     *                 *
Release   *      *      *     *                 *
Reply     *      *      *     *                             *     *
Reconf.   *      *
Inform.   * (see note)              *           *           *
R-forw.                                               *
R-repl.                                               *
]]></artwork>
      </figure>

      <t>NOTE: Only included in Information-request messages that are sent in
      response to a Reconfigure (see <xref target="RFC3315-18.1.5"/>).</t>

      <figure>
        <artwork><![CDATA[
                                                              Info
        Status  Rap. User  Vendor Vendor Inter. Recon. Recon. Refresh
         Code  Comm. Class Class  Spec.    ID    Msg.  Accept  Time
Solicit          *     *     *      *                    *
Advert.   *            *     *      *                    *
Request                *     *      *                    *
Confirm                *     *      *
Renew                  *     *      *                    *
Rebind                 *     *      *                    *
Decline                *     *      *
Release                *     *      *
Reply     *      *     *     *      *                    *        *
Reconf.                                           *
Inform.                *     *      *                    *        *
R-forw.                *     *      *      *
R-repl.                *     *      *      *
]]></artwork>
      </figure>
         
      <figure>
        <artwork><![CDATA[
        SOL_MAX_RT  INF_MAX_RT
Solicit    *
Advert.                *
Request
Confirm
Renew
Rebind
Decline
Release
Reply      *           *
Reconf.
Inform.
R-forw.
R-repl.
]]></artwork>
      </figure>         

    </section>

    <!-- ** This should be an appendix tag but that does not yet seem to work! -->

    <section anchor="RFC3315-B"
             title="Appearance of Options in the Options Field of DHCP Options">

      <t>The following table indicates with a "*" where options can appear in
      the options field of other options:</t>

      <figure>
        <artwork><![CDATA[
                Option  IA_NA/                        Relay-  Relay-
                Field   IA_TA  IAADDR IA_PD  IAPREFIX Forw    Reply
Client ID          *
Server ID          *
IA_NA/IA_TA        *
IAADDR                     *
IA_PD              *
IAPREFIX                                 *
ORO                *
Preference         *
Elapsed Time       *
Relay Message                                            *       *
Authentic.         *
Server Uni.        *
Status Code        *       *             *
Rapid Comm.        *
User Class         *
Vendor Class       *
Vendor Info.       *                                     *       *
Interf. ID                                               *       *
Reconf. MSG.       *
Reconf. Accept     *
Info Refresh Time  *
SOL_MAX_RT         *
INF_MAX_RT         *
]]></artwork>
      </figure>

      <t>Note: "Relay-Forw" / "Relay-Reply" options appear in the options
      field of the Relay-forward and Relay-reply messages.</t>
    </section>
  </back>
</rfc>
<!-- generated from file samples/rfc3315.nroff with nroff2xml
  0.0.2 by Tomek Mrugalski -->
